)]}'
{"version": 3, "sources": ["/web_studio/static/src/client_action/app_creator/app_creator.js", "/web_studio/static/src/client_action/editor/editor.js", "/web_studio/static/src/client_action/editor/editor_adapter.js", "/web_studio/static/src/client_action/editor/editor_menu/editor_menu.js", "/web_studio/static/src/client_action/editor/new_view_dialogs/map_new_view_dialog.js", "/web_studio/static/src/client_action/editor/new_view_dialogs/new_view_dialog.js", "/web_studio/static/src/client_action/editor/report_editor_adapter.js", "/web_studio/static/src/client_action/icon_creator/icon_creator.js", "/web_studio/static/src/client_action/model_configurator/model_configurator.js", "/web_studio/static/src/client_action/navbar/home_menu_customizer/home_menu_customizer.js", "/web_studio/static/src/client_action/navbar/navbar.js", "/web_studio/static/src/client_action/studio_action_container.js", "/web_studio/static/src/client_action/studio_client_action.js", "/web_studio/static/src/client_action/studio_home_menu/icon_creator_dialog/icon_creator_dialog.js", "/web_studio/static/src/client_action/studio_home_menu/studio_home_menu.js", "/web_studio/static/src/legacy/action_editor_main.js", "/web_studio/static/src/legacy/edit_menu_adapter.js", "/web_studio/static/src/legacy/new_model_adapter.js", "/web_studio/static/src/legacy/js/py.js", "/web_studio/static/src/legacy/js/edit_menu.js", "/web_studio/static/src/legacy/js/new_model.js", "/web_studio/static/src/legacy/js/common_menu_dialog.js", "/web_studio/static/src/legacy/js/common/abstract_editor_manager.js", "/web_studio/static/src/legacy/js/common/field_selector_dialog.js", "/web_studio/static/src/legacy/js/common/new_field_dialog.js", "/web_studio/static/src/legacy/js/common/xml_editor.js", "/web_studio/static/src/legacy/js/reports/report_editor.js", "/web_studio/static/src/legacy/js/reports/report_editor_fields.js", "/web_studio/static/src/legacy/js/reports/report_editor_manager.js", "/web_studio/static/src/legacy/js/reports/report_editor_sidebar.js", "/web_studio/static/src/legacy/js/reports/report_kanban_view.js", "/web_studio/static/src/legacy/js/reports/sidebar_components/abstract_report_component.js", "/web_studio/static/src/legacy/js/reports/sidebar_components/edit_components.js", "/web_studio/static/src/legacy/js/reports/sidebar_components/edit_components_registry.js", "/web_studio/static/src/legacy/js/reports/sidebar_components/report_building_blocks.js", "/web_studio/static/src/legacy/js/reports/sidebar_components/report_building_blocks_registry.js", "/web_studio/static/src/legacy/js/views/abstract_view.js", "/web_studio/static/src/legacy/js/views/action_editor.js", "/web_studio/static/src/legacy/js/views/action_editor_sidebar.js", "/web_studio/static/src/legacy/js/views/action_editor_view.js", "/web_studio/static/src/legacy/js/views/view_components.js", "/web_studio/static/src/legacy/js/views/view_editor_manager.js", "/web_studio/static/src/legacy/js/views/view_editor_sidebar.js", "/web_studio/static/src/legacy/js/views/renderers/search_renderer.js", "/web_studio/static/src/legacy/js/views/renderers/list_renderer_lazy.js", "/web_studio/static/src/legacy/js/views/view_editors/calendar_editor.js", "/web_studio/static/src/legacy/js/views/view_editors/editor_mixin.js", "/web_studio/static/src/legacy/js/views/view_editors/editor_mixin_owl.js", "/web_studio/static/src/legacy/js/views/view_editors/fields.js", "/web_studio/static/src/legacy/js/views/view_editors/form_editor.js", "/web_studio/static/src/legacy/js/views/view_editors/form_editor_hook.js", "/web_studio/static/src/legacy/js/views/view_editors/kanban_editor.js", "/web_studio/static/src/legacy/js/views/view_editors/kanban_record_editor.js", "/web_studio/static/src/legacy/js/views/view_editors/list_editor.js", "/web_studio/static/src/legacy/js/views/view_editors/new_buttonbox_dialog.js", "/web_studio/static/src/legacy/js/views/view_editors/search_editor.js"], "mappingszxtMA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChprplPA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC/FA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClEA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACdA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC/EA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC7EA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClaA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC/DA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACzbrrteA;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnlnxlphkphh6BA;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvzjHA;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrxtpxIA;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdvxBA;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxbtblsourcesContent": ["/** @odoo-module **/\nimport { useAutofocus } from \"@web/core/utils/hooks\";\nimport { ComponentAdapter, ComponentWrapper, WidgetAdapterMixin } from \"web.OwlCompatibility\";\nimport Widget from \"web.Widget\";\nimport { COLORS, BG_COLORS, ICONS } from \"@web_studio/utils\";\nimport { FieldMany2One } from \"web.relational_fields\";\nimport StandaloneFieldManagerMixin from \"web.StandaloneFieldManagerMixin\";\nimport { ModelConfigurator } from \"web_studio.ModelConfigurator\";\nimport { IconCreator } from \"../icon_creator/icon_creator\";\n\nconst { Component, hooks, useState } = owl;\nconst { useExternalListener } = hooks;\n\nclass ModelSelector extends ComponentAdapter {\n    constructor(parent, props) {\n        Object.assign(props, { Component: FieldMany2One });\n        super(parent, props);\n    }\n    updateWidget(nextProps) {}\n    renderWidget() {}\n}\n\nexport const AppCreatorWrapper = Widget.extend(StandaloneFieldManagerMixin, WidgetAdapterMixin, {\n    target: \"fullscreen\",\n    /**\n     * This widget is directly bound to its inner owl component and its sole purpose\n     * is to instanciate it with the adequate properties: it will manually\n     * mount the component when attached to the dom, will dismount it when detached\n     * and destroy it when destroyed itself.\n     * @constructor\n     */\n    init() {\n        this._super(...arguments);\n        StandaloneFieldManagerMixin.init.call(this);\n        this.appCreatorComponent = new ComponentWrapper(this, AppCreator, {\n            model: this.model,\n        });\n    },\n\n    async start() {\n        this.$el.css(\"height\", \"100%\");\n        this.$el.css(\"overflow\", \"auto\");\n        await this._super(...arguments);\n        return this.appCreatorComponent.mount(this.el);\n    },\n\n    destroy() {\n        WidgetAdapterMixin.destroy.call(this);\n        this._super();\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Overriden to register widgets on the fly since they have been instanciated\n     * by the Component.\n     * @override\n     */\n    _onFieldChanged(ev) {\n        const targetWidget = ev.data.__targetWidget;\n        this._registerWidget(ev.data.dataPointID, targetWidget.name, targetWidget);\n        StandaloneFieldManagerMixin._onFieldChanged.apply(this, arguments);\n    },\n});\n\n/**\n * App creator\n *\n * Action handling the complete creation of a new app. It requires the user\n * to enter an app name, to customize the app icon (@see IconCreator) and\n * to finally enter a menu name, with the option to bind the default app\n * model to an existing one.\n *\n * TODO: this component is bound to an action adapter since the action manager\n * cannot yet handle owl component. This file must be reviewed as soon as\n * the action manager is updated.\n * @extends Component\n */\nclass AppCreator extends Component {\n    constructor() {\n        super(...arguments);\n        // TODO: Many2one component directly attached in XML. For now we have\n        // to toggle it manually according to the state changes.\n        this.state = useState({\n            step: \"welcome\",\n            appName: \"\",\n            menuName: \"\",\n            modelChoice: \"new\",\n            modelOptions: [],\n            modelId: false,\n            iconData: {\n                backgroundColor: BG_COLORS[5],\n                color: COLORS[4],\n                iconClass: ICONS[0],\n                type: \"custom_icon\",\n            },\n        });\n        this.debug = Boolean(AppCreator.env.isDebug());\n\n        useAutofocus();\n        this.invalid = useState({\n            appName: false,\n            menuName: false,\n            modelId: false,\n        });\n        useExternalListener(window, \"keydown\", this._onKeydown);\n    }\n\n    async willStart() {\n        const recordId = await this.props.model.makeRecord(\"ir.actions.act_window\", [\n            {\n                name: \"model\",\n                relation: \"ir.model\",\n                type: \"many2one\",\n                domain: [\n                    [\"transient\", \"=\", false],\n                    [\"abstract\", \"=\", false],\n                ],\n            },\n        ]);\n        this.record = this.props.model.get(recordId);\n    }\n\n    //--------------------------------------------------------------------------\n    // Getters\n    //--------------------------------------------------------------------------\n\n    /**\n     * @returns {boolean}\n     */\n    get isReady() {\n        return (\n            this.state.step === \"welcome\" ||\n            (this.state.step === \"app\" && this.state.appName) ||\n            (this.state.step === \"model\" &&\n                this.state.menuName &&\n                (this.state.modelChoice === \"new\" ||\n                    (this.state.modelChoice === \"existing\" && this.state.modelId)))\n        );\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Switch the current step and clean all invalid keys.\n     * @private\n     * @param {string} step\n     */\n    _changeStep(step) {\n        this.state.step = step;\n        for (const key in this.invalid) {\n            this.invalid[key] = false;\n        }\n    }\n\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    async _createNewApp() {\n        this.env.services.ui.block();\n        const iconValue =\n            this.state.iconData.type === \"custom_icon\"\n                ? // custom icon data\n                  [\n                      this.state.iconData.iconClass,\n                      this.state.iconData.color,\n                      this.state.iconData.backgroundColor,\n                  ]\n                : // attachment\n                  this.state.iconData.uploaded_attachment_id;\n\n        try {\n            const result = await this.rpc({\n                route: \"/web_studio/create_new_app\",\n                params: {\n                    app_name: this.state.appName,\n                    menu_name: this.state.menuName,\n                    model_choice: this.state.modelChoice,\n                    model_id: this.state.modelChoice && this.state.modelId,\n                    model_options: this.state.modelOptions,\n                    icon: iconValue,\n                    context: this.env.session.user_context,\n                },\n            });\n            this.trigger(\"new-app-created\", result);\n        } catch (error) {\n            if (!error || !(error instanceof Error)) {\n                this._onPrevious();\n            } else {\n                throw error;\n            }\n        } finally {\n            this.env.services.ui.unblock();\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onChecked(ev) {\n        const modelChoice = ev.currentTarget.value;\n        this.state.modelChoice = modelChoice;\n        if (this.state.modelChoice === \"new\") {\n            this.state.modelId = undefined;\n        }\n    }\n\n    /**\n     * @private\n     * @param {OwlEvent} ev\n     */\n    _onModelIdChanged(ev) {\n        if (this.state.modelChoice === \"existing\") {\n            this.state.modelId = ev.detail.changes.model.id;\n            this.invalid.modelId = isNaN(this.state.modelId);\n        } else {\n            this.state.modelId = false;\n            this.invalid.modelId = false;\n        }\n    }\n\n    /**\n     * @private\n     * @param {OwlEvent} ev\n     */\n    _onIconChanged(ev) {\n        for (const key in this.state.iconData) {\n            delete this.state.iconData[key];\n        }\n        Object.assign(this.state.iconData, ev.detail);\n    }\n\n    /**\n     * @private\n     * @param {InputEvent} ev\n     */\n    _onInput(ev) {\n        const input = ev.currentTarget;\n        if (this.invalid[input.id]) {\n            this.invalid[input.id] = !input.value;\n        }\n        this.state[input.id] = input.value;\n    }\n\n    /**\n     * @private\n     * @param {KeyboardEvent} ev\n     */\n    _onKeydown(ev) {\n        if (\n            ev.key === \"Enter\" &&\n            !(\n                ev.target.classList &&\n                ev.target.classList.contains(\"o_web_studio_app_creator_previous\")\n            )\n        ) {\n            ev.preventDefault();\n            this._onNext();\n        }\n    }\n\n    /**\n     * Handle the confirmation of options in the modelconfigurator\n     * @param {OwlEvent} ev\n     */\n    _onConfirmOptions(ev) {\n        const options = ev.detail;\n        this.state.modelOptions = Object.entries(options)\n            .filter((opt) => opt[1].value)\n            .map((opt) => opt[0]);\n        return this._onNext();\n    }\n\n    /**\n     * @private\n     */\n    async _onNext() {\n        switch (this.state.step) {\n            case \"welcome\":\n                this._changeStep(\"app\");\n                break;\n            case \"app\":\n                if (!this.state.appName) {\n                    this.invalid.appName = true;\n                } else {\n                    this._changeStep(\"model\");\n                }\n                break;\n            case \"model\":\n                if (!this.state.menuName) {\n                    this.invalid.menuName = true;\n                }\n                if (this.state.modelChoice === \"existing\" && !this.state.modelId) {\n                    this.invalid.modelId = true;\n                } else if (this.state.modelChoice === \"new\") {\n                    this.invalid.modelId = false;\n                }\n                const isValid = Object.values(this.invalid).reduce(\n                    (valid, key) => valid && !key,\n                    true\n                );\n                if (isValid) {\n                    if (this.state.modelChoice === \"new\") {\n                        this._changeStep(\"model_configuration\");\n                    } else {\n                        this._createNewApp();\n                    }\n                }\n                break;\n            case \"model_configuration\":\n                // no validation for this step, every configuration is valid\n                this._createNewApp();\n                break;\n        }\n    }\n\n    /**\n     * @private\n     */\n    _onPrevious() {\n        switch (this.state.step) {\n            case \"app\":\n                this._changeStep(\"welcome\");\n                break;\n            case \"model\":\n                this._changeStep(\"app\");\n                break;\n            case \"model_configuration\":\n                this._changeStep(\"model\");\n                break;\n        }\n    }\n}\n\nAppCreator.components = { ModelSelector, IconCreator, ModelConfigurator };\nAppCreator.props = {\n    model: Object,\n};\nAppCreator.template = \"web_studio.AppCreator\";\n", "/** @odoo-module **/\n\nimport { StudioActionContainer } from \"../studio_action_container\";\nimport { actionService } from \"@web/webclient/actions/action_service\";\nimport { useBus, useService } from \"@web/core/utils/hooks\";\nimport { registry } from \"@web/core/registry\";\n\nimport { EditorMenu } from \"./editor_menu/editor_menu\";\n\nimport { mapDoActionOptionAPI } from \"@web/legacy/backend_utils\";\n\nconst { Component, core, hooks } = owl;\n\nconst editorTabRegistry = registry.category(\"web_studio.editor_tabs\");\n\nconst actionServiceStudio = {\n    dependencies: [\"studio\"],\n    start(env) {\n        const action = actionService.start(env);\n        const _doAction = action.doAction;\n\n        async function doAction(actionRequest, options) {\n            if (actionRequest === \"web_studio.action_edit_report\") {\n                return env.services.studio.setParams({\n                    editedReport: options.report,\n                });\n            }\n            return _doAction(...arguments);\n        }\n\n        return Object.assign(action, { doAction });\n    },\n};\n\nexport class Editor extends Component {\n    setup() {\n        this.studio = useService(\"studio\");\n\n        hooks.useSubEnv({\n            bus: new core.EventBus(),\n        });\n        this.env.services = Object.assign({}, this.env.services);\n        this.env.services.router = {\n            current: { hash: {} },\n            pushState() {},\n        };\n        // Assuming synchronousness\n        this.env.services.action = actionServiceStudio.start(this.env);\n        this.actionService = useService(\"action\");\n\n        useBus(this.studio.bus, \"UPDATE\", async () => {\n            const action = await this.getStudioAction();\n            this.actionService.doAction(action, {\n                clearBreadcrumbs: true,\n            });\n        });\n    }\n\n    async willStart() {\n        this.initialAction = await this.getStudioAction();\n    }\n\n    switchView(ev) {\n        const { viewType } = ev.detail;\n        this.studio.setParams({ viewType, editorTab: \"views\" });\n    }\n    switchViewLegacy(ev) {\n        this.studio.setParams({ viewType: ev.detail.view_type });\n    }\n\n    onSwitchTab(ev) {\n        this.studio.setParams({ editorTab: ev.detail.tab });\n    }\n\n    async getStudioAction() {\n        const { editorTab, editedAction, editedReport } = this.studio;\n        const tab = editorTabRegistry.get(editorTab);\n        if (tab.action) {\n            return tab.action;\n        } else if (editorTab === \"reports\" && editedReport) {\n            return \"web_studio.report_editor\";\n        } else {\n            return this.rpc(\"/web_studio/get_studio_action\", {\n                action_name: editorTab,\n                model: editedAction.res_model,\n                view_id: editedAction.view_id && editedAction.view_id[0], // Not sure it is correct or desirable\n            });\n        }\n    }\n\n    onDoAction(ev) {\n        // @legacy;\n        const payload = ev.detail;\n        const legacyOptions = mapDoActionOptionAPI(payload.options);\n        this.actionService.doAction(\n            payload.action,\n            Object.assign(legacyOptions || {}, { clearBreadcrumbs: true })\n        );\n    }\n}\nEditor.template = \"web_studio.Editor\";\nEditor.components = {\n    EditorMenu,\n    StudioActionContainer,\n};\n", "/** @odoo-module **/\nimport { ComponentAdapter } from \"web.OwlCompatibility\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { registry } from \"@web/core/registry\";\nimport { NewViewDialog } from \"@web_studio/client_action/editor/new_view_dialogs/new_view_dialog\";\nimport { MapNewViewDialog } from \"@web_studio/client_action/editor/new_view_dialogs/map_new_view_dialog\";\nimport { ConfirmationDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\nimport ActionEditor from \"web_studio.ActionEditor\";\nimport { ActionEditorMain } from \"../../legacy/action_editor_main\";\nimport { AlertDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\n\nconst { Component } = owl;\n\nexport class EditorAdapter extends ComponentAdapter {\n    constructor(parent, props) {\n        // force dummy Component not to crash\n        props.Component = owl.Component;\n        super(...arguments);\n    }\n\n    setup() {\n        super.setup();\n        this.studio = useService(\"studio\");\n\n        if (this.studio.editedViewType) {\n            this.props.Component = ActionEditorMain;\n        } else {\n            this.props.Component = ActionEditor;\n        }\n\n        this.dialog = useService(\"dialog\");\n        this.user = useService(\"user\");\n        this.dialog = useService(\"dialog\");\n        this.viewService = useService(\"view\");\n        this.rpc = useService(\"rpc\");\n        this.env = Component.env; // use the legacy env\n    }\n\n    _trigger_up(ev) {\n        const { name, data } = ev;\n        if (name === \"studio_new_view\") {\n            return this._onNewView(data);\n        }\n        if (name === \"studio_disable_view\") {\n            return this._onDisableView(data);\n        }\n        if (name === \"studio_default_view\") {\n            return this._onSetDefaultView(data);\n        }\n        if (name === \"studio_restore_default_view\") {\n            return this._onRestoreDefaultView(data);\n        }\n        if (name === \"studio_edit_action\") {\n            return this._onEditAction(data);\n        }\n        return super._trigger_up(...arguments);\n    }\n\n    async _onNewView(data) {\n        const viewType = data.view_type;\n        const activityAllowed = await this.rpc(\"/web_studio/activity_allowed\", {\n            model: this.studio.editedAction.res_model,\n        });\n        if (viewType === \"activity\" && !activityAllowed) {\n            this.env.services.notification.notify({\n                title: false,\n                type: \"danger\",\n                message: this.env._t(\"Activity view unavailable on this model\"),\n            });\n            return;\n        }\n\n        const viewMode = this.studio.editedAction.view_mode + \",\" + viewType;\n        const viewAdded = await this.addViewType(this.studio.editedAction, viewType, {\n            view_mode: viewMode,\n        });\n        if (viewAdded) {\n            return this.studio.reload({ viewType });\n        }\n    }\n\n    /**\n     * @private\n     * @param {Object} action\n     * @param {String} view_type\n     * @param {Object} args\n     * @returns {Promise}\n     */\n    async addViewType(action, viewType, args) {\n        let viewAdded = await this.rpc(\"/web_studio/add_view_type\", {\n            action_type: action.type,\n            action_id: action.id,\n            res_model: action.res_model,\n            view_type: viewType,\n            args: args,\n            context: this.user.context,\n        });\n\n        if (viewAdded !== true) {\n            viewAdded = new Promise((resolve) => {\n                let DialogClass;\n                let dialogProps = {\n                    confirm: async () => {\n                        await this.editAction(action, args);\n                        resolve(true);\n                    },\n                    cancel: () => resolve(false),\n                };\n                if ([\"gantt\", \"calendar\", \"cohort\"].includes(viewType)) {\n                    DialogClass = NewViewDialog;\n                    dialogProps.viewType = viewType;\n                } else if (viewType === \"map\") {\n                    DialogClass = MapNewViewDialog;\n                } else {\n                    this.dialog.add(AlertDialog, {\n                        body: this.env._lt(\n                            \"Creating this type of view is not currently supported in Studio.\"\n                        ),\n                    });\n                    resolve(false);\n                }\n                this.dialog.add(DialogClass, dialogProps);\n            });\n        }\n        return viewAdded;\n    }\n\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    async _onEditAction(data) {\n        const args = data.args;\n        if (!args) {\n            return;\n        }\n        await this.editAction(this.studio.editedAction, args);\n        this.studio.reload();\n    }\n\n    /**\n     * @private\n     * @param {Object} action\n     * @param {Object} args\n     * @returns {Promise}\n     */\n    async editAction(action, args) {\n        this.env.bus.trigger(\"clear_cache\");\n        const result = await this.rpc(\"/web_studio/edit_action\", {\n            action_type: action.type,\n            action_id: action.id,\n            args: args,\n            context: this.user.context,\n        });\n        if (result !== true) {\n            this.dialog.add(AlertDialog, {\n                body: result,\n            });\n        }\n    }\n\n    /**\n     * @private\n     * @param {String} view_mode\n     * @returns {Promise}\n     */\n    async _writeViewMode(viewMode) {\n        await this.editAction(this.studio.editedAction, { view_mode: viewMode });\n        this.studio.reload({ viewType: null });\n    }\n\n    _onDisableView(data) {\n        const viewType = data.view_type;\n        const viewMode = this.studio.editedAction.view_mode\n            .split(\",\")\n            .filter((m) => m !== viewType);\n\n        if (!viewMode.length) {\n            this.dialog.add(AlertDialog, {\n                body: this.env._t(\"You cannot deactivate this view as it is the last one active.\"),\n            });\n        } else {\n            this._writeViewMode(viewMode.toString());\n        }\n    }\n\n    _onSetDefaultView(data) {\n        const viewType = data.view_type;\n        const actionViewModes = this.studio.editedAction.view_mode.split(\",\");\n\n        const viewMode = actionViewModes.filter((vt) => vt !== viewType);\n        viewMode.unshift(viewType);\n\n        return this._writeViewMode(viewMode.toString());\n    }\n\n    _onRestoreDefaultView(data) {\n        const message = this.env._t(\n            \"Are you sure you want to restore the default view?\\r\\nAll customization done with studio on this view will be lost.\"\n        );\n        const { context, views, res_model } = this.studio.editedAction;\n        const viewType = data.view_type;\n\n        const confirm = async () => {\n            const newContext = Object.assign({}, context, {\n                studio: true,\n                lang: false,\n            });\n            this.env.bus.trigger(\"clear_cache\");\n            // To restore the default view from an inherited one, we need first to retrieve the default view id\n            const fieldsView = await this.viewService.loadViews(\n                {\n                    resModel: res_model,\n                    views,\n                    context: newContext,\n                },\n                { loadIrFilters: true }\n            );\n\n            return this.rpc(\"/web_studio/restore_default_view\", {\n                view_id: fieldsView[viewType].viewId,\n            });\n        };\n\n        this.dialog.add(ConfirmationDialog, {\n            body: message,\n            confirm,\n        });\n    }\n\n    get widgetArgs() {\n        const { editedAction, editedViewType, editedControllerState, x2mEditorPath } = this.studio;\n        if (this.props.Component === ActionEditor) {\n            return [editedAction];\n        } else {\n            return [\n                {\n                    action: editedAction,\n                    viewType: editedViewType,\n                    controllerState: editedControllerState,\n                    x2mEditorPath: x2mEditorPath,\n                },\n            ];\n        }\n    }\n}\n\nregistry.category(\"actions\").add(\"web_studio.action_editor\", EditorAdapter);\n", "/** @odoo-module */\n\nimport { useBus, useService } from \"@web/core/utils/hooks\";\nimport { _lt } from \"@web/core/l10n/translation\";\nimport { sprintf } from \"@web/core/utils/strings\";\nimport { localization } from \"@web/core/l10n/localization\";\nimport { registry } from \"@web/core/registry\";\n\nconst editorTabRegistry = registry.category(\"web_studio.editor_tabs\");\n\nexport class EditorMenu extends owl.Component {\n    setup() {\n        this.l10n = localization;\n        this.studio = useService(\"studio\");\n        this.rpc = useService(\"rpc\");\n\n        useBus(this.studio.bus, \"UPDATE\", async () => {\n            await this.render();\n            toggleSnackBar(\"off\");\n        });\n\n        const toggleUndo = (display) => {\n            const el = this.el.querySelector(\".o_web_studio_undo\");\n            if (el) {\n                el.classList.toggle(\"o_web_studio_active\", display);\n            }\n        };\n        const toggleRedo = (display) => {\n            const el = this.el.querySelector(\".o_web_studio_redo\");\n            if (el) {\n                el.classList.toggle(\"o_web_studio_active\", display);\n            }\n        };\n\n        useBus(this.studio.bus, \"undo_available\", () => toggleUndo(true));\n        useBus(this.studio.bus, \"undo_not_available\", () => toggleUndo(false));\n        useBus(this.studio.bus, \"redo_available\", () => toggleRedo(true));\n        useBus(this.studio.bus, \"redo_not_available\", () => toggleRedo(false));\n\n        const toggleSnackBar = (type) => {\n            const snackBarIcon = this.el.querySelector(\".o_web_studio_snackbar_icon\");\n            const snackBarText = this.el.querySelector(\".o_web_studio_snackbar_text\");\n            switch (type) {\n                case \"saved\":\n                    snackBarIcon.classList.remove(\"fa-circle-o-notch\", \"fa-spin\");\n                    snackBarIcon.classList.add(\"show\", \"fa\", \"fa-check\");\n                    snackBarText.textContent = this.env._t(\"Saved\");\n                    break;\n                case \"saving\":\n                    snackBarIcon.classList.add(\"show\", \"fa\", \"fa-circle-o-notch\", \"fa-spin\");\n                    snackBarText.textContent = this.env._t(\"Saving\");\n                    break;\n                case \"off\":\n                    snackBarIcon.classList.remove(\n                        \"fa-circle-o-notch\",\n                        \"fa-spin\",\n                        \"show\",\n                        \"fa-check\"\n                    );\n                    snackBarText.textContent = \"\";\n                    break;\n            }\n        };\n\n        useBus(this.studio.bus, \"toggle_snack_bar\", toggleSnackBar);\n    }\n\n    get breadcrumbs() {\n        const { editorTab } = this.studio;\n        const currentTab = this.editorTabs.find((tab) => tab.id === editorTab);\n        const crumbs = [\n            {\n                name: currentTab.name,\n                handler: () => this.openTab(currentTab.id),\n            },\n        ];\n        if (currentTab.id === \"views\") {\n            const { editedViewType, x2mEditorPath } = this.studio;\n            if (editedViewType) {\n                const currentViewType = this.constructor.viewTypes.find(\n                    (vt) => vt.type === editedViewType\n                );\n                crumbs.push({\n                    name: currentViewType.title,\n                    handler: () =>\n                        this.studio.setParams({\n                            x2mEditorPath: [],\n                        }),\n                });\n            }\n            x2mEditorPath.forEach(({ x2mViewType }, index) => {\n                const viewType = this.constructor.viewTypes.find((vt) => vt.type === x2mViewType);\n                crumbs.push({\n                    name: sprintf(\n                        this.env._t(\"Subview %s\"),\n                        (viewType && viewType.title) || this.env._t(\"Other\")\n                    ),\n                    handler: () =>\n                        this.studio.setParams({\n                            x2mEditorPath: x2mEditorPath.slice(0, index + 1),\n                        }),\n                });\n            });\n        } else if (currentTab.id === \"reports\" && this.studio.editedReport) {\n            crumbs.push({\n                name: this.studio.editedReport.data.name,\n                handler: () => this.studio.setParams({}),\n            });\n        }\n        return crumbs;\n    }\n\n    get activeViews() {\n        const action = this.studio.editedAction;\n        const viewTypes = (action._views || action.views).map(([id, type]) => type);\n        return this.constructor.viewTypes.filter((vt) => viewTypes.includes(vt.type));\n    }\n\n    get editorTabs() {\n        const entries = editorTabRegistry.getEntries();\n        return entries.map((entry) => Object.assign({}, entry[1], { id: entry[0] }));\n    }\n\n    openTab(tab) {\n        this.trigger(\"switch-tab\", { tab });\n    }\n}\nEditorMenu.template = \"web_studio.EditorMenu\";\nEditorMenu.viewTypes = [\n    {\n        title: _lt(\"Form\"),\n        type: \"form\",\n        faclass: \"fa-address-card\",\n    },\n    {\n        title: _lt(\"List\"),\n        type: \"list\",\n        faclass: \"fa-list-ul\",\n    },\n    {\n        title: _lt(\"Kanban\"),\n        type: \"kanban\",\n        faclass: \"fa-th-large\",\n    },\n    {\n        title: _lt(\"Map\"),\n        type: \"map\",\n        faclass: \"fa-map-marker\",\n    },\n    {\n        title: _lt(\"Calendar\"),\n        type: \"calendar\",\n        faclass: \"fa-calendar-o\",\n    },\n    {\n        title: _lt(\"Graph\"),\n        type: \"graph\",\n        faclass: \"fa-bar-chart\",\n    },\n    {\n        title: _lt(\"Pivot\"),\n        type: \"pivot\",\n        faclass: \"fa-table\",\n    },\n    {\n        title: _lt(\"Gantt\"),\n        type: \"gantt\",\n        faclass: \"fa-tasks\",\n    },\n    {\n        title: _lt(\"Dashboard\"),\n        type: \"dashboard\",\n        faclass: \"fa-tachometer\",\n    },\n    {\n        title: _lt(\"Cohort\"),\n        type: \"cohort\",\n        faclass: \"fa-signal\",\n    },\n    {\n        title: _lt(\"Activity\"),\n        type: \"activity\",\n        faclass: \"fa-th\",\n    },\n    {\n        title: _lt(\"Search\"),\n        type: \"search\",\n        faclass: \"fa-search\",\n    },\n];\n\neditorTabRegistry\n    .add(\"views\", { name: _lt(\"Views\"), action: \"web_studio.action_editor\" })\n    .add(\"reports\", { name: _lt(\"Reports\") })\n    .add(\"translations\", { name: _lt(\"Translations\") })\n    .add(\"automations\", { name: _lt(\"Automations\") })\n    .add(\"acl\", { name: _lt(\"Access Control\") })\n    .add(\"filters\", { name: _lt(\"Filter Rules\") });\n", "/** @odoo-module */\nimport { NewViewDialog } from \"@web_studio/client_action/editor/new_view_dialogs/new_view_dialog\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { AlertDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\n\nexport class MapNewViewDialog extends NewViewDialog {\n    setup() {\n        super.setup();\n        this.dialog = useService(\"dialog\");\n        this.bodyTemplate = \"web_studio.MapNewViewFieldsSelector\";\n    }\n\n    get viewType() {\n        return \"map\";\n    }\n\n    computeSpecificFields(fields) {\n        this.partnerFields = fields.filter(\n            (field) => field.type === \"many2one\" && field.relation === \"res.partner\"\n        );\n        if (!this.partnerFields.length) {\n            this.dialog.add(AlertDialog, {\n                body: this.env._t(\"Contact Field Required\"),\n                contentClass: \"o_web_studio_preserve_space\",\n            });\n            this.close();\n        }\n    }\n}\nMapNewViewDialog.props = Object.assign(Object.create(NewViewDialog.props), {\n    viewType: { type: String, optional: true },\n});\n", "/** @odoo-module */\n\nimport { useService } from \"@web/core/utils/hooks\";\nimport { sprintf } from \"@web/core/utils/strings\";\nimport { ConfirmationDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\n\nexport class NewViewDialog extends ConfirmationDialog {\n    setup() {\n        super.setup();\n        this.orm = useService(\"orm\");\n        this.rpc = useService(\"rpc\");\n        this.studio = useService(\"studio\");\n        this.user = useService(\"user\");\n        this.mandatoryStopDate = [\"gantt\", \"cohort\"].includes(this.viewType);\n\n        this.title = sprintf(this.env._t(\"Generate %s View\"), this.viewType);\n\n        this.fieldsChoice = {\n            date_start: null,\n            date_stop: null,\n        };\n    }\n\n    get viewType() {\n        return this.props.viewType;\n    }\n\n    async willStart() {\n        const fieldsGet = await this.orm.call(this.studio.editedAction.res_model, \"fields_get\");\n        const fields = Object.entries(fieldsGet).map(([fName, field]) => {\n            field.name = fName;\n            return field;\n        });\n        fields.sort((first, second) => {\n            if (first.string === second.string) {\n                return 0;\n            }\n            if (first.string < second.string) {\n                return -1;\n            }\n            if (first.string > second.string) {\n                return 1;\n            }\n        });\n        this.computeSpecificFields(fields);\n        return super.willStart();\n    }\n\n    /**\n     * Compute date, row and measure fields.\n     */\n    computeSpecificFields(fields) {\n        this.dateFields = [];\n        this.rowFields = [];\n        this.measureFields = [];\n        fields.forEach((field) => {\n            if (field.store) {\n                // date fields\n                if (field.type === \"date\" || field.type === \"datetime\") {\n                    this.dateFields.push(field);\n                }\n                // row fields\n                if (this.constructor.GROUPABLE_TYPES.includes(field.type)) {\n                    this.rowFields.push(field);\n                }\n                // measure fields\n                if (this.constructor.MEASURABLE_TYPES.includes(field.type)) {\n                    // id and sequence are not measurable\n                    if (field.name !== \"id\" && field.name !== \"sequence\") {\n                        this.measureFields.push(field);\n                    }\n                }\n            }\n        });\n        if (this.dateFields.length) {\n            this.fieldsChoice.date_start = this.dateFields[0].name;\n            this.fieldsChoice.date_stop = this.dateFields[0].name;\n        }\n    }\n\n    async _confirm() {\n        await this.rpc(\"/web_studio/create_default_view\", {\n            model: this.studio.editedAction.res_model,\n            view_type: this.viewType,\n            attrs: this.fieldsChoice,\n            context: this.user.context,\n        });\n        super._confirm();\n    }\n}\nNewViewDialog.bodyTemplate = \"web_studio.NewViewFieldsSelector\";\nNewViewDialog.footerTemplate = \"web_studio.OwlNewViewDialogFooter\";\nNewViewDialog.GROUPABLE_TYPES = [\"many2one\", \"char\", \"boolean\", \"selection\", \"date\", \"datetime\"];\nNewViewDialog.MEASURABLE_TYPES = [\"integer\", \"float\"];\nNewViewDialog.size = \"modal-md\";\nNewViewDialog.props = Object.assign(Object.create(ConfirmationDialog.props), {\n    viewType: String,\n    title: { type: String, optional: true },\n    body: { type: String, optional: true },\n});\n", "/** @odoo-module **/\nimport { ComponentAdapter } from \"web.OwlCompatibility\";\nimport ReportEditorManager from \"web_studio.ReportEditorManager\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { registry } from \"@web/core/registry\";\n\nclass ReportEditorAdapter extends ComponentAdapter {\n    constructor(parent, props) {\n        props.Component = ReportEditorManager;\n        super(...arguments);\n        this.actionService = useService(\"action\");\n        this.user = useService(\"user\");\n        this.rpc = useService(\"rpc\");\n        this.orm = useService(\"orm\");\n        this.studio = useService(\"studio\");\n        this.reportEnv = {};\n        this.env = owl.Component.env;\n    }\n\n    get handle() {\n        return this.studio.editedReport;\n    }\n\n    async willStart() {\n        const proms = [];\n        await this._readReport();\n        await this._loadEnvironment();\n        proms.push(this._readModels());\n        proms.push(this._readWidgetsOptions());\n        proms.push(this._getReportViews());\n        proms.push(this._readPaperFormat());\n        await Promise.all(proms);\n        return super.willStart();\n    }\n\n    get widgetArgs() {\n        return [\n            {\n                env: this.reportEnv,\n                //initialState: state,\n                models: this.models,\n                paperFormat: this.paperFormat,\n                report: this.report,\n                reportHTML: this.reportViews.report_html,\n                reportMainViewID: this.reportViews.main_view_id,\n                reportViews: this.reportViews.views,\n                widgetsOptions: this.widgetsOptions,\n            },\n        ];\n    }\n\n    /**\n     * Load and set the report environment.\n     *\n     * If the report is associated to the same model as the Studio action, the\n     * action ids will be used ; otherwise a search on the report model will be\n     * performed.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    async _loadEnvironment() {\n        this.reportEnv.modelName = this.report.model;\n\n        // TODO: Since 13.0, journal entries are also considered as 'account.move',\n        // therefore must filter result to remove them; otherwise not possible\n        // to print invoices and hard to lookup for them if lot of journal entries.\n        let domain = [];\n        if (this.report.model === \"account.move\") {\n            domain = [[\"move_type\", \"!=\", \"entry\"]];\n        }\n\n        const result = await this.orm.search(\n            this.report.model,\n            domain,\n            undefined,\n            this.user.context\n        );\n        this.reportEnv.ids = result;\n        this.reportEnv.currentId = this.reportEnv.ids && this.reportEnv.ids[0];\n    }\n    /**\n     * Read the models (ir.model) name and model to display them in a\n     * user-friendly way in the sidebar (see AbstractReportComponent).\n     *\n     * @private\n     * @returns {Promise}\n     */\n    async _readModels() {\n        const models = await this.orm.searchRead(\n            \"ir.model\",\n            [\n                [\"transient\", \"=\", false],\n                [\"abstract\", \"=\", false],\n            ],\n            [\"name\", \"model\"],\n            undefined,\n            this.user.context\n        );\n        this.models = {};\n        models.forEach((model) => {\n            this.models[model.model] = model.name;\n        });\n    }\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    async _readReport() {\n        const result = await this.orm.read(\n            \"ir.actions.report\",\n            [this.handle.res_id],\n            undefined,\n            this.user.context\n        );\n        this.report = result[0];\n    }\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    async _readPaperFormat() {\n        this.paperFormat = \"A4\";\n        const result = await this.rpc(\"/web_studio/read_paperformat\", {\n            report_id: this.handle.res_id,\n            context: this.user.context,\n        });\n        this.paperFormat = result[0];\n    }\n    /**\n     * Load the widgets options for t-options directive in sidebar.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    async _readWidgetsOptions() {\n        this.widgetsOptions = await this.rpc(\"/web_studio/get_widgets_available_options\", {\n            context: this.user.context,\n        });\n    }\n    /**\n     * @private\n     * @returns {Promise<Object>}\n     */\n    async _getReportViews() {\n        // SAD: FIXME calling this when there are no record for the model crashes (no currentId)\n        // used to show a danger notification\n        this.reportViews = await this.rpc(\"/web_studio/get_report_views\", {\n            record_id: this.reportEnv.currentId,\n            report_name: this.report.report_name,\n        });\n    }\n\n    _trigger_up(ev) {\n        switch (ev.name) {\n            case \"studio_edit_report\":\n                this._editReport(ev.data);\n                break;\n            case \"open_record_form_view\":\n                this.actionService.doAction(\n                    {\n                        type: \"ir.actions.act_window\",\n                        res_model: \"ir.actions.report\",\n                        res_id: this.handle.res_id,\n                        views: [[false, \"form\"]],\n                        target: \"current\",\n                    },\n                    { clearBreadcrumbs: true }\n                );\n                break;\n        }\n        super._trigger_up(...arguments);\n    }\n\n    /**\n     * @private\n     * @param {Object} values\n     * @returns {Promise}\n     */\n    async _editReport(values) {\n        const result = await this.rpc(\"/web_studio/edit_report\", {\n            report_id: this.report.id,\n            values: values,\n            context: this.user.context,\n        });\n        this.report = result[0];\n        this.render();\n    }\n}\n\n// We need this to wrap in a div\n// ViewEditor doesn't need this because it extends AbstractEditor, and defines a template\nexport class ReportEditor extends owl.Component {}\nReportEditor.template = owl.tags\n    .xml`<div class=\"o_web_studio_client_action\"><ReportEditorAdapter /></div>`;\nReportEditor.components = { ReportEditorAdapter };\nregistry.category(\"actions\").add(\"web_studio.report_editor\", ReportEditor);\n", "/** @odoo-module **/\nimport { COLORS, BG_COLORS, ICONS } from \"@web_studio/utils\";\nimport { FileInput } from \"@web/core/file_input/file_input\";\nimport CustomFileInput from \"web.CustomFileInput\";\nimport { useService } from \"@web/core/utils/hooks\";\n\nconst { Component, hooks } = owl;\nconst { useRef, useState, onWillUpdateProps } = hooks;\n\nconst DEFAULT_ICON = {\n    backgroundColor: BG_COLORS[5],\n    color: COLORS[4],\n    iconClass: ICONS[0],\n};\n\n/**\n * Icon creator\n *\n * Component which purpose is to design an app icon. It can be an uploaded image\n * which will be displayed as is, or an icon customized with the help of presets\n * of colors and icon symbols (@see web_studio.utils for the full list of colors\n * and icon classes).\n * @extends Component\n */\nexport class IconCreator extends Component {\n    /**\n     * @param {Object} [props]\n     * @param {string} [props.backgroundColor] Background color of the custom\n     *      icon.\n     * @param {string} [props.color] Color of the custom icon.\n     * @param {boolean} props.editable\n     * @param {string} [props.iconClass] Font Awesome class of the custom icon.\n     * @param {string} props.type 'base64' (if an actual image) or 'custom_icon'.\n     * @param {number} [props.uploaded_attachment_id] Databse ID of an uploaded\n     *      attachment\n     * @param {string} [props.webIconData] Base64-encoded string representing\n     *      the icon image.\n     */\n    setup() {\n        this.COLORS = COLORS;\n        this.BG_COLORS = BG_COLORS;\n        this.ICONS = ICONS;\n\n        this.iconRef = useRef(\"app-icon\");\n\n        // FIXME: for now, the IconCreator can be spawned in a pure wowl environment (by clicking\n        // on the 'edit' icon of an existing app) and in the legacy environment (through the app\n        // creator)\n        this.FileInput = FileInput;\n        try {\n            const user = useService(\"user\");\n            this.orm = useService(\"orm\");\n            this.userId = user.userId;\n        } catch (e) {\n            if (e.message === \"Service user is not available\") {\n                this.userId = this.env.session.uid;\n                // we are in a legacy environment, so use the legacy CustomFileInput as\n                // the new one requires the new http service\n                this.FileInput = CustomFileInput;\n            }\n        }\n\n        this.show = useState({\n            backgroundColor: false,\n            color: false,\n            iconClass: false,\n        });\n\n        if (this.env.qweb.constructor.enableTransitions) {\n            onWillUpdateProps(async (nextProps) => {\n                if (\"iconClass\" in nextProps && nextProps.iconClass !== this.props.iconClass) {\n                    await new Promise((r) => $(this.iconRef.el).stop().fadeOut(50, r));\n                    this.transition = () => $(this.iconRef.el).stop().fadeIn(800);\n                }\n            });\n        }\n    }\n\n    patched() {\n        if (this.transition) {\n            this.transition();\n            delete this.transition;\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onDesignIconClick() {\n        this.trigger(\n            \"icon-changed\",\n            Object.assign(\n                {\n                    type: \"custom_icon\",\n                },\n                DEFAULT_ICON\n            )\n        );\n    }\n\n    /**\n     * @private\n     * @param {OwlEvent} ev\n     */\n    async _onFileUploaded(ev) {\n        if (!ev.detail.files.length) {\n            // Happens when cancelling upload\n            return;\n        }\n        const file = ev.detail.files[0];\n        let res;\n        if (this.orm) {\n            res = await this.orm.read(\"ir.attachment\", [file.id], [\"datas\"]);\n        } else {\n            res = await this.rpc({\n                model: \"ir.attachment\",\n                method: \"read\",\n                args: [[file.id], [\"datas\"]],\n            });\n        }\n\n        this.trigger(\"icon-changed\", {\n            type: \"base64\",\n            uploaded_attachment_id: file.id,\n            webIconData: \"data:image/png;base64,\" + res[0].datas.replace(/\\s/g, \"\"),\n        });\n    }\n\n    /**\n     * @private\n     * @param {string} palette\n     * @param {string} value\n     */\n    _onPaletteItemClick(palette, value) {\n        if (this.props[palette] === value) {\n            return; // same value\n        }\n\n        const detail = {\n            backgroundColor: this.props.backgroundColor,\n            color: this.props.color,\n            iconClass: this.props.iconClass,\n            type: \"custom_icon\",\n        };\n        detail[palette] = value;\n\n        this.trigger(\"icon-changed\", detail);\n    }\n\n    /**\n     * @private\n     * @param {string} palette\n     */\n    _onTogglePalette(palette) {\n        for (const pal in this.show) {\n            if (pal === palette) {\n                this.show[pal] = !this.show[pal];\n            } else if (this.show[pal]) {\n                this.show[pal] = false;\n            }\n        }\n    }\n}\n\n// IconCreator.components = { FileInput };\nIconCreator.defaultProps = DEFAULT_ICON;\nIconCreator.props = {\n    backgroundColor: { type: String, optional: 1 },\n    color: { type: String, optional: 1 },\n    editable: Boolean,\n    iconClass: { type: String, optional: 1 },\n    type: { validate: (t) => [\"base64\", \"custom_icon\"].includes(t) },\n    uploaded_attachment_id: { type: Number, optional: 1 },\n    webIconData: { type: String, optional: 1 },\n};\nIconCreator.template = \"web_studio.IconCreator\";\n", "odoo.define(\"web_studio.ModelConfigurator\", function (require) {\n    \"use strict\";\n\n    const config = require(\"web.config\");\n    const Dialog = require(\"web.Dialog\");\n    const { WidgetAdapterMixin, ComponentWrapper } = require(\"web.OwlCompatibility\");\n\n    const { Component, hooks } = owl;\n    const { useState } = hooks;\n\n    class ModelConfigurator extends Component {\n        constructor(parent, props) {\n            super(parent, props);\n            this.state = useState({\n                /** You might wonder why I defined all these strings here and not in the template.\n                 * The reason is that I wanted clear templates that use a single element to render an option,\n                 * meaning that the label and helper text had to be defined here in the code.\n                 */\n                options: {\n                    use_partner: {\n                        label: this.env._t(\"Contact details\"),\n                        help: this.env._t(\"Get contact, phone and email fields on records\"),\n                        value: false,\n                    },\n                    use_responsible: {\n                        label: this.env._t(\"User assignment\"),\n                        help: this.env._t(\"Assign a responsible to each record\"),\n                        value: false,\n                    },\n                    use_date: {\n                        label: this.env._t(\"Date & Calendar\"),\n                        help: this.env._t(\"Assign dates and visualize records in a calendar\"),\n                        value: false,\n                    },\n                    use_double_dates: {\n                        label: this.env._t(\"Date range & Gantt\"),\n                        help: this.env._t(\n                            \"Define start/end dates and visualize records in a Gantt chart\"\n                        ),\n                        value: false,\n                    },\n                    use_stages: {\n                        label: this.env._t(\"Pipeline stages\"),\n                        help: this.env._t(\"Stage and visualize records in a custom pipeline\"),\n                        value: false,\n                    },\n                    use_tags: {\n                        label: this.env._t(\"Tags\"),\n                        help: this.env._t(\"Categorize records with custom tags\"),\n                        value: false,\n                    },\n                    use_image: {\n                        label: this.env._t(\"Picture\"),\n                        help: this.env._t(\"Attach a picture to a record\"),\n                        value: false,\n                    },\n                    lines: {\n                        label: this.env._t('Lines'),\n                        help: this.env._t('Add details to your records with an embedded list view'),\n                        value: false\n                    },\n                    use_notes: {\n                        label: this.env._t(\"Notes\"),\n                        help: this.env._t(\"Write additional notes or comments\"),\n                        value: false,\n                    },\n                    use_value: {\n                        label: this.env._t(\"Monetary value\"),\n                        help: this.env._t(\"Set a price or cost on records\"),\n                        value: false,\n                    },\n                    use_company: {\n                        label: this.env._t(\"Company\"),\n                        help: this.env._t(\"Restrict a record to a specific company\"),\n                        value: false,\n                    },\n                    use_sequence: {\n                        label: this.env._t(\"Custom Sorting\"),\n                        help: this.env._t(\"Manually sort records in the list view\"),\n                        value: true,\n                    },\n                    use_mail: {\n                        label: this.env._t(\"Chatter\"),\n                        help: this.env._t(\"Send messages, log notes and schedule activities\"),\n                        value: true,\n                    },\n                    use_active: {\n                        label: this.env._t(\"Archiving\"),\n                        help: this.env._t(\"Archive deprecated records\"),\n                        value: true,\n                    },\n                },\n                saving: false,\n            });\n            this.multiCompany = this.env.session.display_switch_company_menu;\n        }\n\n        /**\n         * Handle the confirmation of the dialog, just fires an event\n         * to whomever instaciated it.\n         *\n         * @private\n         */\n        _onConfirm() {\n            this.trigger(\"confirm-options\", Object.assign({}, this.state.options));\n            this.state.saving = true;\n        }\n\n        /**\n         * Handle the 'back button'' of the dialog, just fires an event\n         * to whomever instaciated it.\n         *\n         * @private\n         */\n        _onPrevious() {\n            this.trigger(\"previous\");\n        }\n    }\n\n    class ModelConfiguratorOption extends Component {}\n\n    ModelConfigurator.template = \"web_studio.ModelConfigurator\";\n    ModelConfigurator.components = { ModelConfiguratorOption };\n    ModelConfigurator.props = {\n        debug: { type: Boolean, optional: true },\n        embed: { type: Boolean, optional: true },\n        label: { type: String },\n    };\n\n    ModelConfiguratorOption.template = \"web_studio.ModelConfiguratorOption\";\n    ModelConfiguratorOption.props = {\n        name: String,\n        option: {\n            type: Object,\n            shape: {\n                label: String,\n                debug: {\n                    type: Boolean,\n                    optional: true,\n                },\n                help: String,\n                value: Boolean,\n            },\n        },\n    };\n\n    const _t = require(\"web.core\")._t;\n    /**\n     * Wrapper to make the ModelConfigurator usable as a standalone dialog. Used notably\n     * by the 'NewMenuDialog' in Studio. Note that since the ModelConfigurator does not\n     * have its own modal, I choose to use the classic Dialog and use it as an adapter\n     * instead of using an owlDialog + another adapter on top of it. Don't @ me.\n     *\n     * I've taken a few liberties with the standard Dialog: removed the footer\n     * (there's no need for it, the modelconfigurator has its own footer), it's a single\n     * size, etc. Nothing crazy.\n     */\n    const ModelConfiguratorDialog = Dialog.extend(WidgetAdapterMixin, {\n        custom_events: Object.assign({}, Dialog.prototype.custom_events, {\n            previous: \"_onPrevious\",\n        }),\n\n        /**\n         * @override\n         */\n        init(parent, options) {\n            const res = this._super.apply(this, arguments);\n            this.renderFooter = false;\n            (this.title = _t(\"Suggested features for your new model\")),\n                (this.confirmLabel = options.confirmLabel);\n            this.onForceClose = () => this.trigger_up(\"cancel_options\");\n            return res;\n        },\n\n        /**\n         * Owl Wrapper override, as described in web.OwlCompatibility\n         * @override\n         */\n        async start() {\n            const res = await this._super.apply(this, arguments);\n            this.component = new ComponentWrapper(this, ModelConfigurator, {\n                label: this.confirmLabel,\n                embed: true,\n                debug: Boolean(config.isDebug()),\n            });\n            this.component.mount(this.el);\n            return res;\n        },\n\n        /**\n         * Proper handler calling since Dialog doesn't seem to do it\n         * @override\n         */\n        close() {\n            this.on_detach_callback();\n            return this._super.apply(this, arguments);\n        },\n\n        /**\n         * Needed because of the WidgetAdapterMixin\n         * @override\n         */\n        destroy() {\n            WidgetAdapterMixin.destroy.call(this);\n            return this._super();\n        },\n\n        //--------------------------------------------------------------------------\n        // Handlers\n        //--------------------------------------------------------------------------\n\n        /**\n         * @override\n         */\n        on_attach_callback() {\n            WidgetAdapterMixin.on_attach_callback.call(this);\n            return this._super.apply(this, arguments);\n        },\n\n        /**\n         * @override\n         */\n        on_detach_callback() {\n            WidgetAdapterMixin.on_detach_callback.call(this);\n            return this._super.apply(this, arguments);\n        },\n\n        /**\n         * Handle the 'previous' button, which in this case should close the Dialog.\n         * @private\n         */\n        _onPrevious(ev) {\n            this.trigger_up(\"cancel_options\");\n            this.close();\n        },\n    });\n\n    return {\n        ModelConfigurator: ModelConfigurator,\n        ModelConfiguratorDialog: ModelConfiguratorDialog,\n    };\n});\n", "/** @odoo-module */\nimport { useService } from \"@web/core/utils/hooks\";\nimport { browser } from \"@web/core/browser/browser\";\nimport { download } from \"@web/core/network/download\";\nimport { ConfirmationDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\nimport { FileInput } from \"@web/core/file_input/file_input\";\n\nexport class HomeMenuCustomizer extends owl.Component {\n    setup() {\n        this.rpc = useService(\"rpc\");\n        this.ui = useService(\"ui\");\n        this.notification = useService(\"notification\");\n        this.company = useService(\"company\");\n        this.user = useService(\"user\");\n        this.actionManager = useService(\"action\");\n        this.menus = useService(\"menu\");\n        this.dialogManager = useService(\"dialog\");\n        this.bgImageUploaded = this.bgImageUploaded.bind(this); // is executed as a callback\n    }\n\n    async bgImageUploaded(ev) {\n        const file = ev.detail.files[0];\n\n        if (!file) {\n            this.notification.add(this.env._t(\"Could not change the background\"), {\n                sticky: true,\n                type: \"warning\",\n            });\n        } else {\n            this.ui.block();\n            try {\n                await this._setBackgroundImage(file.id);\n                browser.location.reload();\n            } finally {\n                this.ui.unblock();\n            }\n        }\n    }\n\n    _setBackgroundImage(attachment_id) {\n        return this.rpc(\"/web_studio/set_background_image\", {\n            attachment_id: attachment_id,\n            context: this.user.context,\n        });\n    }\n    /**\n     * Export all customizations done by Studio in a zip file containing Odoo\n     * modules.\n     */\n    _export() {\n        download({ url: \"/web_studio/export\", data: {} });\n    }\n    /**\n     * Open a dialog allowing to import new modules\n     * (e.g. exported customizations).\n     */\n    _import() {\n        const action = {\n            name: \"Import modules\",\n            res_model: \"base.import.module\",\n            views: [[false, \"form\"]],\n            type: \"ir.actions.act_window\",\n            target: \"new\",\n            context: {\n                dialog_size: \"medium\",\n            },\n        };\n        const options = {\n            onClose: () => this.menus.reload(),\n        };\n        this.actionManager.doAction(action, options);\n    }\n\n    async _resetBgConfirmed() {\n        this.ui.block();\n        try {\n            await this.rpc(\"/web_studio/reset_background_image\", {\n                context: this.user.context,\n            });\n            browser.location.reload();\n        } finally {\n            this.ui.unblock();\n        }\n    }\n\n    _resetBgImage() {\n        this.dialogManager.add(ConfirmationDialog, {\n            body: this.env._t(\"Are you sure you want to reset the background image?\"),\n            title: this.env._t(\"Confirmation\"),\n            confirm: () => this._resetBgConfirmed(),\n        });\n    }\n}\nHomeMenuCustomizer.template = \"web_studio.HomeMenuCustomizer\";\nHomeMenuCustomizer.components = { FileInput };\n", "/** @odoo-module **/\n\nimport { useService } from \"@web/core/utils/hooks\";\nimport { EnterpriseNavBar } from \"@web_enterprise/webclient/navbar/navbar\";\nimport { NotEditableActionError } from \"../../studio_service\";\nimport { HomeMenuCustomizer } from \"./home_menu_customizer/home_menu_customizer\";\nimport { EditMenuItem } from \"../../legacy/edit_menu_adapter\";\nimport { NewModelItem } from \"@web_studio/legacy/new_model_adapter\";\n\nexport class StudioNavbar extends EnterpriseNavBar {\n    setup() {\n        super.setup();\n        this.studio = useService(\"studio\");\n        this.actionManager = useService(\"action\");\n        this.user = useService(\"user\");\n        this.dialogManager = useService(\"dialog\");\n        this.notification = useService(\"notification\");\n        owl.hooks.onMounted(() => {\n            this.env.bus.off(\"HOME-MENU:TOGGLED\", this);\n            this._updateMenuAppsIcon();\n        });\n    }\n    onMenuToggle() {\n        this.studio.toggleHomeMenu();\n    }\n    closeStudio() {\n        this.studio.leave();\n    }\n    async onNavBarDropdownItemSelection(ev) {\n        if (ev.detail.payload.actionID) {\n            try {\n                await this.studio.open(this.studio.MODES.EDITOR, ev.detail.payload.actionID);\n            } catch (e) {\n                if (e instanceof NotEditableActionError) {\n                    const options = { type: \"danger\" };\n                    this.notification.add(\n                        this.env._t(\"This action is not editable by Studio\"),\n                        options\n                    );\n                    return;\n                }\n                throw e;\n            }\n        }\n    }\n    get hasBackgroundAction() {\n        return this.studio.editedAction || this.studio.MODES.APP_CREATOR === this.studio.mode;\n    }\n    get isInApp() {\n        return this.studio.mode === this.studio.MODES.EDITOR;\n    }\n    _onNotesClicked() {\n        // LPE fixme: dbuuid should be injected into session_info python side\n        const action = {\n            type: \"ir.actions.act_url\",\n            url: `http://pad.odoo.com/p/customization-${this.user.db.uuid}`,\n        };\n        // LPE Fixme: this could be either the local AM or the GlobalAM\n        // we don(t care i-here as we open an url anyway)\n        this.actionManager.doAction(action);\n    }\n}\nStudioNavbar.template = \"web_studio.StudioNavbar\";\nStudioNavbar.components.HomeMenuCustomizer = HomeMenuCustomizer;\nStudioNavbar.components.EditMenuItem = EditMenuItem;\nStudioNavbar.components.NewModelItem = NewModelItem;\n", "/** @odoo-module **/\n\nimport { ActionContainer } from \"@web/webclient/actions/action_container\";\nimport { useService } from \"@web/core/utils/hooks\";\n\nexport class StudioActionContainer extends ActionContainer {\n    setup() {\n        super.setup();\n        this.actionService = useService(\"action\");\n        if (this.props.initialAction) {\n            this.actionService.doAction(this.props.initialAction);\n        }\n    }\n}\n", "/** @odoo-module **/\n\nimport { registry } from \"@web/core/registry\";\nimport { useBus, useService } from \"@web/core/utils/hooks\";\nimport { cleanDomFromBootstrap } from \"@web/legacy/utils\";\nimport { computeAppsAndMenuItems } from \"@web/webclient/menus/menu_helpers\";\nimport { ComponentAdapter } from \"web.OwlCompatibility\";\nimport { AppCreatorWrapper } from \"./app_creator/app_creator\";\nimport { Editor } from \"./editor/editor\";\nimport { StudioNavbar } from \"./navbar/navbar\";\nimport { StudioHomeMenu } from \"./studio_home_menu/studio_home_menu\";\n\nconst { Component } = owl;\n\nexport class StudioClientAction extends Component {\n    setup() {\n        this.studio = useService(\"studio\");\n        useBus(this.studio.bus, \"UPDATE\", () => {\n            this.render();\n            cleanDomFromBootstrap();\n        });\n\n        this.menus = useService(\"menu\");\n        this.actionService = useService(\"action\");\n        this.homeMenuProps = computeAppsAndMenuItems(this.menus.getMenuAsTree(\"root\"));\n        useBus(this.env.bus, \"MENUS:APP-CHANGED\", () => {\n            this.homeMenuProps = computeAppsAndMenuItems(this.menus.getMenuAsTree(\"root\"));\n            this.render();\n        });\n\n        this.AppCreatorWrapper = AppCreatorWrapper; // to remove\n    }\n\n    willStart() {\n        return this.studio.ready;\n    }\n\n    mounted() {\n        this.studio.pushState();\n        document.body.classList.add(\"o_in_studio\"); // FIXME ?\n    }\n\n    patched() {\n        this.studio.pushState();\n    }\n\n    willUnmount() {\n        document.body.classList.remove(\"o_in_studio\");\n    }\n\n    async onNewAppCreated(ev) {\n        const { menu_id, action_id } = ev.detail;\n        await this.menus.reload();\n        this.menus.setCurrentMenu(menu_id);\n        const action = await this.actionService.loadAction(action_id);\n        this.studio.setParams({\n            mode: this.studio.MODES.EDITOR,\n            editorTab: \"views\",\n            action,\n            viewType: \"form\",\n        });\n    }\n}\nStudioClientAction.template = \"web_studio.StudioClientAction\";\nStudioClientAction.components = {\n    StudioNavbar,\n    StudioHomeMenu,\n    Editor,\n    ComponentAdapter: class extends ComponentAdapter {\n        setup() {\n            super.setup();\n            this.env = owl.Component.env;\n        }\n    },\n};\nStudioClientAction.target = \"fullscreen\";\n\n// force: true to override action defined by studio_action_loader\nregistry.category(\"actions\").add(\"studio\", StudioClientAction, { force: true });\n", "/* @odoo-module */\n\nimport { _lt } from \"@web/core/l10n/translation\";\nimport { Dialog } from \"@web/core/dialog/dialog\";\nimport { IconCreator } from \"@web_studio/client_action/icon_creator/icon_creator\";\nimport { useService } from \"@web/core/utils/hooks\";\n\nexport class IconCreatorDialog extends Dialog {\n    setup() {\n        super.setup();\n        this.user = useService(\"user\");\n        this.rpc = useService(\"rpc\");\n        this.menus = useService(\"menu\");\n        this.initialAppData = Object.assign({}, this.props.editedAppData);\n        this.editedAppData = owl.hooks.useState(this.props.editedAppData);\n    }\n\n    /**\n     * @private\n     * @param {CustomEvent} ev\n     */\n    onIconChanged(ev) {\n        for (const key in this.editedAppData) {\n            delete this.editedAppData[key];\n        }\n        for (const key in ev.detail) {\n            this.editedAppData[key] = ev.detail[key];\n        }\n    }\n\n    /**\n     * @private\n     */\n    async saveIcon() {\n        const { type } = this.initialAppData;\n        const appId = this.props.appId;\n        let iconValue;\n        if (this.editedAppData.type !== type) {\n            // different type\n            if (this.editedAppData.type === \"base64\") {\n                iconValue = this.editedAppData.uploaded_attachment_id;\n            } else {\n                const { iconClass, color, backgroundColor } = this.editedAppData;\n                iconValue = [iconClass, color, backgroundColor];\n            }\n        } else if (this.editedAppData.type === \"custom_icon\") {\n            // custom icon changed\n            const { iconClass, color, backgroundColor } = this.editedAppData;\n            if (\n                this.initialAppData.iconClass !== iconClass ||\n                this.initialAppData.color !== color ||\n                this.initialAppData.backgroundColor !== backgroundColor\n            ) {\n                iconValue = [iconClass, color, backgroundColor];\n            }\n        } else if (this.editedAppData.uploaded_attachment_id) {\n            // new attachment\n            iconValue = this.editedAppData.uploaded_attachment_id;\n        }\n\n        if (iconValue) {\n            await this.rpc(\"/web_studio/edit_menu_icon\", {\n                context: this.user.context,\n                icon: iconValue,\n                menu_id: appId,\n            });\n            await this.menus.reload();\n        }\n        this.close();\n    }\n}\nIconCreatorDialog.title = _lt(\"Edit Application Icon\");\nIconCreatorDialog.contentClass = \"o_web_studio_edit_menu_icon_modal\";\nIconCreatorDialog.size = \"modal-md\";\nIconCreatorDialog.bodyTemplate = \"web_studio.IconCreatorDialogBody\";\nIconCreatorDialog.footerTemplate = \"web_studio.IconCreatorDialogFooter\";\nIconCreatorDialog.components = { IconCreator };\n", "/** @odoo-module **/\nimport { HomeMenu } from \"@web_enterprise/webclient/home_menu/home_menu\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { NotEditableActionError } from \"../../studio_service\";\nimport { IconCreatorDialog } from \"./icon_creator_dialog/icon_creator_dialog\";\n\nconst NEW_APP_BUTTON = {\n    isNewAppButton: true,\n    label: \"New App\",\n    webIconData: \"/web_studio/static/src/img/default_icon_app.png\",\n};\n\n/**\n * Studio home menu\n *\n * Studio version of the standard enterprise home menu. It has roughly the same\n * implementation, with the exception of the app icon edition and the app creator.\n * @extends HomeMenu\n */\nexport class StudioHomeMenu extends HomeMenu {\n    /**\n     * @param {Object} props\n     * @param {Object[]} props.apps application icons\n     * @param {string} props.apps[].action\n     * @param {number} props.apps[].id\n     * @param {string} props.apps[].label\n     * @param {string} props.apps[].parents\n     * @param {(boolean|string|Object)} props.apps[].webIcon either:\n     *      - boolean: false (no webIcon)\n     *      - string: path to Odoo icon file\n     *      - Object: customized icon (background, class and color)\n     * @param {string} [props.apps[].webIconData]\n     * @param {string} props.apps[].xmlid\n     */\n    constructor() {\n        super(...arguments);\n\n        this.user = useService(\"user\");\n        this.studio = useService(\"studio\");\n        this.notifications = useService(\"notification\");\n        this.dialog = useService(\"dialog\");\n    }\n\n    mounted() {\n        super.mounted();\n        this.canEditIcons = true;\n        this.el.classList.add(\"o_studio_home_menu\");\n    }\n\n    async willUpdateProps(nextProps) {\n        this.availableApps = this.state.query.length\n            ? this._filter(nextProps.apps)\n            : nextProps.apps;\n    }\n\n    //--------------------------------------------------------------------------\n    // Getters\n    //--------------------------------------------------------------------------\n\n    get displayedApps() {\n        return super.displayedApps.concat([NEW_APP_BUTTON]);\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     * @private\n     */\n    async _openMenu(menu) {\n        if (menu.isNewAppButton) {\n            this.canEditIcons = false;\n            return this.studio.open(this.studio.MODES.APP_CREATOR);\n        } else {\n            try {\n                await this.studio.open(this.studio.MODES.EDITOR, menu.actionID);\n                this.menus.setCurrentMenu(menu);\n            } catch (e) {\n                if (e instanceof NotEditableActionError) {\n                    const options = { type: \"danger\" };\n                    this.notifications.add(\n                        this.env._t(\"This action is not editable by Studio\"),\n                        options\n                    );\n                    return;\n                }\n                throw e;\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Object} app\n     */\n    onEditIconClick(app) {\n        if (!this.canEditIcons) {\n            return;\n        }\n        const editedAppData = {};\n        if (app.webIconData) {\n            Object.assign(editedAppData, {\n                webIconData: app.webIconData,\n                type: \"base64\",\n            });\n        } else {\n            Object.assign(editedAppData, {\n                backgroundColor: app.webIcon.backgroundColor,\n                color: app.webIcon.color,\n                iconClass: app.webIcon.iconClass,\n                type: \"custom_icon\",\n            });\n        }\n\n        const dialogProps = {\n            editedAppData,\n            appId: app.id,\n        };\n        this.dialog.add(IconCreatorDialog, dialogProps);\n    }\n}\n\nStudioHomeMenu.props = { apps: HomeMenu.props.apps };\nStudioHomeMenu.template = \"web_studio.StudioHomeMenu\";\n", "/** @odoo-module **/\n\n/**\n * Formerly action_editor_action, slightly adapted\n */\n\nimport core from \"web.core\";\nimport Dialog from \"web.Dialog\";\nimport dom from \"web.dom\";\nimport session from \"web.session\";\nimport Widget from \"web.Widget\";\n\nimport ActionEditor from \"web_studio.ActionEditor\";\nimport bus from \"web_studio.bus\";\nimport ViewEditorManager from \"web_studio.ViewEditorManager\";\n\nconst _t = core._t;\nconst _lt = core._lt;\n\nexport const ActionEditorMain = Widget.extend({\n    custom_events: {\n        studio_default_view: \"_onSetDefaultView\",\n        studio_restore_default_view: \"_onRestoreDefaultView\",\n        studio_disable_view: \"_onDisableView\",\n        studio_edit_view: \"_onEditView\",\n        studio_edit_action: \"_onEditAction\",\n    },\n    /**\n     * @constructor\n     * @param {Object} options\n     * @param {Object} options.action - action description\n     * @param {Boolean} options.chatter_allowed\n     * @param {string} [options.controllerState]\n     * @param {boolean} [options.noEdit] - do not edit a view\n     * @param {string} [options.viewType]\n     * @param {Object} [options.x2mEditorPath]\n     */\n    init: function (parent, options) {\n        this._super.apply(this, arguments);\n\n        this._title = _t(\"Studio\");\n        if (this.controlPanelProps) {\n            this.controlPanelProps.title = this._title;\n        }\n        this.options = options;\n        this.action = options.action;\n\n        this._setEditedView(options.viewType);\n\n        // We set the x2mEditorPath since when we click on the studio breadcrumb\n        // a new view_editor_manager is instantiated and then the previous\n        // x2mEditorPath is needed to reload the previous view_editor_manager\n        // state.\n        this.x2mEditorPath = options.x2mEditorPath;\n        this.activityAllowed = undefined;\n        this.controllerState = options.controllerState || {};\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        if (!this.action) {\n            return Promise.reject();\n        }\n        var defs = [this._super.apply(this, arguments), this._isActivityAllowed()];\n        return Promise.all(defs);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        var def;\n        this.$el.addClass(\"o_web_studio_client_action\");\n        var isEditable = _.contains(ActionEditor.prototype.VIEW_TYPES, this.viewType);\n        if (this.options.noEdit || !isEditable) {\n            // click on \"Views\" in menu or view we cannot edit\n            this.action_editor = new ActionEditor(this, this.action);\n            def = this.action_editor.appendTo(this.$(\".o_content\"));\n        } else {\n            // directly edit the view instead of displaying all views\n            def = this._editView();\n        }\n        return Promise.all([def, this._super.apply(this, arguments)]).then(function () {\n            self._pushState();\n            bus.trigger(\"studio_main\", self.action);\n            if (!self.options.noEdit) {\n                // TODO: try to put it in editView\n                bus.trigger(\"edition_mode_entered\", self.viewType);\n            }\n            // add class when activating a pivot/graph view through studio\n            const model = self.view_editor && self.view_editor.view.model;\n            if (model && model._isInSampleMode) {\n                self.el.classList.add(\"o_view_sample_data\");\n            }\n        });\n    },\n    /**\n     * @override\n     */\n    on_attach_callback: function () {\n        this.isInDOM = true;\n        if (this.view_editor) {\n            this.view_editor.on_attach_callback();\n        }\n    },\n    /**\n     * @override\n     */\n    on_detach_callback: function () {\n        this.isInDOM = false;\n        if (this.view_editor) {\n            this.view_editor.on_detach_callback();\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Object} action\n     * @param {Object} args\n     * @returns {Promise}\n     */\n    _editAction: function (action, args) {\n        var self = this;\n        core.bus.trigger(\"clear_cache\");\n        return this._rpc({\n            route: \"/web_studio/edit_action\",\n            params: {\n                action_type: action.type,\n                action_id: action.id,\n                args: args,\n                context: session.user_context,\n            },\n        }).then(function (result) {\n            if (result !== true) {\n                Dialog.alert(self, result);\n            } else {\n                return self._reloadAction(action.id);\n            }\n        });\n    },\n    /**\n     * @private\n     */\n    _editView: function () {\n        var self = this;\n\n        // the default view needs to be created before `loadViews` or the\n        // renderer will not be aware that a new view exists\n        var defs = [this._getStudioViewArch(this.action.res_model, this.viewType, this.viewId)];\n        if (this.viewType === \"form\") {\n            defs.push(this._isChatterAllowed());\n        }\n        return Promise.all(defs).then(function () {\n            // add studio in loadViews context to retrieve groups server-side\n            // We load views in the base language to make sure we read/write on the source term field\n            // of ir.ui.view\n            var context = _.extend({}, self.action.context, { studio: true, lang: false });\n            var loadViewDef = self.loadViews(self.action.res_model, context, self.views, {\n                load_filters: true,\n            });\n            return loadViewDef.then(function (fields_views) {\n                if (!self.action.controlPanelFieldsView) {\n                    // in case of Studio navigation, the processing done on the\n                    // action in ActWindowActionManager@_executeWindowAction\n                    // is by-passed\n                    self.action.controlPanelFieldsView = fields_views.search;\n                }\n                if (!self.controllerState.currentId) {\n                    self.controllerState.currentId =\n                        self.controllerState.resIds && self.controllerState.resIds[0];\n                }\n                var params = {\n                    action: self.action,\n                    fields_view: fields_views[self.viewType],\n                    viewType: self.viewType,\n                    chatter_allowed: self.chatter_allowed,\n                    studio_view_id: self.studioView.studio_view_id,\n                    studio_view_arch: self.studioView.studio_view_arch,\n                    x2mEditorPath: self.x2mEditorPath,\n                    controllerState: self.controllerState,\n                };\n                self.view_editor = new ViewEditorManager(self, params);\n\n                var fragment = document.createDocumentFragment();\n                return self.view_editor.appendTo(fragment).then(function () {\n                    if (self.action_editor) {\n                        dom.detach([{ widget: self.action_editor }]);\n                    }\n                    dom.append(self.$el, [fragment], {\n                        in_DOM: self.isInDOM,\n                        callbacks: [{ widget: self.view_editor }],\n                    });\n                });\n            });\n        });\n    },\n    /**\n     * @private\n     * @param {String} model\n     * @param {String} view_type\n     * @param {Integer} view_id\n     * @returns {Promise}\n     */\n    _getStudioViewArch: function (model, view_type, view_id) {\n        var self = this;\n        core.bus.trigger(\"clear_cache\");\n        return this._rpc({\n            route: \"/web_studio/get_studio_view_arch\",\n            params: {\n                model: model,\n                view_type: view_type,\n                view_id: view_id,\n                // We load views in the base language to make sure we read/write on the source term field\n                // of ir.ui.view\n                context: _.extend({}, session.user_context, { lang: false }),\n            },\n        }).then(function (studioView) {\n            self.studioView = studioView;\n        });\n    },\n    /**\n     * Determines whether the model that will be edited supports mail_activity.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _isActivityAllowed: function () {\n        var self = this;\n        var modelName = this.action.res_model;\n        return this._rpc({\n            route: \"/web_studio/activity_allowed\",\n            params: {\n                model: modelName,\n            },\n        }).then(function (activityAllowed) {\n            self.activityAllowed = activityAllowed;\n        });\n    },\n    /**\n     * @private\n     * Determines whether the model\n     * that will be edited supports mail_thread\n     * @returns {Promise}\n     */\n    _isChatterAllowed: function () {\n        var self = this;\n        var res_model = this.action.res_model;\n        return this._rpc({\n            route: \"/web_studio/chatter_allowed\",\n            params: {\n                model: res_model,\n            },\n        }).then(function (isChatterAllowed) {\n            self.chatter_allowed = isChatterAllowed;\n        });\n    },\n\n    /**\n     * @private\n     */\n    _pushState: function () {\n        // as there is no controller, we need to update the state manually\n        var state = {\n            action: this.action.id,\n            model: this.action.res_model,\n            view_type: this.viewType,\n        };\n        // TODO: necessary?\n        if (this.action.context) {\n            var active_id = this.action.context.active_id;\n            if (active_id) {\n                state.active_id = active_id;\n            }\n            var active_ids = this.action.context.active_ids;\n            // we don't push active_ids if it's a single element array containing the active_id\n            // to make the url shorter in most cases\n            if (active_ids && !(active_ids.length === 1 && active_ids[0] === active_id)) {\n                state.active_ids = this.action.context.active_ids.join(\",\");\n            }\n        }\n        this.trigger_up(\"push_state\", {\n            state: state,\n            studioPushState: true, // see action_manager @_onPushState\n        });\n    },\n    /**\n     * @private\n     * @param {Integer} actionID\n     * @returns {Promise}\n     */\n    _reloadAction: function (actionID) {\n        var self = this;\n        return new Promise(function (resolve) {\n            self.trigger_up(\"reload_action\", {\n                actionID: actionID,\n                onSuccess: resolve,\n            });\n        });\n    },\n    /**\n     * @private\n     * @param {string} [viewType]\n     */\n    _setEditedView: function (viewType) {\n        var views = this.action._views || this.action.views;\n        this.views = views.slice();\n        // search is not in action.view\n        var searchview_id = this.action.search_view_id && this.action.search_view_id[0];\n        this.views.push([searchview_id || false, \"search\"]);\n        var view = _.find(this.views, function (v) {\n            return v[1] === viewType;\n        });\n        this.view = view || this.views[0]; // see action manager\n        this.viewId = this.view[0];\n        this.viewType = this.view[1];\n    },\n    /**\n     * @private\n     * @param {String} view_mode\n     * @returns {Promise}\n     */\n    _writeViewMode: function (view_mode, initial_view_mode) {\n        var self = this;\n        var def = this._editAction(this.action, { view_mode: view_mode });\n        return def.then(function (result) {\n            if (initial_view_mode) {\n                result.initial_view_types = initial_view_mode.split(\",\");\n            }\n            /* non-working action removed in #21562: we should never get here */\n            return self.do_action(\"action_web_studio_action_editor\", {\n                action: result,\n                noEdit: true,\n            });\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onDisableView: function (event) {\n        var view_type = event.data.view_type;\n        var view_mode = _.without(this.action.view_mode.split(\",\"), view_type);\n\n        if (!view_mode.length) {\n            Dialog.alert(this, _t(\"You cannot deactivate this view as it is the last one active.\"));\n        } else {\n            this._writeViewMode(view_mode.toString());\n        }\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onEditAction: function (event) {\n        var self = this;\n\n        var args = event.data.args;\n        if (!args) {\n            return;\n        }\n\n        this._editAction(this.action, args).then(function (result) {\n            self.action = result;\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     * @param {string} event.data.view_type\n     */\n    _onEditView: function (event) {\n        this._setEditedView(event.data.view_type);\n        this._editView().then(function () {\n            bus.trigger(\"edition_mode_entered\", event.data.view_type);\n        });\n    },\n    /**\n     * @private\n     */\n    _onRestoreDefaultView: function (event) {\n        var self = this;\n\n        var message = _t(\n            \"Are you sure you want to restore the default view?\\r\\nAll customization done with studio on this view will be lost.\"\n        );\n\n        Dialog.confirm(this, message, {\n            confirm_callback: function () {\n                var context = _.extend({}, self.action.context, { studio: true, lang: false });\n                //To restore the default view from an inherited one, we need first to retrieve the default view id\n                var loadViewDef = self.loadViews(self.action.res_model, context, self.views, {\n                    load_filters: true,\n                });\n                loadViewDef.then(function (fields_views) {\n                    self._rpc({\n                        route: \"/web_studio/restore_default_view\",\n                        params: {\n                            view_id: fields_views[event.data.view_type].view_id,\n                        },\n                    });\n                });\n            },\n            dialogClass: \"o_web_studio_preserve_space\",\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onSetDefaultView: function (event) {\n        var selected_view_type = event.data.view_type;\n        var view_types = _.map(this.action.views, ({ type }) => type);\n        var view_mode = _.without(view_types, selected_view_type);\n        view_mode.unshift(selected_view_type);\n        view_mode = view_mode.toString();\n\n        this._writeViewMode(view_mode, this.action.view_mode);\n    },\n});\n", "/** @odoo-module */\n\nimport { useService } from \"@web/core/utils/hooks\";\nimport { ComponentAdapter } from \"web.OwlCompatibility\";\nimport { MenuItem } from \"web_studio.EditMenu\";\n\nclass EditMenuItemAdapter extends ComponentAdapter {\n    constructor(parent, props) {\n        props.Component = MenuItem;\n        super(...arguments);\n        this.menus = useService(\"menu\");\n        this.env = owl.Component.env;\n    }\n\n    get currentMenuId() {\n        return this.menus.getCurrentApp().id;\n    }\n\n    get legacyMenuData() {\n        return this.menus.getMenuAsTree(\"root\");\n    }\n\n    get widgetArgs() {\n        return [this.legacyMenuData, this.currentMenuId];\n    }\n    mounted() {\n        super.mounted(...arguments);\n        if (this.props.keepOpen) {\n            this.widget.editMenu(this.props.scrollToBottom);\n        }\n    }\n    updateWidget() {}\n    renderWidget() {}\n}\n\n// why a high order component ?\n// - support navbar re-rendering without having to fiddle too much in\n// the legacy widget's code\n// - allow to support the keepopen, and autoscroll features (yet to come)\nexport class EditMenuItem extends owl.Component {\n    constructor() {\n        super(...arguments);\n        this.localId = 0;\n        this.menus = useService(\"menu\");\n        owl.hooks.onWillUpdateProps(() => this.localId++);\n        this.editMenuParams = {};\n        owl.hooks.onPatched(() => {\n            this.editMenuParams = {};\n        });\n    }\n    reloadMenuData(ev) {\n        const { keep_open, scroll_to_bottom } = ev.detail;\n        this.editMenuParams = { keepOpen: keep_open, scrollToBottom: scroll_to_bottom };\n        this.menus.reload();\n    }\n}\nEditMenuItem.components = { EditMenuItemAdapter };\nEditMenuItem.template = owl.tags.xml`\n  <t>\n    <div t-if=\"!menus.getCurrentApp()\"/>\n    <t t-else=\"\" t-component=\"EditMenuItemAdapter\" t-props=\"editMenuParams\" t-key=\"localId\" t-on-reload-menu-data=\"reloadMenuData\" />\n  </t>\n`;\n", "/** @odoo-module */\n\nimport NewModel from \"web_studio.NewModel\";\nimport { ComponentAdapter } from \"web.OwlCompatibility\";\nimport { useService } from \"@web/core/utils/hooks\";\n\nexport class NewModelItem extends owl.Component {\n    setup() {\n        this.NewModel = NewModel;\n        this.menus = useService(\"menu\");\n        this.studio = useService(\"studio\");\n        this.action = useService(\"action\");\n        this.localId = 0;\n        owl.hooks.onWillUpdateProps(() => this.localId++);\n    }\n\n    async editNewModel(ev) {\n        const { action_id, options } = ev.detail;\n        const action = await this.action.loadAction(action_id);\n        this.studio.setParams({ action, viewType: (options && options.viewType) || \"form\" });\n    }\n}\nNewModelItem.template = owl.tags.xml`\n  <t>\n    <t t-set=\"currentApp\" t-value=\"menus.getCurrentApp()\" />\n    <t t-if=\"currentApp\"\n       t-component=\"ComponentAdapter\"\n       Component=\"NewModel.NewModelItem\"\n       widgetArgs=\"[currentApp and currentApp.id]\"\n       t-key=\"localId\"\n       t-on-reload-menu-data=\"menus.reload()\"\n       t-on-menu-clicked=\"editNewModel\" />\n    <div t-else=\"\" />\n  </t>\n`;\nNewModelItem.components.ComponentAdapter = class extends ComponentAdapter {\n    setup() {\n        super.setup();\n        this.env = owl.Component.env;\n    }\n};\n", "(function (py) {\n\n/**\n *\n * \u00b4py.extract\u00b4 is an extension used only by AbstractEditComponent,\n * to parse the python values of the views so that it can be used\n * in javascript.\n *\n * The string converted into a dictionary in the case of options, and\n * a list of fieldName and non-usable rest (free code, functions,\n * calculations ...)\n *\n * eg:\n *\n *   t-esc=\"o.doc.get_currency()\"\n *   t-options='{\"field\": o.doc.product_id, \"toto\": o.toto, \"tata\": \"string\"}'\n *   t-options='dict(field=o.doc.product_id, toto=o.toto, tata=\"string\")'\n *   t-options-currency=\"o.doc.amount + 11.0\"\n *\n * @see _splitRelatedValue in edit_components.js\n * @see _extractTOptions in edit_components.js\n *\n * Although it is functional, this must be redone, it is a poc.\n **/\n\nvar Python = function (expr, type, params) {\n    this.expr = expr;\n    this.params = params;\n    if (type === 'call') {\n        this.isCall = true;\n    }\n    if (type === 'field') {\n        this.isField = true;\n    }\n    if (type === 'operator') {\n        this.isOperator = true;\n    }\n};\nPython.prototype.isPython = true;\nPython.prototype.toString = function () {\n    return this.expr + '';\n};\n\nfunction extract (expr) {\n    switch (expr.id) {\n        case '(name)':\n            switch (expr.value) {\n                case 'true': return true;\n                case 'false': return false;\n            }\n            return new Python(expr.value, 'field');\n        case '(string)':\n        case '(number)':\n        case '(constant)':\n            switch (expr.value) {\n                case 'None': return null;\n                case 'False': return false;\n                case 'True': return true;\n            }\n            return expr.value;\n        case '(':\n            var func = extract(expr.first);\n            var error = false;\n            if (func.isPython && func.expr === 'dict') {\n                var obj = {};\n                for(var l=0; l<expr.second.length; ++l) {\n                    var kv = expr.second[l];\n                    if (kv.id === \"=\") {\n                        obj[extract(kv.first)] = extract(kv.second);\n                    } else {\n                        error = true;\n                    }\n                }\n                if (!error) {\n                    return obj;\n                }\n            }\n            var array = [];\n            for(var l=0; l<expr.second.length; ++l) {\n                var kv = expr.second[l];\n                array.push(extract(kv));\n            }\n            var res = new Python(func + '(' + array.join(', ') + ')', 'call', {\n                object: func.isField ? func.params.slice(0, -1) : [],\n                method: func.isField ? func.params[func.params.length-1] : func,\n                args: array,\n            });\n            if (error) {\n                throw new Error('SyntaxError: ' + res);\n            }\n            return res;\n        case '[':\n            if (expr.second) {\n                var value = extract(expr.first);\n                var attribute = extract(expr.second);\n                return new Python(value + '[' + attribute + ']', 'attribute', {\n                    value: value,\n                    attribute: attribute,\n                });\n            }\n            var array = [];\n            for(var l=0; l<expr.first.length; ++l) {\n                array.push(extract(expr.first[l]));\n            }\n            return array;\n        case '{':\n            var obj = {};\n            for(var l=0; l<expr.first.length; ++l) {\n                var kv = expr.first[l];\n                obj[extract(kv[0])] = extract(kv[1]);\n            }\n            return obj;\n        case '.':\n            if (expr.second.id !== '(name)') {\n                throw new Error('SyntaxError: ' + expr);\n            }\n            var params = [];\n            var first = extract(expr.first);\n            if (first.isAttribute) {\n                params.push.apply(params, first.params);\n            } else {\n                params.push(first.expr);\n            }\n            var second = extract(expr.second);\n            if (second.isAttribute) {\n                params.push.apply(params, second.params);\n            } else {\n                params.push(second.expr);\n            }\n            return new Python(params.join('.'), 'field', params);\n        case '=':\n            return extract(expr.first) + '=' + extract(expr.second);\n        case '(comparator)':\n            var string = '';\n            var values = [];\n            for(var l=0; l<expr.expressions.length; ++l) {\n                var value = extract(expr.expressions[l]);\n                values.push(value);\n                if (l > 0) {\n                    string += expr.operators[l-1];\n                }\n                string += value;\n            }\n            return new Python(string, 'operator', {\n                operators: expr.operators,\n                values: values,\n            });\n    }\n}\npy.extract = function (str) {\n    return extract(py.parse(py.tokenize(str)));\n};\n\n// eslint-disable-next-line no-undef\n})(typeof exports === 'undefined' ? py : exports);", "odoo.define('web_studio.EditMenu', function (require) {\n\"use strict\";\n\nconst CommonMenuDialog = require('web_studio.CommonMenuDialog');\nvar config = require('web.config');\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar FieldManagerMixin = require('web.FieldManagerMixin');\nvar form_common = require('web.view_dialogs');\nvar relational_fields = require('web.relational_fields');\nvar session = require('web.session');\nvar StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\nvar Widget = require('web.Widget');\n\nvar Many2One = relational_fields.FieldMany2One;\nconst FieldRadio = relational_fields.FieldRadio;\nvar _t = core._t;\n\nvar MenuItem = Widget.extend({\n    template: 'web_studio.EditMenu.MenuItem',\n    events: {\n        'click .o_web_edit_menu': '_onClick',\n    },\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} menu_data\n     * @param {Integer} current_primary_menu\n     */\n    init: function (parent, menu_data, current_primary_menu) {\n        this._super.apply(this, arguments);\n        this.menu_data = menu_data;\n        this.current_primary_menu = current_primary_menu;\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    editMenu: function (scrollToBottom) {\n        new EditMenuDialog(this, this.menu_data, this.current_primary_menu, scrollToBottom)\n            .open();\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Open a dialog to edit the clicked menu.\n     *\n     * @private\n     * @param {Event} event\n     */\n    _onClick: function (event) {\n        event.preventDefault();\n        this.editMenu();\n    },\n});\n\nvar EditMenuDialog = Dialog.extend({\n    template: 'web_studio.EditMenu.Dialog',\n    events: _.extend({}, Dialog.prototype.events, {\n        'click button.js_edit_menu': '_onEditMenu',\n        'click button.js_delete_menu': '_onDeleteMenu',\n    }),\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} menu_data\n     * @param {Integer} current_primary_menu\n     */\n    init: function (parent, menu_data, current_primary_menu, scrollToBottom) {\n        var options = {\n            title: _t('Edit Menu'),\n            size: 'medium',\n            dialogClass: 'o_web_studio_edit_menu_modal',\n            buttons: [{\n                text: _t(\"Confirm\"),\n                classes: 'btn-primary',\n                click: this._onSave.bind(this),\n            }, {\n                text: _t(\"Cancel\"),\n                close: true,\n            }, {\n                icon: 'fa-plus-circle',\n                text: _t(\"New Menu\"),\n                classes: 'btn-secondary js_add_menu ml-auto',\n                click: this._onAddMenu.bind(this),\n            }],\n        };\n        this.current_primary_menu = current_primary_menu;\n        this.roots = this.getMenuDataFiltered(menu_data);\n        this.scrollToBottom = scrollToBottom;\n        this.to_delete = [];\n        this.to_move = {};\n\n        this._super(parent, options);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        this.$('.oe_menu_editor').nestedSortable({\n            listType: 'ul',\n            handle: 'div',\n            items: 'li',\n            maxLevels: 5,\n            toleranceElement: '> div',\n            forcePlaceholderSize: true,\n            opacity: 0.6,\n            placeholder: 'oe_menu_placeholder',\n            tolerance: 'pointer',\n            attribute: 'data-menu-id',\n            expression: '()(.+)', // nestedSortable takes the second match of an expression (*sigh*)\n            relocate: this.moveMenu.bind(this),\n            rtl: _t.database.parameters.direction === \"rtl\",\n        });\n        this.opened().then(() => {\n            if (this.scrollToBottom) {\n                this.$el.scrollTop(this.$el.prop('scrollHeight'));\n            }\n        });\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @param {Object} menu_data\n     * @returns {Object}\n     */\n    getMenuDataFiltered: function (menu_data) {\n        var self = this;\n        var menus = menu_data.childrenTree.filter(function (el) {\n            return el.id === self.current_primary_menu;\n        });\n        return menus;\n    },\n    /**\n     * @param {Event} ev\n     */\n    moveMenu: function (ev, ui) {\n        var self = this;\n\n        var $menu = $(ui.item);\n        var menu_id = $menu.data('menu-id');\n\n        this.to_move[menu_id] = {\n            parent_menu_id: $menu.parents('[data-menu-id]:first').data('menu-id') || this.current_primary_menu,\n            sequence: $menu.index(),\n        };\n\n        // Resequence siblings\n        _.each($menu.siblings('li'), function (el) {\n            var menu_id = $(el).data('menu-id');\n            if (menu_id in self.to_move) {\n                self.to_move[menu_id].sequence = $(el).index();\n            } else {\n                self.to_move[menu_id] = {sequence: $(el).index()};\n            }\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Boolean} keep_open\n     */\n    _reloadMenuData: function (keep_open, scrollToBottom) {\n        this.trigger_up('reload_menu_data', { keep_open: keep_open, scroll_to_bottom: scrollToBottom});\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onAddMenu: function (ev) {\n        ev.preventDefault();\n\n        var self = this;\n        new NewMenuDialog(this, {\n            parent_menu_id: this.current_primary_menu,\n            on_saved: function () {\n                self._saveChanges().then(function () {\n                    self._reloadMenuData(true, true);\n                });\n            },\n        }).open();\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onDeleteMenu: function (ev) {\n        var $menu = $(ev.currentTarget).closest('[data-menu-id]');\n        var menu_id = $menu.data('menu-id') || 0;\n        if (menu_id) {\n            this.to_delete.push(menu_id);\n        }\n        $menu.remove();\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onEditMenu: function (ev) {\n        var self = this;\n        var menu_id = $(ev.currentTarget).closest('[data-menu-id]').data('menu-id');\n        new form_common.FormViewDialog(this, {\n            res_model: 'ir.ui.menu',\n            res_id: menu_id,\n            on_saved: function () {\n                self._saveChanges().then(function () {\n                    self._reloadMenuData(true);\n                });\n            },\n        }).open();\n    },\n    /**\n     * Save the current changes (in `to_move` and `to_delete`).\n     *\n     * @private\n     */\n    _onSave: function () {\n        var self = this;\n        const $menus = this.$(\"[data-menu-id]\");\n        if (!$menus.length) {\n            return Dialog.alert(self, _t('You cannot remove all the menu items of an app.\\r\\nTry uninstalling the app instead.'));\n        }\n        if (\n            !_.isEmpty(this.to_move) ||\n            !_.isEmpty(this.to_delete)\n        ) {\n            // do not make an rpc (and then reload menu) if there is nothing to save\n            this._saveChanges().then(function () {\n                self._reloadMenuData();\n            });\n        } else {\n            this.close();\n        }\n    },\n    /**\n     * Save the current changes (in `to_move` and `to_delete`).\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _saveChanges: function () {\n        return this._rpc({\n            model: 'ir.ui.menu',\n            method: 'customize',\n            kwargs: {\n                to_move: this.to_move,\n                to_delete: this.to_delete,\n            },\n        });\n    },\n});\n\n// The Many2One field is extended to catch when a model is quick created\n// to avoid letting the user click on the save menu button\n// before the model is created.\nvar EditMenuMany2One = Many2One.extend({\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     * @private\n     */\n    _quickCreate: function () {\n        this.trigger_up('edit_menu_disable_save');\n        var def = this._super.apply(this, arguments);\n        Promise.resolve(def).then(this.trigger_up.bind(this, 'edit_menu_enable_save'),\n                                  this.trigger_up.bind(this, 'edit_menu_enable_save'));\n\n    },\n});\n\nconst NewMenuDialog = CommonMenuDialog.extend({\n    template: 'web_studio.EditMenu.Dialog.New',\n\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {function} params.on_saved - callback executed after saving\n     * @param {String} confirmlabel - label of the create menu dialog\n     */\n    init: function (parent, params) {\n        this.title = _t('Create a new Menu');\n        this.confirmLabel = _t('Create Menu');\n        this._super(...arguments);\n    },\n    /**\n     * set buttons for the new menu dialog\n     *\n     * @override\n     */\n    async willStart() {\n        await this._super(...arguments);\n        this.set_buttons([{\n            text: _t(\"Confirm\"),\n            classes: 'btn-primary confirm_button',\n            click: this._onSave.bind(this)\n        }, {\n            text: _t(\"Cancel\"),\n            close: true\n        }]);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        var defs = [];\n        this.opened().then(function () {\n            self.$modal.addClass('o_web_studio_add_menu_modal');\n            // focus on input\n            self.$el.find('input[name=\"name\"]').focus();\n        });\n\n        defs.push(this._super.apply(this, arguments));\n\n        defs.push(this.model.makeRecord('ir.actions.act_window', [\n            {\n                name: 'model',\n                relation: 'ir.model',\n                type: 'many2one',\n                domain: [['transient', '=', false], ['abstract', '=', false]],\n            },\n            {\n                name: 'model_choice',\n                type: 'selection',\n                selection: [['new', _t('New Model')], ['existing', _t('Existing Model')], ['parent', _t('Parent Menu')]],\n                value: 'new',\n            }\n        ]).then(function (recordID) {\n            var options = {\n                mode: 'edit',\n            };\n            var record = self.model.get(recordID);\n            self.many2one = new EditMenuMany2One(self, 'model', record, options);\n            self.many2one.nodeOptions.no_create_edit = !config.isDebug();\n            self.many2one.nodeOptions.no_create = !config.isDebug();\n            self._registerWidget(recordID, 'model', self.many2one);\n            self.many2one.appendTo(self.$('.js_model'));\n            self.model_choice = new FieldRadio(self, 'model_choice', record, options);\n            self._registerWidget(recordID, 'model_choice', self.model_choice)\n            self.model_choice.appendTo(self.$('.model_choice'));\n            self._onChangeModelChoice();\n        }));\n        return Promise.all(defs);\n    },\n    /**\n     * this method will create new menu and new model\n     *\n     * @private\n     * @override\n     * @param {String} menu_name\n     */\n    _doSave(menuName) {\n        this._super(...arguments);\n        const modelID = this.many2one.value && this.many2one.value.res_id;\n        core.bus.trigger('clear_cache');\n        return this._rpc({\n            route: '/web_studio/create_new_menu',\n            params: {\n                menu_name: menuName,\n                model_id: modelID,\n                model_choice: this.model_choice.value,\n                model_options: this.model_options,\n                parent_menu_id: this.parent_menu_id,\n                context: session.user_context,\n            },\n        });\n    },\n\n    /**\n     * Handle the change of model choice (new or existing model). Change the dialog's confirm\n     * button text label and hide or show the ir.model selection field depending on the selected\n     * value.\n     *\n     * @private\n     */\n    _onChangeModelChoice: function() {\n        const new_model = this.model_choice.value === 'new';\n        this.set_buttons([{\n            text: new_model? _t(\"Configure Model\"):_t('Confirm'),\n            classes: 'btn-primary confirm_button',\n            click: new_model? this._onConfigureModel.bind(this):this._onSave.bind(this),\n        }, {\n            text: _t(\"Cancel\"),\n            close: true\n        }]);\n        this.$('.model_chooser').toggle(this.model_choice.value === 'existing');\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n\n    /**\n     * Handle the 'previous' button click on the ModelConfigurator\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onCancelOptions: function (ev) {\n        this.$footer.find('.btn').removeClass('disabled').attr('disabled', null);\n    },\n\n    /**\n     * Override of the 'field_changed' handler; make sure the model selection\n     * field's visibility is modified whenever the model selection radio is updated.\n     *\n     * @private\n     * @override\n     * @param {OdooEvent} ev\n     */\n    _onFieldChanged: async function(ev) {\n        const res = await StandaloneFieldManagerMixin._onFieldChanged.apply(this, arguments);\n        this._onChangeModelChoice();\n        return res;\n    },\n});\n\nreturn {\n    MenuItem: MenuItem,\n    Dialog: EditMenuDialog,\n};\n\n});\n", "odoo.define('web_studio.NewModel', function (require) {\n\"use strict\";\n\nconst core = require('web.core');\nconst session = require('web.session');\nconst Widget = require('web.Widget');\nconst CommonMenuDialog = require('web_studio.CommonMenuDialog');\n\nconst _t = core._t;\n\nconst NewModelItem = Widget.extend({\n    xmlDependencies: ['/web_studio/static/src/legacy/xml/new_model.xml'],\n    template: 'web_studio.NewModel',\n    events: {\n        'click .o_web_create_new_model': '_onClick',\n    },\n\n    /**\n     * This new model widget provides the shortcut to create a\n     * new model direct from the menubar.\n     *\n     * @constructor\n     * @param {Widget} parent\n     * @param {Integer} currentPrimaryMenu - for a current menu\n     */\n    init(parent, currentPrimaryMenu) {\n        this._super(...arguments);\n        this.current_primary_menu = currentPrimaryMenu;\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Open a dialog to create new model.\n     *\n     * @private\n     * @param {Event} event\n     */\n    _onClick(event) {\n        event.preventDefault();\n        new NewModelDialog(this, {\n            parent_menu_id: this.current_primary_menu,\n            on_saved(menu) {\n                this.trigger_up('reload_menu_data');\n                this.trigger_up('menu_clicked', {\n                    openAction: true,\n                    menu_id: this.current_primary_menu,\n                    action_id: menu.action_id,\n                    options: {viewType: 'form'},\n                });\n            },\n        }).open();\n    },\n\n});\n\nconst NewModelDialog = CommonMenuDialog.extend({\n    template: 'web_studio.NewModel.Dialog',\n\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {String} confirmlabel - label of the create model dialog\n     */\n    init(parent, params) {\n        this.title = _t('Create a new Model');\n        this.confirmLabel = _t('Create Model');\n        this._super(...arguments);\n    },\n\n    /**\n     * set buttons for the new model dialog\n     *\n     * @override\n     */\n    async willStart() {\n        await this._super(...arguments);\n        this.set_buttons([{\n            text: _t(\"Configure Model\"),\n            classes: 'btn-primary confirm_button',\n            click: this._onConfigureModel.bind(this),\n        }, {\n            text: _t(\"Cancel\"),\n            close: true\n        }]);\n    },\n\n    /**\n     * set focus on the model name input once dialog open\n     *\n     * @override\n     */\n    async start() {\n        await this._super(...arguments);\n        this.opened(() => {\n            this.$modal.addClass('o_web_studio_new_model_modal');\n            // focus on input\n            this.el.querySelector('input[name=\"name\"]').focus();\n        });\n    },\n\n    /**\n     * this method will create new menu and new model\n     *\n     * @private\n     * @override\n     * @param {String} menuName\n     */\n    _doSave(menuName) {\n        this._super(...arguments);\n        core.bus.trigger('clear_cache');\n        return this._rpc({\n            route: '/web_studio/create_new_menu',\n            params: {\n                menu_name: menuName,\n                model_id: false,\n                model_choice: 'new',\n                model_options: this.model_options,\n                parent_menu_id: this.parent_menu_id,\n                context: session.user_context,\n            },\n        });\n    },\n});\n\nreturn {\n    NewModelItem: NewModelItem,\n};\n\n});\n", "odoo.define('web_studio.CommonMenuDialog', function (require) {\n\"use strict\";\n\nconst Dialog = require('web.Dialog');\nconst { ModelConfiguratorDialog } = require('web_studio.ModelConfigurator');\nconst StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\n\n\nconst CommonMenuDialog = Dialog.extend(StandaloneFieldManagerMixin, {\n    custom_events: Object.assign({}, Dialog.prototype.custom_events, StandaloneFieldManagerMixin.custom_events, {\n        edit_menu_disable_save: function () {\n            this.$footer.find('.confirm_button').attr(\"disabled\", \"disabled\");\n        },\n        edit_menu_enable_save: function () {\n            this.$footer.find('.confirm_button').removeAttr(\"disabled\");\n        },\n        confirm_options: '_onConfirmOptions',\n        cancel_options: '_onCancelOptions',\n    }),\n\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {function} [params.on_saved] Callback method called upon confirmation\n     *\n     */\n\n    init(parent, params) {\n        this.on_saved = params.on_saved || function () {};\n        this.parent_menu_id = params.parent_menu_id;\n        this.options = {\n            title: this.title,\n            size: 'small',\n        };\n        this._super(parent, this.options);\n        StandaloneFieldManagerMixin.init.call(this);\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Open the ModelConfigurator when the user confirm the creation of a new model\n     *\n     * @private\n     */\n    async _onConfigureModel() {\n        if (!this.el.querySelector('input[name=\"name\"]').value) {\n            this.el.querySelector('label').classList.add('o_studio_error');\n            return;\n        }\n        this.$footer.find('.btn').attr('disabled', '').addClass('disabled');\n        this.modelConfiguratorDialog = new ModelConfiguratorDialog(this, { confirmLabel: this.confirmLabel });\n        this.modelConfiguratorDialog.open();\n    },\n\n    /**\n     * Handle the 'previous' button click on the ModelConfigurator\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n\n    _onCancelOptions(ev) {\n        this.$footer.find('.btn').removeClass('disabled').attr('disabled', null);\n    },\n\n    /**\n     * Handle the confirmation of the ModelConfigurator, save the selected options\n     * and continue the flow.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n\n    async _onConfirmOptions(ev) {\n        this.model_options = Object.entries(ev.data).filter(opt => opt[1].value).map(opt => opt[0]);\n        return this._onSave().then((res) => {\n            this.modelConfiguratorDialog.close();\n            this.close();\n            return res;\n        }).guardedCatch(() =>\n            this.modelConfiguratorDialog.close());\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Creates the new menu.\n     *\n     * @private\n     */\n    _onSave() {\n        this.$footer.find('.btn').attr('disabled', '').addClass('disabled');\n        const name = this.el.querySelector('input').value;\n        return this._doSave(name).then((menu) => {\n            this.on_saved(menu);\n        }).guardedCatch(() => {\n            this.$footer.find('.btn').removeAttr('disabled').removeClass('disabled');\n        });\n    },\n    /**\n     * @private\n     * @param {String} menuName\n     */\n    _doSave(menuName) {\n        \n    },\n});\n\nreturn CommonMenuDialog;\n\n});\n", "odoo.define('web_studio.AbstractEditorManager', function (require) {\n\"use strict\";\n\nvar concurrency = require('web.concurrency');\nvar core = require('web.core');\nvar Widget = require('web.Widget');\n\nvar bus = require('web_studio.bus');\nvar XMLEditor = require('web_studio.XMLEditor');\n\nvar _lt = core._lt;\nvar _t = core._t;\n\nvar AbstractEditorManager = Widget.extend({\n    className: 'o_web_studio_editor_manager',\n    custom_events: {\n        close_xml_editor: '_onCloseXMLEditor',\n        drag_component: '_onDragComponent',\n        node_clicked: '_onNodeClicked',\n        open_xml_editor: '_onOpenXMLEditor',\n        save_xml_editor: '_onSaveXMLEditor',\n        sidebar_tab_changed: '_onSidebarTabChanged',\n        studio_error: '_onStudioError',\n        view_change: '_onViewChange',\n    },\n    error_messages: {\n        wrong_xpath: _lt(\"This operation caused an error, probably because a xpath was broken\"),\n        view_rendering: _lt(\"The requested change caused an error in the view. It could be because a field was deleted, but still used somewhere else.\"),\n    },\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n\n        this.editor = undefined;\n        this.sidebar = undefined;\n        this.sidebarScrollTop = undefined;\n\n        this.mode = 'edition';  // the other mode is 'rendering' in XML editor\n\n        this.operations = [];\n        this.operations_undone = [];\n\n        this.mdp = new concurrency.MutexedDropPrevious();\n\n        bus.on('undo_clicked', this, this._undo);\n        bus.on('redo_clicked', this, this._redo);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return self._instantiateEditor().then(function (editor) {\n                var defs = [];\n                var $editorFragment = $('<div>', {\n                    class: 'o_web_studio_view_renderer',\n                });\n                self.editor = editor;\n                if (self.editor instanceof owl.Component) {\n                    defs.push(self.editor.mount($editorFragment[0]));\n                } else {\n                    defs.push(self.editor.appendTo($editorFragment));\n                }\n                // TODO: is that correct? shouldn't this be done in then the\n                // appendTo\n                $editorFragment.appendTo(self.$el);\n\n                self.sidebar = self._instantiateSidebar();\n                defs.push(self.sidebar.prependTo(self.$el));\n                return Promise.all(defs);\n            });\n        });\n    },\n    /**\n     * @override\n     */\n    destroy: function () {\n        bus.trigger('undo_not_available');\n        bus.trigger('redo_not_available');\n        this._super.apply(this, arguments);\n    },\n    /**\n     * Called each time the view editor manager is attached to the DOM. This is\n     * important for the graph editor, which only renders itself when it is in\n     * the DOM\n     *\n     */\n    on_attach_callback: function () {\n        if (this.editor && this.editor.on_attach_callback) {\n            this.editor.on_attach_callback();\n        }\n        this.isInDOM = true;\n    },\n    /**\n     * Called each time the view editor manager is detached from the DOM.\n     *\n     */\n    on_detach_callback: function () {\n        if (this.editor && this.editor.on_detach_callback) {\n            this.editor.on_detach_callback();\n        }\n        this.isInDOM = false;\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Apply the changes, i.e. the stack of operations on the Studio view.\n     *\n     * @param {Boolean} remove_last_op\n     * @param {Boolean} from_xml\n     * @returns {Promise}\n     */\n    _applyChanges: function (remove_last_op, from_xml) {\n        var self = this;\n\n        var lastOp = this.operations.slice(-1)[0];\n        var lastOpID = lastOp && lastOp.id;\n\n        bus.trigger('toggle_snack_bar', 'saving');\n\n        var def;\n        if (from_xml) {\n            def = this.mdp.exec(this._editViewArch.bind(\n                this,\n                lastOp.view_id,\n                lastOp.new_arch\n            )).guardedCatch(function () {\n                self.trigger_up('studio_error', {error: 'view_rendering'});\n            });\n        } else {\n            def = this.mdp.exec(function () {\n                var serverOperations = [];\n                _.each(self.operations, function (op) {\n                    if (op.type !== 'replace_arch') {\n                        serverOperations.push(_.omit(op, 'id'));\n                    }\n                });\n                var prom = self._editView(\n                    self.view_id,\n                    self.studio_view_arch,\n                    serverOperations\n                );\n                prom.guardedCatch(function () {\n                    self.trigger_up('studio_error', {error: 'wrong_xpath'});\n                    return self._undo(lastOpID, true).then(function () {\n                        return Promise.reject();\n                    });\n                });\n                return prom;\n            });\n        }\n        return def\n            .then(function (result) {\n                if (from_xml) {\n                    self._cleanOperationsStack(lastOp);\n                }\n                if (remove_last_op) { self.operations.pop(); }\n                return self._applyChangeHandling(result, lastOpID, from_xml);\n            })\n            .then(function () {\n                self._updateButtons();\n                if (self.sidebar.state.mode !== 'properties') {\n                    // TODO: the sidebar will be updated by clicking on the node\n                    self._updateSidebar(self.sidebar.state.mode);\n                }\n                bus.trigger('toggle_snack_bar', 'saved');\n            });\n    },\n    /**\n     * To be overriden.\n     *\n     * @param {Object} result\n     * @param {String} [opID]\n     * @param {boolean} [from_xml]\n     * @returns {Promise}\n     */\n    _applyChangeHandling: function (result, opID, from_xml) {\n        return Promise.resolve();\n    },\n    /**\n     * To be overriden.\n     *\n     * @private\n     * @param {Object} lastOp\n     */\n    _cleanOperationsStack: function (lastOp) {\n        this.operations = [];\n        this.operations_undone = [];\n    },\n    /**\n     * @private\n     * @param {Object} op\n     * @returns {Promise}\n     */\n    _do: function (op) {\n        op.id = _.uniqueId('op_');\n        this.operations.push(op);\n        this.operations_undone = [];\n\n        return this._applyChanges(false, op.type === 'replace_arch');\n    },\n    /**\n     * To be overriden.\n     *\n     * @private\n     * @param {String} [mode]\n     * @param {Object} [params]\n     * @returns {Promise<Object>}\n     */\n    _getSidebarState: function (mode, params) {\n        var newState = mode ? {mode: mode} : this.sidebar.state;\n        return Promise.resolve(newState);\n    },\n    /**\n     * To be overriden.\n     *\n     * The point of this function is to receive a list of customize operations\n     * to do.\n     *\n     * @private\n     * @param {Integer} view_id\n     * @param {String} studio_view_arch\n     * @param {Array} operations\n     * @returns {Promise}\n     */\n    _editView: function (view_id, studio_view_arch, operations) {\n        return Promise.resolve();\n    },\n    /**\n     * To be overriden.\n     *\n     * This is used when the view is edited with the XML editor: the whole arch\n     * is replaced by a new one.\n     *\n     * @private\n     * @param {Integer} view_id\n     * @param {String} view_arch\n     * @returns {Promise}\n     */\n    _editViewArch: function (view_id, view_arch) {\n        return Promise.resolve();\n    },\n    /**\n     * To be overriden.\n     *\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    _instantiateEditor: function (params) {\n        return Promise.resolve();\n    },\n    /**\n     * To be overriden.\n     * TODO: should probably have the same signature than instantiateEditor\n     *\n     * @param {Object} state\n     * @returns {Widget} a sidebar instance\n     */\n    _instantiateSidebar: function (state) {\n    },\n    /**\n     * Redo the last operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _redo: function () {\n        if (!this.operations_undone.length) {\n            return;\n        }\n        var op = this.operations_undone.pop();\n        this.operations.push(op);\n\n        return this._applyChanges(false, op.type === 'replace_arch');\n    },\n    /**\n     * Update the undo/redo button according to the operation stack.\n     */\n    _updateButtons: function () {\n        // Undo button\n        if (this.operations.length) {\n            bus.trigger('undo_available');\n        } else {\n            bus.trigger('undo_not_available');\n        }\n\n        // Redo button\n        if (this.operations_undone.length) {\n            bus.trigger('redo_available');\n        } else {\n            bus.trigger('redo_not_available');\n        }\n    },\n    /**\n     * Re-render the sidebar and destroy the old while keeping the scroll\n     * position.\n     * If mode is not specified, the sidebar will be renderered with the same\n     * state.\n     * The sidebar will be detached if the XML editor is displayed.\n     *\n     * @private\n     * @param {String} [mode]\n     * @param {Object} [params]\n     * @returns {Promise}\n     */\n    _updateSidebar: function (mode, params) {\n        var self = this;\n\n        if  (this.sidebar.$el) {\n            // as the sidebar is updated via trigger_up (`sidebar_tab_changed`),\n            // we might want to update a sidebar which wasn't started yet\n\n            // TODO: scroll top is calculated to 'o_web_studio_sidebar_content'\n            this.sidebarScrollTop = this.sidebar.$el.scrollTop();\n        }\n\n        return this._getSidebarState(mode, params).then(function (newState) {\n            var oldSidebar = self.sidebar;\n            var previousState = oldSidebar.getLocalState ? oldSidebar.getLocalState() : undefined;\n            const newSidebar = self._instantiateSidebar(newState, previousState);\n            self.sidebar = newSidebar;\n\n            var fragment = document.createDocumentFragment();\n            return newSidebar.appendTo(fragment).then(function () {\n                oldSidebar.destroy();\n                if (!newSidebar.isDestroyed()) {\n                    newSidebar.$el.prependTo(self.$el);\n                    if (newSidebar.on_attach_callback) {\n                        newSidebar.on_attach_callback();\n                    }\n                    newSidebar.$el.scrollTop(self.sidebarScrollTop);\n                    // the XML editor replaces the sidebar in this case\n                    if (self.mode === 'rendering') {\n                        newSidebar.$el.detach();\n                    }\n                }\n            });\n        });\n    },\n    /**\n     * Undo the last operation.\n     *\n     * @private\n     * @param {String} [opID] unique operation identifier\n     * @param {Boolean} [forget=False]\n     * @returns {Promise}\n     */\n    _undo: function (opID, forget) {\n        if (!this.operations.length) {\n            return Promise.resolve();\n        }\n\n        // find the operation to undo and update the operations stack\n        var op;\n        if (opID) {\n            op = _.findWhere(this.operations, {id: opID});\n            this.operations = _.without(this.operations, op);\n        } else {\n            op = this.operations.pop();\n        }\n\n        if (!forget) {\n            // store the operation in case of redo\n            this.operations_undone.push(op);\n        }\n\n        if (op.type === 'replace_arch') {\n            // as the whole arch has been replace (A -> B),\n            // when undoing it, the operation (B -> A) is added and\n            // removed just after.\n            var undo_op = jQuery.extend(true, {}, op);\n            undo_op.old_arch = op.new_arch;\n            undo_op.new_arch = op.old_arch;\n            this.operations.push(undo_op);\n            return this._applyChanges(true, true);\n        } else {\n            return this._applyChanges(false, false);\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onCloseXMLEditor: function () {\n        this.XMLEditor.destroy();\n        this.XMLEditor = null;\n        this.sidebar.prependTo(this.$el);\n        $('body').removeClass('o_in_studio_xml_editor');\n        this.mode = 'edition';\n    },\n    /**\n     * To be overriden.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onDragComponent: function (ev) {\n    },\n    /**\n     * To be overriden.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onNodeClicked: function (ev) {\n    },\n    /**\n     * @private\n     */\n    _onOpenXMLEditor: function () {\n        var self = this;\n        this.mode = 'rendering';\n\n        this.XMLEditor = new XMLEditor(this, this.view_id, {\n            position: 'left',\n            doNotLoadSCSS: true,\n            doNotLoadJS: true,\n        });\n\n        this.XMLEditor.prependTo(this.$el).then(function () {\n            self.sidebar.$el.detach();\n            $('body').addClass('o_in_studio_xml_editor');\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onSaveXMLEditor: function (ev) {\n        this._do({\n            type: 'replace_arch',\n            view_id: ev.data.view_id,\n            old_arch: ev.data.old_arch,\n            new_arch: ev.data.new_arch,\n        }).then(function () {\n            if (ev.data.on_success) {\n                ev.data.on_success();\n            }\n        }, function () {\n            if (ev.data.on_fail) {\n                ev.data.on_fail();\n            }\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onSidebarTabChanged: function (ev) {\n        this._updateSidebar(ev.data.mode);\n        this.editor.unselectedElements();\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onStudioError: function (ev) {\n        this.displayNotification({ title: _t(\"Error\"), message: this.error_messages[ev.data.error], type: 'danger' });\n    },\n    /**\n     * To be overriden.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onViewChange: function (ev) {\n    },\n});\n\nreturn AbstractEditorManager;\n\n});\n", "odoo.define('web_studio.FieldSelectorDialog', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar _t = core._t;\n\nvar FieldSelectorDialog = Dialog.extend({\n    template: 'web_studio.FieldSelectorDialog',\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} fields\n     * @param {Boolean} show_new\n     */\n    init: function (parent, fields, show_new) {\n        // set the field name because key will be lost after sorting dict\n        this.orderered_fields = _.sortBy(\n            _.mapObject(fields, function (attrs, fieldName) {\n                return {\n                    name: fieldName,\n                    string: attrs.string\n                };\n            }), 'string');\n        this.show_new = show_new;\n        this.debug = config.isDebug();\n\n        var options = {\n            title: _t('Select a Field'),\n            buttons: [{\n                text: _t(\"Confirm\"),\n                classes: 'btn-primary',\n                click: this._onConfirm.bind(this),\n                close: true\n            }, {\n                text: _t(\"Cancel\"),\n                click: this._onCancel.bind(this),\n                close: true\n            }],\n        };\n        this._super(parent, options);\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onConfirm: function () {\n        var selectedField = this.$('select[name=\"field\"]').val();\n        this.trigger('confirm', selectedField);\n    },\n    /**\n     * @private\n     */\n    _onCancel: function () {\n        this.trigger('cancel');\n    },\n});\n\n\nreturn FieldSelectorDialog;\n\n});\n", "odoo.define('web_studio.NewFieldDialog', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar relational_fields = require('web.relational_fields');\nvar ModelFieldSelector = require('web.ModelFieldSelector');\nvar StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\n\nvar _t = core._t;\nvar qweb = core.qweb;\nvar Many2one = relational_fields.FieldMany2One;\n\n// TODO: refactor this file\n\nvar NewFieldDialog = Dialog.extend(StandaloneFieldManagerMixin, {\n    template: 'web_studio.NewFieldDialog',\n    events: {\n        'keyup .o_web_studio_selection_new_value > input': '_onAddSelectionValue',\n        'click .o_web_studio_edit_selection_value': '_onEditSelectionValue',\n        'click .o_web_studio_remove_selection_value': '_onRemoveSelectionValue',\n        'click .o_web_studio_add_selection_value': '_onAddSelectionValue',\n        'click .o_web_studio_clear_selection_value': '_onClearSelectionValue',\n        'blur .o_web_studio_selection_editor .o_web_studio_selection_input': '_onSelectionInputBlur',\n    },\n    /**\n     * @constructor\n     * @param {String} model_name\n     * @param {Object} field\n     * @param {Object} fields\n     * @param {Object[]} field_chain - list of the initial field chain parts\n     */\n    init: function (parent, model_name, field, fields, field_chain) {\n        this.model_name = model_name;\n        this.type = field.type;\n        this.field = field;\n        this.fieldChain = field_chain || [];\n        this.order = field.order;\n        this.followRelations = field.followRelations || function (field) {return true;};\n        this.filter = field.filter || function (field) {return true;};\n        this.filters = field.filters;\n\n        if (this.type === 'selection') {\n            this.selection = this.field.selection && this.field.selection.slice() || [];\n        }\n\n        this.fields = fields;\n        var options = _.extend({\n            title: _t('Field Properties'),\n            size: 'small',\n            buttons: [{\n                text: _t(\"Confirm\"),\n                classes: 'btn-primary',\n                click: this._onSave.bind(this),\n            }, {\n                text: _t(\"Cancel\"),\n                close: true,\n            }],\n        }, options);\n        this._super(parent, options);\n        StandaloneFieldManagerMixin.init.call(this);\n    },\n    /**\n     * @override\n     */\n    renderElement: function () {\n        this._super.apply(this, arguments);\n\n        if (this.type === 'selection') {\n           this.$('.o_web_studio_selection_editor').sortable({\n                axis: 'y',\n                containment: '.o_web_studio_field_dialog_form',\n                items: '> li',\n                helper: 'clone',\n                handle: '.input-group',\n                opacity: 0.6,\n                stop: this._resequenceSelection.bind(this),\n           });\n       }\n    },\n    /**\n     * @override\n     */\n    start: function() {\n        var self = this;\n        var defs = [];\n        var record;\n        var options = {\n            mode: 'edit',\n        };\n\n        this.$modal.addClass('o_web_studio_field_modal');\n\n        if (this.type === 'selection') {\n            // Focus on the input responsible for adding new selection value\n            this.opened().then(function () {\n                self.$('.o_web_studio_selection_new_value > input').focus();\n            });\n        } else if (this.type === 'one2many') {\n            defs.push(this.model.makeRecord('ir.model.fields', [{\n                name: 'field',\n                relation: 'ir.model.fields',\n                type: 'many2one',\n                domain: [['relation', '=', this.model_name], ['ttype', '=', 'many2one'], ['model_id.abstract', '=', false]],\n            }], {\n                'field': {\n                    can_create: false,\n                }\n            }).then(function (recordID) {\n                record = self.model.get(recordID);\n                self.many2one_field = new Many2one(self, 'field', record, options);\n                self._registerWidget(recordID, 'field', self.many2one_field);\n                self.many2one_field.nodeOptions.no_create_edit = !config.isDebug();\n                self.many2one_field.appendTo(self.$('.o_many2one_field'));\n            }));\n        } else if (_.contains(['many2many', 'many2one'], this.type)) {\n            defs.push(this.model.makeRecord('ir.model', [{\n                name: 'model',\n                relation: 'ir.model',\n                type: 'many2one',\n                domain: [['transient', '=', false], ['abstract', '=', false]]\n            }]).then(function (recordID) {\n                record = self.model.get(recordID);\n                self.many2one_model = new Many2one(self, 'model', record, options);\n                self._registerWidget(recordID, 'model', self.many2one_model);\n                self.many2one_model.nodeOptions.no_create_edit = !config.isDebug();\n                self.many2one_model.appendTo(self.$('.o_many2one_model'));\n            }));\n        } else if (this.type === 'related') {\n            // This restores default modal height (bootstrap) and allows field selector to overflow\n            this.$el.css(\"overflow\", \"visible\").closest(\".modal-dialog\").css(\"height\", \"auto\");\n            var field_options = {\n                order: this.order,\n                filter: this.filter,\n                followRelations: this.followRelations,\n                fields: this.fields, //_.filter(this.fields, this.filter),\n                readonly: false,\n                filters: _.extend({}, this.filters, {searchable: false}),\n            };\n            this.fieldSelector = new ModelFieldSelector(this, this.model_name, this.fieldChain, field_options);\n            defs.push(this.fieldSelector.appendTo(this.$('.o_many2one_field')));\n        }\n\n        defs.push(this._super.apply(this, arguments));\n        return Promise.all(defs);\n    },\n\n    /**\n     * @private\n     * @param {Event} e\n     */\n    _resequenceSelection: function () {\n        var self = this;\n        var newSelection = [];\n        this.$('.o_web_studio_selection_editor li').each(function (index, u) {\n            var value = u.dataset.value;\n            var string = _.find(self.selection, function(el) {\n                return el[0] === value;\n            })[1];\n            newSelection.push([value, string]);\n        });\n        this.selection = newSelection;\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Event} e\n     */\n    _onAddSelectionValue: function (e) {\n        if (e.type === \"keyup\" && e.which !== $.ui.keyCode.ENTER) { return; }\n\n        var $input = this.$(\".o_web_studio_selection_new_value input\");\n        var string = $input.val().trim();\n\n        if (string && !_.find(this.selection, function(el) {return el[1] === string; })) {\n            // add a new element\n            this.selection.push([string, string]);\n        }\n        this.renderElement();\n        this.$('.o_web_studio_selection_new_value > input').focus();\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onEditSelectionValue: function (ev) {\n        var self = this;\n        var $btn = $(ev.currentTarget);\n\n        if (config.isDebug()) {\n            var val = $btn.closest('li')[0].dataset.value;  // use dataset to always get a string\n            var index = _.findIndex(this.selection, function (el) {return el[0] === val;});\n            new Dialog(this, {\n                title: _t('Edit Value'),\n                size: 'small',\n                $content: $(qweb.render('web_studio.SelectionValues.edit', {\n                    element: self.selection[index],\n                })),\n                buttons: [\n                    {text: _t('Confirm'), classes: 'btn-primary', close: true, click: function () {\n                        var newValue = this.$('input#o_selection_value').val() || val;\n                        var newString = this.$('input#o_selection_label').val();\n                        self.selection[index] = [newValue, newString];\n                        self.renderElement();\n                    }},\n                    {text: _t('Close'), close: true},\n                ],\n            }).open();\n        } else {\n            $btn.toggleClass('fa-check fa-pencil-square-o');\n            var $input = $btn.closest('li').find('.o_web_studio_selection_input.d-none');\n            var $span = $input.siblings('.o_web_studio_selection_label');\n            // Toggle span and input, and set the initial value for input\n            $input.val($span.toggleClass('d-none').text().trim()).toggleClass('d-none').focus();\n        }\n    },\n    /**\n     * Removes a selection value from the widget\n     * The python is in charge of determining whether some records\n     * have a deleted value, and raises if this is the case\n     *\n     * @private\n     * @param {Event} e\n     */\n    _onRemoveSelectionValue: function (e) {\n        var val = $(e.target).closest('li')[0].dataset.value;\n        var element = _.find(this.selection, function(el) {return el[0] === val; });\n        var index = this.selection.indexOf(element);\n        if (index >= 0) {\n            this.selection.splice(index, 1);\n        }\n        this.renderElement();\n    },\n    /**\n     * @private\n     */\n    _onClearSelectionValue: function () {\n        this.$('.o_web_studio_selection_input').val(\"\").focus();\n    },\n    /**\n     * @private\n     */\n    _onSave: function () {\n        var values = {};\n        if (this.type === 'one2many') {\n            if (!this.many2one_field.value) {\n                this.trigger_up('warning', {title: _t('You must select a related field')});\n                return;\n            }\n            values.relation_field_id = this.many2one_field.value.res_id;\n        } else if (_.contains(['many2many', 'many2one'], this.type)) {\n            if (!this.many2one_model.value) {\n                this.trigger_up('warning', {title: _t('You must select a relation')});\n                return;\n            }\n            values.relation_id = this.many2one_model.value.res_id;\n            values.field_description = this.many2one_model.m2o_value;\n        } else if (this.type === 'selection') {\n            var newSelection = this.$('.o_web_studio_selection_new_value > input').val();\n            if (newSelection) {\n                this.selection.push([newSelection, newSelection]);\n            }\n            values.selection = JSON.stringify(this.selection);\n        } else if (this.type === 'related') {\n            var selectedField = this.fieldSelector.getSelectedField();\n            if (!selectedField) {\n                this.trigger_up('warning', {title: _t('You must select a related field')});\n                return;\n            }\n            values.string = selectedField.string;\n            values.model = selectedField.model;\n            values.related = this.fieldSelector.chain.join('.');\n            values.type = selectedField.type;\n            values.readonly = true;\n            values.copy = false;\n            values.store = selectedField.store;\n            if (_.contains(['many2one', 'many2many'], selectedField.type)) {\n                values.relation = selectedField.relation;\n            } else if (selectedField.type === 'one2many') {\n                values.relational_model = selectedField.model;\n            } else if (selectedField.type === 'selection') {\n                values.selection = selectedField.selection;\n            } else if (selectedField.type === 'monetary') {\n                // find the associated currency field on the related model in\n                // case there is no currency field on the current model\n                var currencyField = _.find(_.last(this.fieldSelector.pages), function (el) {\n                    return el.name === 'currency_id' || el.name === 'x_currency_id';\n                });\n                if (currencyField) {\n                    var chain = this.fieldSelector.chain.slice();\n                    chain.splice(chain.length - 1, 1, currencyField.name);\n                    values._currency = chain.join('.');\n                }\n            }\n\n            if (_.contains(['one2many', 'many2many'], selectedField.type)) {\n                values.store = false;\n            }\n        }\n        this.trigger('field_default_values_saved', values);\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onSelectionInputBlur: function (ev) {\n        var $input = $(ev.currentTarget);\n        var val = $input.closest('li').data('value');\n        var index = _.findIndex(this.selection, function (el) { return el[0] === val; });\n        this.selection[index][1] = $input.val();\n        this.renderElement();\n    },\n});\n\nreturn NewFieldDialog;\n\n});\n", "odoo.define('web_studio.XMLEditor', function (require) {\n'use strict';\n\nvar AceEditor = require('web_editor.ace');\n\n/**\n * Extend the default view editor so that views are saved thanks to web studio and not\n * default RPC. Also notifies studio when the editor is closed.\n */\nreturn AceEditor.extend({\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    do_hide: function () {\n        this.trigger_up(\"close_xml_editor\");\n        this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    _isCustomResource(resID) {\n        if (this.currentType === \"xml\") {\n            return _.str.startsWith(this.views[resID].xml_id, 'studio_customization');\n        } else {\n            return this._super(...arguments);\n        }\n    },\n    /**\n     * @override\n     */\n    _saveView: function (session) {\n        var self = this;\n        var view = this.views[session.id];\n        var old_arch = view.arch;\n        var new_arch = session.text;\n\n        return new Promise(function (resolve, reject) {\n            self.trigger_up('save_xml_editor', {\n                view_id: session.id,\n                old_arch: old_arch,\n                new_arch: new_arch,\n                on_success: function () {\n                    self._toggleDirtyInfo(session.id, \"xml\", false);\n                    view.arch = new_arch;\n                    resolve();\n                },\n                on_fail: reject,\n            });\n        });\n    },\n});\n\n});\n", "odoo.define('web_studio.ReportEditor', function (require) {\n\"use strict\";\n\nvar core = require('web.core');\nvar Widget = require('web.Widget');\n\nvar EditorMixin = require('web_studio.EditorMixin');\n\nvar _t = core._t;\n\nvar ReportEditor = Widget.extend(EditorMixin, {\n    template: 'web_studio.ReportEditor',\n    nearest_hook_tolerance: 500,\n    events: _.extend({}, Widget.prototype.events, {\n        'click': '_onClick',\n    }),\n\n    /**\n     * @override\n     *\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {Object} params.nodesArchs\n     * @param {String} params.reportHTML\n     * @param {Object} [params.paperFormat]\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n\n        this.nodesArchs = params.nodesArchs;\n        this.reportHTML = params.reportHTML;\n\n        this.paperFormat = params.paperFormat || {};\n\n        this.$content = $();\n        this.$noContentHelper = $();\n\n        this.selectedNode = null;\n        this.$targetHighlight = $();\n\n        this.$dropZone = $();\n        this._onUpdateContentId = _.uniqueId('_processReportPreviewContent');\n        this.isDragging = false;\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        this.$iframe = this.$('iframe');\n        this.$iframe.one('load', this._updateContent.bind(this));\n        return this._super.apply(this, arguments);\n    },\n    /**\n     * @override\n     */\n    destroy: function () {\n        window.top[this._onUpdateContentId] = null;\n        delete window.top[this._onUpdateContentId];\n        if (this.$content) {\n            this.$content.off('click');\n            this.$content.off('load');\n        }\n        return this._super.apply(this, arguments);\n    },\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * Start dragging the component, notify that no cleanup should occur\n     * because a drag operation is ongoing.\n     */\n    beginDragComponent: function (component) {\n        this.isDragging = true;\n        if (this.$content.find('.o_web_studio_hook').length === 0) {\n            // for the case where computing the hooks takes long and\n            // the user is too fast with the mouse\n            this._prepareHooksOnIframeBeforeDrag(component);\n        }\n    },\n    beginPreviewDragComponent: function (component) {\n        if (this.isDragging) {\n            return;\n        }\n        this._prepareHooksOnIframeBeforeDrag(component);\n    },\n    /**\n    * Insert Studio hooks in the dom iframe, according to which building block\n    * is being dragged.\n    *\n    * @param {Component} component the building block being dragged\n    */\n    _prepareHooksOnIframeBeforeDrag: function (component) {\n        var self = this;\n\n        this._cleanHooks();\n        this.$noContentHelper.remove();\n\n        var dropIn = component.dropIn;\n        if (component.dropColumns && component.addEmptyRowsTargets) {\n            dropIn = (dropIn ? dropIn + ',' : '') + '.page > .row > div:empty';\n        }\n        if (dropIn) {\n            var inSelectors = dropIn.split(component.selectorSeparator || ',');\n            _.each(inSelectors, function (selector) {\n                var $target = self.$content.find(selector + \"[data-oe-xpath]\");\n                _.each($target, function (node) {\n                    if (!$(node).data('node')) {\n                        // this is probably a template not present in\n                        // reportViews so no hook should be attached to it\n                        // TODO: should the corresponding view be branded\n                        // (server-side) in this case (there won't be any\n                        // data-oe-xpath then)?\n                        return;\n                    }\n                    self._createHookOnNodeAndChildren($(node), component);\n                });\n            });\n        }\n        if (component.dropColumns) {\n            // when dropping the component, it should have a specific (bootstrap) column structure\n            // we will create this structure or complete it if it already exist\n            var $hook = self._createHook($('<div/>'), component);\n            var $gridHooks = $('<div class=\"row o_web_studio_structure_hook\"/>');\n            _.each(component.dropColumns, function (column, index) {\n                var $col = $('<div class=\"offset-' + column[0] + ' col-' + column[1] + '\"/>');\n                $col.append($hook.clone().attr('data-oe-index', index));\n                $gridHooks.append($col);\n            });\n\n            var $page = this.$content.find('.page');\n            var $children = $page.children().not('.o_web_studio_hook,p:not([data-oe-id])');\n\n            if ($children.length) {\n                $gridHooks.find('.o_web_studio_hook').data('oe-node', $children.first()).data('oe-position', 'before');\n                $children.first().before($gridHooks);\n\n                _.each($children, function (child) {\n                    var $child = $(child);\n                    var $newHook = $gridHooks.clone();\n                    $newHook.find('.o_web_studio_hook').data('oe-node', $child).data('oe-position', 'after');\n                    $child.after($newHook);\n                });\n            } else {\n                $gridHooks.find('.o_web_studio_hook').data('oe-node', $page).data('oe-position', 'inside');\n                $page.prepend($gridHooks);\n            }\n\n            this.$content.find('.o_web_studio_structure_hook + .o_web_studio_hook').remove();\n            this.$content.find('.o_web_studio_structure_hook').prev('.o_web_studio_hook').remove();\n        }\n        this.$content.find('.o_web_studio_hook + .o_web_studio_hook').remove();\n        this.$dropZone = this.$content.find('.o_web_studio_hook');\n\n        this.$dropZoneStructure = this.$content.find('.o_web_studio_structure_hook');\n        this.$dropZoneStructure.removeClass('.o_web_studio_nearest').each(function () {\n            $(this).children().children('.o_web_studio_hook:only-child').data('height', $(this).height() + 'px');\n        });\n\n        // compute the size box with the nearest rendering\n        this._computeNearestHookAndShowIt();\n\n        // association for td and colspan\n        this.$dropZone.filter('th, td').each(function (_, item) {\n            var $item = $(item);\n            var $node = $item.data('oe-node');\n            var colspan = +$node.data('colspan');\n            if (colspan > 1) {\n                $node.attr('colspan', colspan * 2 - 1);\n            }\n        });\n    },\n    /**\n     * When a component is being dragged in the iframe, this function computes\n     * which Studio hook(s) are the nearest.\n     *\n     * @param {Component} component\n     * @param {integer} x\n     * @param {integer} y\n     */\n    dragComponent: function (component, x, y) {\n        this.isDragging = true;\n        this.$dropZone\n            .filter('.o_web_studio_nearest_hook')\n            .removeClass('o_web_studio_nearest_hook')\n            .closest(this.$dropZoneStructure).each(function () {\n                $(this).children().css('height', '').children('.o_web_studio_hook:only-child').css('height', '');\n            });\n\n        this.$dropZoneStructure.removeClass('o_web_studio_nearest');\n\n        var bound = this.$iframe[0].getBoundingClientRect();\n        var isInIframe = (x >= bound.left && x <= bound.right) && (y >= bound.top && y <= bound.bottom);\n        if (!isInIframe) {\n            return;\n        }\n\n        // target with position of the box center\n        _.each(this.dropPosition, function (box) {\n            box.dist = Math.sqrt(Math.pow(box.centerY - (y - bound.top), 2) + Math.pow(box.centerX - (x - bound.left), 2));\n        });\n        this.dropPosition.sort(function (a, b) {\n            return a.dist - b.dist;\n        });\n\n        if (!this.dropPosition[0] || this.dropPosition[0].dist > this.nearest_hook_tolerance) {\n            return;\n        }\n\n        var $nearestHook = $(this.dropPosition[0].el);\n\n        $nearestHook\n            .addClass('o_web_studio_nearest_hook')\n            .closest(this.$dropZoneStructure)\n            .addClass('o_web_studio_nearest');\n\n        if (!$nearestHook.data('oe-node') || !$nearestHook.data('oe-node').data('oe-id')) {\n            return;\n        }\n\n        var $node = $nearestHook.data('oe-node');\n        var id = $node.data('oe-id');\n        var xpath = $node.data('oe-xpath');\n        var position = $nearestHook.data('oe-position');\n        var index = $nearestHook.data('oe-index');\n\n        var td = $node.is('td, th');\n        var reg, replace;\n        if (td) {\n            reg = /^(.*?)\\/(thead|tbody|tfoot)(.*?)\\/(td|th)(\\[[0-9]+\\])?/;\n            replace = td && position === 'inside' ? '$1/$2/tr/td' : '$1/tr/td';\n            xpath = xpath.replace(reg, replace);\n        }\n\n        // select all dropzone with the same xpath\n        var $nearestHooks = this.$dropZone.filter(function () {\n            var $hook = $(this);\n            var $node = $hook.data('oe-node');\n            return $hook.data('oe-position') === position &&\n                $hook.data('oe-index') === index &&\n                $node.data('oe-id') === id &&\n                (td ? $node.data('oe-xpath').replace(reg, replace) : $node.data('oe-xpath')) === xpath;\n        });\n\n        if (td) {\n            var pos = $nearestHook.data('oe-node').data('td-position-' + (position === 'before' ? 'before' : 'after'));\n            $nearestHooks = $nearestHooks.filter(function () {\n                var $node = $(this).data('oe-node');\n                return $node.data('td-position-' + (position === 'before' ? 'before' : 'after')) === pos;\n            });\n        }\n\n        $nearestHooks.addClass('o_web_studio_nearest_hook');\n    },\n    /**\n     * When a component has been dropped in the iframe, we genrate the changes\n     * in the view and clean the hooks.\n     *\n     * @param {Component} component\n     */\n    dropComponent: function (component) {\n        this.isDragging = false;\n        var $nearestHooks = this.$dropZone.filter('.o_web_studio_nearest_hook');\n        var targets = [];\n\n        // targets need to contain all the targets that are unique (oe-id, oe-xpath)\n        $nearestHooks.get().forEach(function (nearHook) {\n            var $active = $(nearHook);\n            var alreadyAdded = false;\n            var nodeData = $active.data('oe-node').data('node');\n\n            for (var i = 0; i < targets.length; i++) {\n                if (targets[i].node.attrs['data-oe-id'] === nodeData.attrs['data-oe-id'] &&\n                    targets[i].node.attrs['data-oe-xpath'] === nodeData.attrs['data-oe-xpath']) {\n                    alreadyAdded = true;\n                }\n            }\n            if (!alreadyAdded) {\n                targets.push({\n                    node: nodeData,\n                    position: $active.data('oe-position'),\n                    data: $active.data(),\n                });\n            }\n        });\n\n        if (targets.length) {\n            this.trigger_up('view_change', {\n                component: component,\n                fail: this._cleanHooks.bind(this),\n                targets: targets,\n                operation: {\n                    type: 'add',\n                    position: $nearestHooks.first().data('oe-position'),\n                },\n            });\n        } else {\n            this._cleanHooks();\n        }\n    },\n\n    endPreviewDragComponent: function (component) {\n        this._cleanHooks();\n    },\n    /**\n     * Get the context associated to a node.\n     *\n     * @param {Object} initialNode\n     * @returns {Object}\n     */\n    getNodeContext: function (initialNode) {\n        var node = initialNode;\n        var $nodes = this._findAssociatedDOMNodes(node);\n        while (!$nodes.length && node.parent) {\n            var index = node.parent.children.indexOf(node);\n            for (index; index > 0; index--) {\n                $nodes = this._findAssociatedDOMNodes(node.parent.children[index]);\n                if ($nodes.length) {\n                    break;\n                }\n            }\n            if (!$nodes.length) {\n                node = node.parent;\n            }\n        }\n        if (!$nodes.length) {\n            $nodes = this.$content.find('*[data-oe-xpath]');\n        }\n\n        return $nodes.data('oe-context');\n    },\n    /**\n     * Highlight (shows a red arrow on) a DOM node.\n     *\n     * @param {Object} node\n     */\n    highlight: function (node) {\n        if (!this.$highlight) {\n            // an arrow that helps understanding which DOM element is being edited\n            this.$highlight = $('<span class=\"o_web_studio_report_highlight\"/>');\n            this.$content.find('body').prepend(this.$highlight);\n        }\n\n        if (this.$targetHighlight.data('node') !== this.selectedNode) {\n            // do not remove the highlight on the clicked node\n            this.$targetHighlight.removeClass('o_web_studio_report_selected');\n        }\n\n        var $nodes = this._findAssociatedDOMNodes(node);\n        if ($nodes && $nodes.length) {\n            this.$targetHighlight = $nodes.addClass('o_web_studio_report_selected');\n            var position = this.$targetHighlight.offset();\n            this.$highlight\n                .css({\n                    top: position.top + 'px',\n                    left: position.left + 'px',\n                    bottom: position.top < 50 ? '0' : 'auto',\n                })\n                .toggleClass('o_web_studio_report_highlight_left', position.left < 50)\n                .toggleClass('o_web_studio_report_highlight_top', position.top < 50)\n                .show();\n        } else {\n            this.$highlight.hide();\n        }\n    },\n    /**\n     * Selects the given node if it's not already selected and deselects\n     * previously selected one.\n     *\n     * @private\n     * @param {Object} node\n     */\n    selectNode: function (node) {\n        if (this.selectedNode) {\n            if (this.selectedNode === node) {\n                return;\n            }\n            var $oldSelectedNodes = this._findAssociatedDOMNodes(this.selectedNode);\n            $oldSelectedNodes.removeClass('o_web_studio_report_selected');\n        }\n\n        this.selectedNode = node;\n        var $nodesToHighlight = this._findAssociatedDOMNodes(this.selectedNode);\n        $nodesToHighlight.addClass('o_web_studio_report_selected');\n    },\n    /**\n     * @override\n     */\n    unselectedElements: function () {\n        var $nodes = this._findAssociatedDOMNodes(this.selectedNode);\n        $nodes.removeClass('o_web_studio_report_selected');\n        this.selectedNode = null;\n    },\n    /**\n     * Update the iframe content with a new HTML description.\n     *\n     * @param {Object} nodesArchs\n     * @param {String} reportHTML\n     * @returns {Promise}\n     */\n    update: function (nodesArchs, reportHTML) {\n        var self = this;\n        this.nodesArchs = nodesArchs;\n        this.reportHTML = reportHTML;\n\n        this.$dropZone = $();\n\n        return this._updateContent().then(function () {\n            if (self.selectedNode) {\n                var $nodes = self._findAssociatedDOMNodes(self.selectedNode);\n                if ($nodes.length) {\n                    $nodes.first().click();\n                } else {\n                    self.selectedNode = null;\n                    self.trigger_up('sidebar_tab_changed', {\n                        mode: 'new',\n                    });\n                }\n            }\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Clean displayed hooks and reset colspan on modified nodes.\n     *\n     * @private\n     */\n    _cleanHooks: function () {\n        if (this.isDragging) {\n            return;\n        }\n\n        this.$dropZone.filter('th, td').each(function () {\n            var $node = $(this).data('oe-node');\n            if ($node) {\n                var colspan = $node.data('colspan');\n                if (colspan) {\n                    $node.attr('colspan', colspan);\n                }\n            }\n        });\n        this.$content.find('.o_web_studio_hook').remove();\n        this.$content.find('.o_web_studio_structure_hook').remove();\n\n        this._setNoContentHelper();\n    },\n    /**\n     * Create hook on target and compute its size.\n     *\n     * @private\n     * @param {jQuery} $node report dom node that should be hooked onto\n     * @param {Object} sidebar component currently being dragged\n     */\n    _createHookOnNodeAndChildren: function ($node, component) {\n        var $hook = this._createHook($node, component);\n        var $newHook = $hook.clone();\n        var $children = $node.children()\n            .not('.o_web_studio_hook,p:not([data-oe-id])')\n\n        // display the hook with max height of this sibling\n        if ($children.length === 1 && $children.is('td[colspan=\"99\"]')) {\n            return;\n        }\n        if ($children.length) {\n            if (component.hookAutoHeight) {\n                var height = Math.max.apply(Math, $children.map(function () { return $(this).height(); }));\n                $newHook.data('height', height + 'px');\n                $newHook.css('height', height + 'px');\n            }\n            $newHook.data('oe-node', $children.first()).data('oe-position', 'before');\n            $children.first().before($newHook);\n\n            $children.each(\n                /* allows to drop besides each children */\n                function (_, childNode) {\n                    var $childNode = $(childNode);\n                    var $newHook = $hook.clone().data('oe-node', $childNode).data('oe-position', 'after');\n                    if (component.hookAutoHeight) {\n                        $newHook.data('height', height + 'px');\n                        $newHook.css('height', height + 'px');\n                    }\n                    $childNode.after($newHook);\n                });\n        } else if ($node.text() &&\n                    $node[0].tagName.toLowerCase() !== 'th' &&\n                    $node[0].tagName.toLowerCase() !== 'td') {\n                    // in tables, we cannot add span hooks else it breaks the layout\n            if (component.hookAutoHeight) {\n                $newHook.data('height', $node.height() + 'px');\n                $newHook.css('height', $node.height() + 'px');\n            }\n            $node.before($newHook.clone().data('oe-node', $node).data('oe-position', 'before'));\n            $node.after($newHook.clone().data('oe-node', $node).data('oe-position', 'after'));\n        }\n        else {\n            $newHook.data('oe-node', $node).data('oe-position', 'inside');\n            $node.append($newHook);\n        }\n    },\n    _computeNearestHookAndShowIt: function () {\n        var self = this;\n        this.dropPosition = [];\n        var dropZone = this.$dropZone.get();\n        dropZone.reverse();\n        _.each(dropZone, function (node) {\n            var $node = $(node);\n            var box = node.getBoundingClientRect();\n            box.el = node;\n            box.centerY = (box.top + box.bottom) / 2;\n            box.centerX = (box.left + box.right) / 2;\n            self.dropPosition.push(box);\n        });\n    },\n    /**\n     * Recursively parses the DOM of the report and add the `data` and `attributes` on every DOM nodes,\n     * according to the qWeb template that generated the report.\n     *\n     * After this function, every node in the DOM and in memory will have access to their context\n     *\n     * @private\n     */\n    _connectNodes: function () {\n        var self = this;\n        var nodesNotInView = [];\n\n        function connectNodes(node) {\n            if (!node.attrs) {\n                return;\n            }\n            var $nodes = self._findAssociatedDOMNodes(node);\n            $nodes.data('node', node);\n            node.$nodes = $nodes;\n            if ($nodes.length) {\n                node.context = $nodes.data('oe-context');\n            } else {\n                nodesNotInView.push(node);\n            }\n\n            _.each(node.attrs, function (value, key) {\n                if ($nodes.attr(key) === undefined) {\n                    $nodes.attr(key, value);\n                }\n            });\n            _.each(node.children, connectNodes);\n        }\n        _.each(this.nodesArchs, connectNodes);\n\n\n        function connectContextOrder(dom, contextOrder) {\n            var $node = $(dom);\n            var newOrder = contextOrder.slice();\n            var node = $node.data('node');\n\n            if (node) {\n                if (node.contextOrder) {\n                    return node.contextOrder;\n                }\n                newOrder = node.contextOrder = _.uniq(contextOrder.concat(_.keys(node.context)));\n            }\n\n            var children = $node.children().get();\n            for (var k = 0; k < children.length; k++) {\n                newOrder = connectContextOrder(children[k], newOrder);\n            }\n            return newOrder;\n        }\n\n        var children = this.$content.children().get();\n        for (var k = 0; k < children.length; k++) {\n            connectContextOrder(children[k], []);\n        }\n\n        var bodyContext = this.$content.find('html').data('oe-context');\n        _.each(nodesNotInView, function (node) {\n            node.context = node.parent && node.parent.context || bodyContext;\n        });\n    },\n    /**\n     * @private\n     * @param {jQuery} $target\n     * @param {Component} component\n     * @returns {jQuery}\n     */\n    _createHook: function ($target, component) {\n        var firstChild = $target.children().get(0);\n        var hookTag = ((firstChild && firstChild.tagName) || 'div').toLocaleLowerCase();\n        if (!$target.is('tr') && component.hookTag) {\n            hookTag = component.hookTag;\n        }\n        if (hookTag === 'table') {\n            hookTag = 'div';\n        }\n        var $hook = $('<' + hookTag + ' class=\"o_web_studio_hook\"/>');\n        if ($target.hasClass('row')) {\n            $hook.addClass('col-3');\n        }\n        if (component.hookClass) {\n            $hook.addClass(component.hookClass);\n        }\n        return $hook;\n    },\n    /**\n     * finds all the DOM nodes that share the same context as the node in parameter.\n     * Example, all the cells of the same column are sharing the same context: they come from the same report template.\n     *\n     * @private\n     * @param {Object} node qWeb node\n     * @returns {jQuery} associated DOM nodes\n     */\n    _findAssociatedDOMNodes: function (node) {\n        if (node) {\n            return this.$content.find('[data-oe-id=\"' + node.attrs['data-oe-id'] + '\"][data-oe-xpath=\"' + node.attrs['data-oe-xpath'] + '\"]');\n        } else {\n            return $();\n        }\n    },\n    /**\n     * takes the content of the report preview (in the iframe) to\n     * - adds all the node meta-data\n     * - ensure its size is correct\n     * - add meta-data about colspan to make the drag&drop easier\n     * @private\n     */\n    _processReportPreviewContent: function () {\n        this.$content = this.$('iframe').contents();\n        this.$content.off('click').on('click', this._onContentClick.bind(this));\n        this._connectNodes();\n        this.$('.o_web_studio_loader').hide();\n        this._resizeIframe();\n\n        // association for td and colspan\n        this.$content.find('tr').each(function () {\n            var $tr = $(this);\n            var $tds = $tr.children();\n            var lineMax = 0;\n            $tds.each(function () {\n                var $td = $(this);\n                var colspan = +$td.attr('colspan');\n                $td.data('colspan', colspan || 1);\n                $td.data('td-position-before', lineMax);\n                lineMax += colspan || 1;\n                $td.data('td-position-after', lineMax);\n            });\n        });\n\n        this._setNoContentHelper();\n    },\n    /**\n     * @private\n     */\n    _resizeIframe: function () {\n        var self = this;\n        // zoom content from 96 (default browser DPI) to paperformat DPI\n        var zoom = 96 / this.paperFormat.dpi;\n        self.$content.find('main:first').children().each(function () {\n            // scale each section to fit DPI\n            var sectionZoom = zoom;\n            if (!self.paperFormat.disable_shrinking) {\n                // check if needs shrinking to fit page (wkhtmltopdf enable-smart-shrinking)\n                // only applies if option is not manually disabled on the paperformat (see 'disable_shrinking')\n                sectionZoom = Math.min(zoom, $(this).width() / this.scrollWidth);\n            }\n            $(this).css({zoom: sectionZoom});\n        });\n        // WHY --> so that after the load of the iframe, if there are images,\n        // the iframe height is recomputed to the height of the content images included\n        self.$iframe[0].style.height = self.$iframe[0].contentWindow.document.body.scrollHeight + 'px';\n\n        // TODO: it seems that the paperformat doesn't exactly do that\n        // this.$content.find('.header').css({\n        //     'margin-bottom': (this.paperFormat.header_spacing || 0) + 'mm',\n        // });\n        // TODO: won't be pretty if the content is larger than the format\n        this.$content.find('.footer').css({\n            'position': 'fixed',\n            'bottom': '0',\n            'width': this.$content.find('.page').css('width'),\n        });\n\n        this.$content.find('html')[0].style.overflow = 'hidden';\n\n        // set the size of the iframe\n        $(this.$content).find(\"img\").on(\"load\", function () {\n            self.$iframe[0].style.height = self.$iframe[0].contentWindow.document.body.scrollHeight + 'px';\n        });\n    },\n    /**\n     * @private\n     */\n    _setNoContentHelper: function () {\n        var $page = this.$content.find('div.page');\n        if ($page.length && !$page.children().length) {\n            this.$noContentHelper = $('<div/>', {\n                class: 'o_no_content_helper',\n                text: _t('Drag building block here'),\n            });\n            $page.append(this.$noContentHelper);\n        }\n    },\n    /**\n     * Update the iframe content.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _updateContent: function () {\n        var self = this;\n        this.$content = this.$iframe.contents();\n        var reportHTML = this.reportHTML;\n\n        var $main = this.$content.find('main:first');\n        if ($main.length) {\n            $main.replaceWith($(reportHTML).find('main:first'));\n            this._processReportPreviewContent();\n            return Promise.resolve();\n        }\n\n        return new Promise(function (resolve, reject) {\n            window.top[self._onUpdateContentId] = function () {\n                if (!self.$('iframe')[0].contentWindow) {\n                    return reject();\n                }\n                self._processReportPreviewContent();\n                self.trigger_up('iframe_ready');\n                resolve();\n            };\n            if (reportHTML.error) {\n                self.displayNotification({\n                    message: _.str.sprintf(\n                        _t('This report could not be previewed or edited because it could not be rendered with this message: %s. This could be happening because this is a custom report type that needs custom data to be rendered and so is not editable by studio.'),\n                        reportHTML.message\n                    ), type: 'danger' });\n            } else {\n                // determine when the body has been inserted\n                reportHTML = reportHTML.replace(\n                    '</body>',\n                    '<script>window.top.' + self._onUpdateContentId + '()</script></body>'\n                );\n            }\n\n            // inject HTML\n            var cwindow = self.$iframe[0].contentWindow;\n            cwindow.document\n                .open(\"text/html\", \"replace\")\n                .write(reportHTML);\n        });\n    },\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onClick: function () {\n        this.trigger_up('editor_clicked');\n    },\n    /**\n     * @private\n     * @param {Event} e\n     */\n    _onContentClick: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if ($(e.target).hasClass('o_no_content_helper')) {\n            return;\n        }\n\n        var $node = $(e.target).closest('[data-oe-xpath]');\n        if ($node.closest('[t-field], [t-esc]').length) {\n            $node = $node.closest('[t-field], [t-esc]');\n        }\n        this.selectNode($node.data('node'));\n        this.trigger_up('node_clicked', {\n            node: this.selectedNode,\n        });\n    },\n});\n\nreturn ReportEditor;\n\n});\n", "odoo.define('web_studio.report_fields', function (require) {\n\"use strict\";\n\nvar fieldRegistry = require('web.field_registry');\nvar relationalFields = require('web.relational_fields');\n\n/**\n * This widget is used only for rendering by the report editor (the widget options)\n *\n */\n\n\nvar FieldMany2ManySelection = relationalFields.FieldMany2ManyTags.extend({\n    init: function (parent, name, record, options) {\n        this._super.apply(this, arguments);\n\n        options.quick_create = false;\n        options.can_create = false;\n\n        this.selection = _.map(options.attrs.selection, function (s) {\n            return {id: s.field_name, res_id: s.field_name, data: {id: s.field_name, display_name: s.label}};\n        });\n    },\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     * @private\n     * @param {Moment|false} value\n     * @returns {boolean}\n     */\n    _isSameValue: function (value) {\n        if (value === false) {\n            return this.value === false;\n        }\n        return value.length === this.value.res_ids.length &&\n            _.difference(value, this.value.res_ids).length === 0;\n    },\n    /**\n     * Defines an _search method for the internal m2o.\n     *\n     * @private\n     * @param {string} search_val\n     * @returns {Object[]}\n     */\n    _many2oneSearch: function (search_val) {\n        var self = this;\n        var records = _.filter(_.pluck(this.selection, 'data'), function (r) {\n            return r.display_name.indexOf(search_val) !== -1 &&\n               !_.findWhere(self.value.data, {id: r.id});\n        });\n        return _.map(records, function (r) {\n            return {\n                id: r.id,\n                label: r.display_name,\n                name: r.display_name,\n                value: r.display_name,\n            };\n        });\n    },\n    /**\n     *\n     * @overwrite\n     */\n    _render: function () {\n        var self = this;\n        var res_ids = this.value.res_ids;\n        this.value.data = _.filter(this.selection, function (s) {\n            return res_ids.indexOf(s.id) !== -1;\n        });\n        return this._super.apply(this, arguments).then(function () {\n            if (self.many2one) {\n                self.many2one._autocompleteSources = [];\n                self.many2one._addAutocompleteSource(self._many2oneSearch.bind(self), {});\n                self.many2one.limit = Object.keys(self.selection).length;\n            }\n        });\n    },\n    /**\n     *\n     * @overwrite\n     */\n    _setValue: function (value, options) {\n        var self = this;\n        var selection = this.value.res_ids;\n\n        return new Promise(function (resolve, reject) {\n            switch (value.operation) {\n                case \"ADD_M2M\":\n                    selection = selection.concat([value.ids.id]);\n                    break;\n                case \"FORGET\":\n                    selection = _.difference(selection, value.ids);\n                    break;\n                default: throw Error('Not implemented');\n            }\n\n            if (!(options && options.forceChange) && self._isSameValue(selection)) {\n                return Promise.resolve();\n            }\n\n            self.value.res_ids = selection;\n            self._render();\n\n            self.trigger_up('field_changed', {\n                dataPointID: self.dataPointID,\n                changes: _.object([self.name], [{\n                    operation: 'REPLACE_WITH',\n                    ids: selection,\n                }]),\n                viewType: self.viewType,\n                doNotSetDirty: options && options.doNotSetDirty,\n                notifyChange: !options || options.notifyChange !== false,\n                onSuccess: resolve,\n                onFailure: reject,\n            });\n        });\n    },\n});\n\nfieldRegistry.add('many2many_select', FieldMany2ManySelection);\n\nreturn {\n    FieldMany2ManySelection: FieldMany2ManySelection,\n};\n\n});\n\n", "odoo.define('web_studio.ReportEditorManager', function (require) {\n\"use strict\";\n\nvar Dialog = require('web.Dialog');\nvar Pager = require('web.Pager');\nvar utils = require('web.utils');\nvar core = require('web.core');\nvar session = require('web.session');\n\nvar ReportEditorSidebar = require('web_studio.ReportEditorSidebar');\nvar ReportEditor = require('web_studio.ReportEditor');\nvar AbstractEditorManager = require('web_studio.AbstractEditorManager');\nconst { ComponentWrapper, WidgetAdapterMixin } = require('web.OwlCompatibility');\n\nvar qweb = core.qweb;\nvar _t = core._t;\n\nvar ReportEditorManager = AbstractEditorManager.extend(WidgetAdapterMixin, {\n    className: AbstractEditorManager.prototype.className + ' o_web_studio_report_editor_manager',\n    custom_events: _.extend({}, AbstractEditorManager.prototype.custom_events, {\n        editor_clicked: '_onEditorClick',\n        hover_editor: '_onHighlightPreview',\n        node_expanded: '_onNodeExpanded',\n        drop_component: '_onDropComponent',\n        begin_drag_component: '_onBeginDragComponent',\n        element_removed: '_onElementRemoved',\n        iframe_ready: '_onIframeReady',\n        begin_preview_drag_component: '_onBeginPreviewDragComponent',\n        end_preview_drag_component: '_onEndPreviewDragComponent',\n        pager_changed: '_onPagerChanged',\n    }),\n    events: _.extend({}, AbstractEditorManager.prototype.events, {\n        'click .o_web_studio_report_print': '_onPrintReport',\n    }),\n    /**\n     * @override\n     * @param {Object} params\n     * @param {Object} params.env - environment (model and ids)\n     * @param {Object} params.models\n     * @param {Object} params.report\n     * @param {Object} params.reportHTML\n     * @param {Object} params.reportMainViewID\n     * @param {Object} params.reportViews\n     * @param {Object} [params.initialState]\n     * @param {string} [params.initialState.sidebarMode] among ['add', 'report']\n     * @param {Object} [params.paperFormat]\n     * @param {Object} [params.widgetsOptions]\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n\n        this.view_id = params.reportMainViewID;\n\n        this.env = params.env;\n        this.models = params.models;\n        this.report = params.report;\n        this.reportHTML = params.reportHTML;\n        this.reportName = this.report.report_name;\n        this.reportViews = params.reportViews;\n\n        this.initialState = params.initialState || {};\n        this.paperFormat = params.paperFormat;\n        this.widgetsOptions = params.widgetsOptions;\n\n        this.editorIframeResolved = false;\n        var self = this;\n        this.editorIframeDef = new Promise(function (resolve, reject) {\n            self._resolveEditorIframeDef = resolve;\n        }).then(function () {\n            self.editorIframeResolved = true;\n        });\n        const currentMinimum = 1;\n        const size = this.env.ids.length;\n        const limit = 1;\n        this.withPager = size > 1;\n        if (this.withPager) {\n            // only display the pager if useful\n            this.pager = new ComponentWrapper(this, Pager, { currentMinimum, limit, size });\n        }\n    },\n    /**\n     * @override\n     */\n    start: async function () {\n        const promises = [this._super(...arguments)];\n        if (this.withPager) {\n            const pagerPromise = this.pager.mount(document.createDocumentFragment());\n            promises.push(pagerPromise);\n        }\n        await Promise.all(promises);\n        this._renderActionsSection();\n        this._setPaperFormat();\n    },\n    /**\n     * @override\n     */\n    destroy: function () {\n        WidgetAdapterMixin.destroy.apply(this, arguments);\n        return this._super.apply(this, arguments);\n    },\n    /**\n     * @override\n     */\n    on_attach_callback: function () {\n        this._super.apply(this, arguments);\n        WidgetAdapterMixin.on_attach_callback.apply(this, arguments);\n    },\n    /**\n     * @override\n     */\n    on_detach_callback: function () {\n        this._super.apply(this, arguments);\n        WidgetAdapterMixin.on_detach_callback.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    updateEditor: function () {\n        var nodesArchs = this._computeView(this.reportViews);\n        return this.view.update(nodesArchs, this.reportHTML);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    _applyChangeHandling: function (result, opID, from_xml) {\n        var self = this;\n\n        if (result.report_html.error) {\n            // the operation can't be applied\n            var error = result.report_html.message\n                .replace(/&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/>/g, \"&gt;\")\n                .replace(/\"/g, \"&quot;\")\n                .replace(/'/g, \"&#039;\");\n            var msg = '<pre>' + error + '</pre>';\n            this.displayNotification({ title: _t(\"Error when compiling AST\"), message: msg, sticky: true, type: 'danger' });\n            return this._undo(opID, true).then(function () {\n                return Promise.reject();\n            });\n        }\n\n        // TODO: what should we do with result? Maybe update the studio_view_id\n        // if one has been created?\n        if (!from_xml) {\n            // reset studio_arch as it was before the changes for applying\n            // the next operations\n            _.each(result.views, function (view) {\n                if (view.studio_view_id) {\n                    view.studio_arch = self.reportViews[view.view_id].studio_arch;\n                }\n            });\n        }\n        this.reportViews = result.views;\n        this.reportHTML = result.report_html;\n\n        return this.updateEditor();\n    },\n    /**\n     * @private\n     * @param {Object} views\n     * @returns {Object}\n     */\n    _computeView: function (views) {\n        // TODO: find a better name\n        var nodesArchs = _.mapObject(views, function (view, id) {\n            var doc = $.parseXML(view.arch).documentElement;\n            // first element child because we don't want <template> node\n            if (!doc.hasAttribute('t-name')) {\n                doc = doc.firstElementChild;\n            }\n            var node = utils.xml_to_json(doc, true);\n            node.id = +id;\n            node.key = view.key;\n            return node;\n        });\n\n        this._setParentKey(nodesArchs);\n\n        return nodesArchs;\n    },\n    /**\n     * @override\n     */\n    _editView: function (view_id, studio_view_arch, operations) {\n        core.bus.trigger('clear_cache');\n        return this._rpc({\n            route: '/web_studio/edit_report_view',\n            params: {\n                record_id: this.env.currentId,\n                report_name: this.reportName,\n                report_views: this.reportViews,\n                operations: operations,\n                context: session.user_context,\n            },\n        });\n    },\n    /**\n     * @override\n     */\n    _editViewArch: function (view_id, view_arch) {\n        core.bus.trigger('clear_cache');\n        return this._rpc({\n            route: '/web_studio/edit_report_view_arch',\n            params: {\n                record_id: this.env.currentId,\n                report_name: this.reportName,\n                view_id: view_id,\n                view_arch: view_arch,\n                context: session.user_context,\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {Object} node\n     * @returns {Object} first lonely node\n     */\n    _getNodeToDelete: function (node) {\n        var result = node;\n        while (\n            result.parent &&\n            result.parent.children.length === 1 &&  // last child\n            result.attrs['data-oe-id'] === result.parent.attrs['data-oe-id'] &&  // same view\n            (!result.attrs.class || result.attrs.class.indexOf('page') !== -1)  // cannot delete .page\n        ) {\n            result = result.parent;\n        }\n        return result;\n    },\n    /**\n     * @private\n     * @returns {Promise<Object>}\n     */\n    _getReportViews: function () {\n        return this._rpc({\n            route: '/web_studio/get_report_views',\n            params: {\n                record_id: this.env.currentId,\n                report_name: this.reportName,\n                context: session.user_context,\n            },\n        });\n    },\n    /**\n     * @override\n     */\n    _instantiateEditor: function () {\n        var nodesArchs = this._computeView(this.reportViews);\n        this.view = new ReportEditor(this, {\n            nodesArchs: nodesArchs,\n            paperFormat: this.paperFormat,\n            reportHTML: this.reportHTML,\n        });\n        return Promise.resolve(this.view);\n    },\n    /**\n     * @override\n     */\n    _instantiateSidebar: function (state, previousState) {\n        state = _.defaults(state || {}, {\n            mode: this.initialState.sidebarMode || 'new',\n        });\n        return new ReportEditorSidebar(this, {\n            report: this.report,\n            widgetsOptions: this.widgetsOptions,\n            models: this.models,\n            state: state,\n            previousState: previousState,\n            paperFormat: this.paperFormat,\n        });\n    },\n    /**\n     * This section contains the 'Print' button and the pager.\n     *\n     * @private\n     */\n    _renderActionsSection: async function () {\n        const actionsSection = Object.assign(document.createElement('div'), {\n            className: 'o_web_studio_report_actions',\n            innerHTML: qweb.render('web_studio.PrintSection'),\n        });\n        this.el.appendChild(actionsSection);\n\n        if (this.withPager) {\n            const pagerContainer = Object.assign(document.createElement('div'), {\n                className: 'o_web_studio_report_pager',\n            });\n            pagerContainer.appendChild(this.pager.el);\n            actionsSection.append(pagerContainer);\n        }\n    },\n    /**\n     * @private\n     * @param {Object} nodesArchs\n     */\n    _setParentKey: function (nodesArchs) {\n        function setParent(node, parent) {\n            if (_.isObject(node)) {\n                node.parent = parent;\n                _.each(node.children, function (child) {\n                    setParent(child, node);\n                });\n            }\n        }\n        _.each(nodesArchs, function (node) {\n            setParent(node, null);\n        });\n    },\n    /**\n     * @private\n     */\n    _setPaperFormat: function () {\n        var format = this.paperFormat || {};\n\n        var $container = this.$('.o_web_studio_report_iframe_container');\n        $container.css({\n            'padding-top': Math.max(0, (format.margin_top || 0) - (format.header_spacing || 0)) + 'mm',\n            'padding-left': (format.margin_left || 0) + 'mm',\n            'padding-right': (format.margin_right || 0) + 'mm',\n            // note: default width/height comes from default A4 size\n            'width': (format.print_page_width || 210) + 'mm',\n            // avoid a scroll bar with a fixed height\n            'min-height': (format.print_page_height || 297) + 'mm',\n        });\n\n        this.$('.o_web_studio_report_iframe').css({\n            // to remove\n            'min-height': (format.print_page_height || 297) + 'mm',\n            // 'max-height': document.body.scrollHeight + 'px',\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onBeginDragComponent: function (ev) {\n        this.view.beginDragComponent(ev.data.widget);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onBeginPreviewDragComponent: function (ev) {\n        this.view.beginPreviewDragComponent(ev.data.widget);\n    },\n    /**\n     * @override\n     */\n    _onDragComponent: function (ev) {\n        var position = ev.data.position;\n        this.view.dragComponent(ev.data.widget, position.pageX, position.pageY);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onDropComponent: function (ev) {\n        this.view.dropComponent(ev.data.widget);\n    },\n    /**\n     * @private\n     */\n    _onEditorClick: function () {\n        this.view.unselectedElements();\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onElementRemoved: function (ev) {\n        var self = this;\n        var node = this._getNodeToDelete(ev.data.node);\n        var message = _.str.sprintf(_t('Are you sure you want to remove this %s from the view?'), node.tag);\n\n        Dialog.confirm(this, message, {\n            confirm_callback: function () {\n                self.trigger_up('view_change', {\n                    node: node,\n                    operation: {\n                        type: 'remove',\n                        structure: 'remove',\n                    },\n                });\n            },\n        });\n    },\n        /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onEndPreviewDragComponent: function (ev) {\n        this.view.endPreviewDragComponent(ev.data.widget);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onHighlightPreview: function (ev) {\n        this.view.highlight(ev.data.node);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onNodeExpanded: function (ev) {\n        this.view.selectNode(ev.data.node);\n    },\n    /**\n     * @private\n     */\n    _onIframeReady: function () {\n        this._resolveEditorIframeDef();\n    },\n    /**\n     * @override\n     */\n    _onNodeClicked: function (ev) {\n        var node = ev.data.node;\n\n        if (node) {\n            var currentNode = node;\n            var sidebarNodes = [];\n            while (currentNode) {\n                sidebarNodes.push({\n                    node: currentNode,\n                    context: this.view.getNodeContext(currentNode),\n                });\n                currentNode = currentNode.parent;\n            }\n            this.sidebar.state = {\n                mode: 'properties',\n                nodes: sidebarNodes,\n            };\n        } else {\n            this.sidebar.state = {\n                mode: 'new',\n            };\n        }\n        // TODO: this should probably not be done like that (setting state on\n        // sidebar) but pass paramaters to _updateSidebar instead.\n        this._updateSidebar();\n    },\n    /**\n     * @private\n     */\n    _onPagerChanged: async function (ev) {\n        const { currentMinimum, limit } = ev.data;\n        this._cleanOperationsStack();\n        this.env.currentId = this.env.ids[currentMinimum - 1];\n        // TODO: maybe we should trigger_up and the action should handle\n        // this? But the pager will be reinstantiate and useless RPCs will\n        // be done (see willStart)\n        // OR should we put _getReportViews of report_editor_action here?\n        // But then it should be mocked in tests?\n        const result = await this._getReportViews();\n        this.pager.update({ currentMinimum, limit });\n        this.reportHTML = result.report_html;\n        this.reportViews = result.views;\n        this.updateEditor();\n    },\n    /**\n     * @private\n     */\n    _onPrintReport: function () {\n        var self = this;\n        this._rpc({\n            route: '/web_studio/print_report',\n            params: {\n                record_id: this.env.currentId,\n                report_name: this.reportName,\n                context: session.user_context,\n            },\n        }).then(function (action) {\n            self.do_action(action);\n        });\n    },\n    /**\n     * @override\n     * @param {OdooEvent} ev\n     * @param {Object} ev.data\n     * @param {Object} ev.data.operation the operation sent to the server\n     */\n    _onViewChange: function (ev) {\n        var self = this;\n        var def;\n\n        var node = ev.data.node || ev.data.targets[0].node;\n        var operation = _.extend(ev.data.operation, {\n            view_id: +node.attrs['data-oe-id'],\n            xpath: node.attrs['data-oe-xpath'],\n            context: node.context,\n        });\n\n        if (operation.type === 'add') {\n            def = ev.data.component.add({\n                targets: ev.data.targets,\n            }).then(function (result) {\n                // TODO: maybe modify the operation directly?\n                _.extend(operation, result);\n            });\n        } else {\n            if (node) {\n                this.view.selectedNode = node;\n            } else {\n                console.warn(\"the key 'node' should be present\");\n            }\n        }\n        Promise.resolve(def).then(function () {\n            return self._do(operation);\n        }).guardedCatch(ev.data.fail);\n    },\n});\n\nreturn ReportEditorManager;\n\n});\n", "odoo.define('web_studio.ReportEditorSidebar', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar relational_fields = require('web.relational_fields');\nvar StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\nvar utils = require('web.utils');\nvar Widget = require('web.Widget');\n\nvar editComponentsRegistry = require('web_studio.reportEditComponentsRegistry');\nvar newComponentsRegistry = require('web_studio.reportNewComponentsRegistry');\nvar studioUtils = require('web_studio.utils');\n\nvar Many2ManyTags = relational_fields.FieldMany2ManyTags;\nvar Many2One = relational_fields.FieldMany2One;\n\nvar qweb = core.qweb;\nvar _t = core._t;\n\nvar ReportEditorSidebar = Widget.extend(StandaloneFieldManagerMixin, {\n    template: 'web_studio.ReportEditorSidebar',\n    events: {\n        'change input': '_onChangeReport',\n        'click .o_web_studio_sidebar_header > div:not(.inactive)': '_onTab',\n        'click .o_web_studio_xml_editor': '_onXMLEditor',\n        'click .o_web_studio_parameters': '_onParameters',\n        'click .o_web_studio_remove': '_onRemove',\n    },\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {Object} [params.models]\n     * @param {Object} [params.paperFormat]\n     * @param {Object} [params.previousState]\n     * @param {Object} [params.report] only mandatory if state.mode = 'report'\n     * @param {Object} [params.state]\n     * @param {Object} [params.widgetsOptions]\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n        StandaloneFieldManagerMixin.init.call(this);\n\n        this.debug = config.isDebug();\n        this.report = params.report;\n        this.state = params.state || {};\n        this.paperFormat = params.paperFormat || {};\n        this.previousState = params.previousState || {};\n        this.models = params.models;\n        this.widgetsOptions = params.widgetsOptions;\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        var self = this;\n        var defs = [this._super.apply(this, arguments)];\n\n        if (this.state.mode === 'report') {\n            // make record for the many2many groups\n            var defReport = this.model.makeRecord('ir.model.fields', [{\n                name: 'groups_id',\n                fields: [{\n                    name: 'id',\n                    type: 'integer',\n                }, {\n                    name: 'display_name',\n                    type: 'char',\n                }],\n                relation: 'res.groups',\n                type: 'many2many',\n                value: this.report.groups_id,\n            }]).then(function (recordID) {\n                self.groupsHandle = recordID;\n            });\n            // load record for the many2one paperformat\n            var defPaperFormat = this.model.makeRecord('ir.model.fields', [{\n                name: 'paperformat_id',\n                relation: 'report.paperformat',\n                type: 'many2one',\n                value: this.report.paperformat_id,\n            }]).then(function (recordID) {\n                self.paperformatHandle = recordID;\n            });\n            defs.push(defReport);\n            defs.push(defPaperFormat);\n        }\n        return Promise.all(defs);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var def;\n        switch (this.state.mode) {\n            case 'report':\n                def = this._startModeReport();\n                break;\n            case 'new':\n                def = this._startModeNew();\n                break;\n            case 'properties':\n                def = this._startModeProperties();\n                break;\n        }\n        return Promise.all([this._super.apply(this, arguments), def]);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * Gets the state of all the widgets of all the node hierarchy of the\n     * sidebar.\n     *\n     * @returns {Object}\n     */\n    getLocalState: function () {\n        var self = this;\n        var state = {};\n\n        _.each(this.nodes, function (node) {\n            var nodeName = self._computeUniqueNodeName(node.node);\n            state[nodeName] = {};\n            _.each(node.widgets, function (comp) {\n                state[nodeName][comp.name] = comp.getLocalState();\n            });\n        });\n        return state;\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Given a node, computes a unique name that will be the same between\n     * refresh of the preview.\n     *\n     * @param {Object} node\n     * @returns {string}\n     */\n    _computeUniqueNodeName: function (node) {\n        return node.attrs[\"data-oe-id\"] + node.attrs[\"data-oe-xpath\"].replace(/\\[\\]\\//g, \"_\");\n    },\n    /**\n     * Utility function that will create a fake jQuery node.\n     *\n     * Note that the 'real' DOM node cannot be used as it may not not exist\n     * (e.g. a <t> node which is defined in the arch but has no corresponding\n     * DOM node).\n     *\n     * TODO: if it's too slow, maybe instatiate the parse only once in init.\n     *\n     * @private\n     * @param {Object} node\n     * @returns {jQuery}\n     */\n    _getAssociatedDOMNode: function (node) {\n        var parser = new DOMParser();\n        var xml = utils.json_node_to_xml(node);\n        var xmlDoc = parser.parseFromString(xml, \"text/xml\");\n        var xmlNode = xmlDoc.getElementsByTagName(node.tag)[0];\n        return $(xmlNode);\n    },\n    /**\n     * @private\n     * @param {Object} components\n     * @returns {Object}\n     */\n    _getComponentsObject: function (components) {\n        return _.map(components, function (componentName) {\n            var Component = _.find(editComponentsRegistry.map, function (Component) {\n                return Component.prototype.name === componentName;\n            });\n            return Component;\n        });\n    },\n    /**\n     * @private\n     * @param {Object} components\n     * @returns {string}\n     */\n    _getComponentsBlacklist: function (components) {\n        var blacklist = '';\n        _.each(this._getComponentsObject(components), function (Component) {\n            if (Component.prototype.blacklist) {\n                if (blacklist.length) {\n                    blacklist += ',';\n                }\n                blacklist += Component.prototype.blacklist;\n            }\n        });\n        return blacklist;\n    },\n    /**\n     * @private\n     * @param {Object} node\n     * @returns {string} a attempt of meaningful name for the given node\n     */\n    _getNodeDisplayName: function (node) {\n        var displayName = { name: node.tag, attr: '', icon: '' };\n\n        if (node.attrs) {\n            if (node.attrs.name) {\n                displayName.attr += '(' + node.attrs.name + ')';\n            }\n            if (node.attrs['t-field'] || node.attrs['t-esc']) {\n                displayName.attr += '[' + (node.attrs['t-field'] || node.attrs['t-esc']) + ']';\n            }\n            if (node.attrs['t-call']) {\n                displayName.attr += '[t-call=\"' + node.attrs['t-call'] + '\"]';\n            }\n            if (node.attrs['t-foreach']) {\n                displayName.attr += '[foreach=\"' + node.attrs['t-foreach'] + '\"]';\n            }\n        }\n\n        if (node.key) {\n            displayName.attr += ' - ' + node.key;\n        }\n\n        if (displayName.name === 'div' && node.attrs.class) {\n            displayName.attr += ' ' + node.attrs.class;\n        }\n\n        switch (displayName.name) {\n            case 't':\n                displayName.icon = 'fa-cog';\n                break;\n\n            case 'html':\n            case 'body':\n            case 'main':\n                displayName.icon = 'fa-file';\n                break;\n\n            case 'table':\n                displayName.icon = 'fa-table';\n                break;\n\n            case 'thead':\n            case 'tr':\n            case 'tfoot':\n                displayName.icon = 'fa-ellipsis-h';\n\n                if (node.attrs.hasOwnProperty('t-foreach')) {\n                    displayName.icon = 'fa-retweet text-primary';\n                }\n\n                break;\n\n            case 'tbody':\n                displayName.icon = 'fa-th';\n                break;\n\n            case 'th':\n            case 'td':\n                displayName.icon = 'fa-square-o';\n                break;\n\n            case 'img':\n                displayName.icon = 'fa-picture-o';\n                break;\n\n            case 'div':\n                displayName.icon = 'fa-folder';\n\n                if (!node.attrs.hasOwnProperty('class')) {\n                    break;\n                }\n\n                if (node.attrs.class.indexOf('col-') !== -1) {\n                    displayName.icon = 'fa-columns';\n                } else if (node.attrs.class.indexOf('row') !== -1) {\n                    displayName.icon = 'fa-ellipsis-h';\n                }\n                break;\n\n            case 'address':\n                displayName.icon = 'fa-address-book-o';\n                break;\n\n            case 'h1':\n            case 'h2':\n            case 'h3':\n            case 'h4':\n            case 'h5':\n            case 'h6':\n            case 'p':\n            case 'b':\n            case 'i':\n            case 'span':\n            case 'strong':\n                displayName.icon = 'fa-i-cursor';\n                break;\n        }\n\n        return displayName;\n    },\n    /**\n     * Given a specific node selected (clicked) on the report, get a list of all\n     * the components that are applicable to edit this node.\n     *\n     * This function uses the selector defined on the editable components\n     * themselves to check wether it applies to a node or not\n     *\n     * @private\n     * @param {Object} node\n     * @returns {string[]}\n     */\n    _getNodeEditableComponents: function (node) {\n        var self = this;\n        var components = [];\n\n        var $node = this._getAssociatedDOMNode(node);\n        _.each(editComponentsRegistry.map, function (Component) {\n            var selector = Component.prototype.selector;\n            if (self.debug) {\n                selector = Component.prototype.debugSelector || selector;\n            }\n            if ($node.is(selector)) { // use last because DOM eject t tag in table tag\n                components.push(Component.prototype.name);\n            }\n        });\n\n        _.each(['layout', 'tif', 'groups'], function (componentName) {\n            if (!_.contains(components, componentName)) {\n                components.push(componentName);\n            }\n        });\n        return components;\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _startModeNew: function () {\n        var self = this;\n        var defs = [];\n        var $sidebarContent = this.$('.o_web_studio_sidebar_content');\n\n        _.each(newComponentsRegistry.map, function (components, title) {\n            $sidebarContent.append($('<h3>', {\n                html: title,\n            }));\n            var $componentsContainer = $('<div>', {\n                class: 'o_web_studio_field_type_container',\n            });\n            _.each(components, function (Component) {\n                defs.push(new Component(self, { models: self.models }).appendTo($componentsContainer));\n            });\n            $sidebarContent.append($componentsContainer);\n        });\n\n        return Promise.all(defs);\n    },\n    /**\n     * A node has been clicked on the report, build the content of the sidebar so this node can be edited\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _startModeProperties: function () {\n        var self = this;\n        var componentsAppendedPromise;\n        var $accordion = this.$('.o_web_studio_sidebar_content .o_web_studio_accordion');\n\n        var blacklists = [];\n        this.nodes = [];\n\n        if (!this.debug) {\n            // hide all nodes after .page, they are too technical\n            var pageNodeIndex = _.findIndex(this.state.nodes, function (node) {\n                return node.node.tag === 'div' && _.str.include(node.node.attrs.class, 'page');\n            });\n            if (pageNodeIndex !== -1) {\n                this.state.nodes.splice(pageNodeIndex + 1, this.state.nodes.length - (pageNodeIndex + 1));\n            }\n        }\n\n        for (var index = this.state.nodes.length - 1; index >= 0; index--) {\n            // copy to not modifying in place the node\n            var node = _.extend({}, this.state.nodes[index]);\n            if (!this.debug && blacklists.length) {\n                if (this._getAssociatedDOMNode(node.node).is(blacklists.join(','))) {\n                    continue;\n                }\n            }\n            var components = this._getNodeEditableComponents(node.node);\n            node.components = components;\n            var blacklist = this._getComponentsBlacklist(components);\n            if (blacklist.length) {\n                blacklists.push(blacklist);\n            }\n            node.widgets = [];\n            this.nodes.unshift(node);\n        }\n        // TODO: do not reverse but put nodes in correct order directly\n        this.nodes.reverse();\n\n        this.nodes.forEach(function (node) {\n            var $accordionSection = $(qweb.render('web_studio.AccordionSection', {\n                id: 'id_' + studioUtils.randomString(6),\n                header: 'header_' + studioUtils.randomString(6),\n                nodeName: self._getNodeDisplayName(node.node).name,\n                nodeAttr: self._getNodeDisplayName(node.node).attr,\n                nodeIcon: self._getNodeDisplayName(node.node).icon,\n                node: node.node,\n            }));\n            var renderingProms = self._getComponentsObject(node.components).map(function (Component) {\n                if (!Component) {\n                    self.displayNotification({ title: \"Missing component\", message: self.state.directive, type: 'danger' });\n                    return;\n                }\n                var previousWidgetState = self.previousState[self._computeUniqueNodeName(node.node)] &&\n                    self.previousState[self._computeUniqueNodeName(node.node)][Component.prototype.name];\n                var directiveWidget = new Component(self, {\n                    widgetsOptions: self.widgetsOptions,\n                    node: node.node,\n                    context: node.context,\n                    state: previousWidgetState,\n                    models: self.models,\n                    componentsList: node.components,\n                });\n                node.widgets.push(directiveWidget);\n                var fragment = document.createDocumentFragment();\n                return directiveWidget.appendTo(fragment);\n            });\n            componentsAppendedPromise = Promise.all(renderingProms).then(function () {\n                for (var i = 0; i < node.widgets.length; i++) {\n                    var widget = node.widgets[i];\n                    var selector = '.collapse' + (i > 0 ? '>div:last()' : '');\n                    widget.$el.appendTo($accordionSection.find(selector));\n                }\n                var $removeButton = $(qweb.render('web_studio.Sidebar.Remove'));\n                $removeButton.data('node', node.node); // see @_onRemove\n                $accordionSection.find('.collapse')\n                    .append($('<hr>'))\n                    .append($removeButton);\n            });\n            $accordionSection.appendTo($accordion);\n            $accordionSection\n                .on('mouseenter', function () {\n                    self.trigger_up('hover_editor', {\n                        node: node.node,\n                    });\n                })\n                .on('click', function () {\n                    self.trigger_up('node_expanded', {\n                        node: node.node,\n                    });\n                })\n                .on('mouseleave', function () {\n                    self.trigger_up('hover_editor', {\n                        node: undefined,\n                    });\n                })\n                .find('.collapse').on('show.bs.collapse hide.bs.collapse', function (ev) {\n                    $(this).parent('.card').toggleClass('o_web_studio_active', ev.type === 'show');\n                });\n        });\n\n        // open the last section\n        // NB: this is the only way with BS4 to open the tab synchronously\n        var $lastCard = $accordion.find('.card:last');\n        $lastCard.addClass('o_web_studio_active');\n        $lastCard.find('.collapse').addClass('show');\n\n        return componentsAppendedPromise;\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _startModeReport: function () {\n        var defs = [];\n        var paperFormatRecord = this.model.get(this.paperformatHandle);\n        var many2one = new Many2One(this, 'paperformat_id', paperFormatRecord, {\n            attrs: {\n                placeholder: _t('By default: ') + this.paperFormat.display_name,\n            },\n            mode: 'edit',\n        });\n        this._registerWidget(this.paperformatHandle, 'paperformat_id', many2one);\n        defs.push(many2one.appendTo(this.$('.o_web_studio_paperformat_id')));\n        this.paperformatMany2one = many2one;\n\n        // append many2many for groups_id\n        var groupsRecord = this.model.get(this.groupsHandle);\n        var many2many = new Many2ManyTags(this, 'groups_id', groupsRecord, {\n            mode: 'edit',\n        });\n        this._registerWidget(this.groupsHandle, 'groups_id', many2many);\n        defs.push(many2many.appendTo(this.$('.o_groups')));\n        return Promise.all(defs);\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {JQueryEvent} ev\n     */\n    _onChangeReport: function (ev) {\n        var $input = $(ev.currentTarget);\n        var attribute = $input.attr('name');\n        if (attribute) {\n            var newAttrs = {};\n            if ($input.attr('type') === 'checkbox') {\n                newAttrs[attribute] = $input.is(':checked') ? 'True' : '';\n            } else {\n                newAttrs[attribute] = $input.val();\n            }\n            this.trigger_up('studio_edit_report', newAttrs);\n        }\n    },\n    /**\n     * @private\n     * @override\n     * @param {OdooEvent} ev\n     */\n    _onFieldChanged: function (ev) {\n        var self = this;\n        StandaloneFieldManagerMixin._onFieldChanged.apply(this, arguments).then(function () {\n            if (self.state.mode !== 'report') {\n                return;\n            }\n            var newAttrs = {};\n            var fieldName = ev.target.name;\n            var record;\n            if (fieldName === 'groups_id') {\n                record = self.model.get(self.groupsHandle);\n                newAttrs[fieldName] = record.data.groups_id.res_ids;\n            } else if (fieldName === 'paperformat_id') {\n                record = self.model.get(self.paperformatHandle);\n                newAttrs[fieldName] = record.data.paperformat_id && record.data.paperformat_id.res_id;\n            }\n            self.trigger_up('studio_edit_report', newAttrs);\n        });\n    },\n    /**\n     * @private\n     */\n    _onParameters: function () {\n        this.trigger_up('open_record_form_view');\n    },\n    /**\n     * @private\n     * @param {ClickEvent} ev\n     */\n    _onRemove: function (ev) {\n        var node = $(ev.currentTarget).data('node');\n        this.trigger_up('element_removed', {\n            node: node,\n        });\n    },\n    /**\n     * @private\n     * @param {ClickEvent} ev\n     */\n    _onTab: function (ev) {\n        var mode = $(ev.currentTarget).attr('name');\n        if (mode === 'options') {\n            // one cannot manually select options\n            return;\n        }\n        this.trigger_up('sidebar_tab_changed', {\n            mode: mode,\n        });\n    },\n    /**\n     * @private\n     */\n    _onXMLEditor: function () {\n        this.trigger_up('open_xml_editor');\n    },\n});\n\nreturn ReportEditorSidebar;\n\n});\n", "odoo.define('web_studio.studio_report_kanban', function (require) {\n\"use strict\";\n\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar KanbanController = require('web.KanbanController');\nvar KanbanView = require('web.KanbanView');\nvar session = require('web.session');\nvar view_registry = require('web.view_registry');\n\nvar bus = require('web_studio.bus');\n\nvar _t = core._t;\n\nvar StudioReportKanbanController = KanbanController.extend({\n    /**\n     * Warn the Studio submenu that the report is not edited anymore.\n     */\n    on_reverse_breadcrumb: function () {\n        bus.trigger('report_template_closed');\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Do not open the form view but open the Report Editor action.\n     *\n     * @param {Object} data\n     * @param {Integer} [data.res_id] The record res ID (if it directly\n     *   comes from the server)\n     * @param {number} [data.id] The local model ID for the record to be\n     *   opened\n     * @private\n     */\n    _openReportRecord: function (data) {\n        var self = this;\n        var def;\n        if (data.res_id && !data.id) {\n            var state = this.model.get(this.handle, {raw: true});\n            def = this.model.load({\n                modelName: this.modelName,\n                res_id: data.res_id,\n                fields: state.fields,\n                fieldNames: ['report_name'],\n            });\n        }\n        Promise.resolve(def).then(function (result) {\n            var id = data.id || result;\n            var report = self.model.get(id, {raw: true});\n            self.do_action('web_studio.action_edit_report', {\n                report: report,\n                on_reverse_breadcrumb: self.on_reverse_breadcrumb,\n            });\n        });\n    },\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Do not add a record but open the dialog.\n     *\n     * @private\n     * @override\n     */\n    _onButtonNew: function () {\n        var model = this.initialState.context.default_model;\n        new NewReportDialog(this, model).open();\n    },\n    /**\n     * Do not open the form view but open the Report Editor action.\n     *\n     * @param {OdooEvent} ev\n     * @param {Integer} [ev.data.res_id] The record res ID (if it directly\n     *   comes from the server)\n     * @param {number} [ev.data.id] The local model ID for the record to be\n     *   opened\n     * @private\n     * @override\n     */\n    _onOpenRecord: function (ev) {\n        ev.stopPropagation();\n        this._openReportRecord(ev.data);\n    },\n    /**\n     * Override to reload the view after the 'copy_report_and_template' action.\n     *\n     * @private\n     * @override\n     */\n    _reloadAfterButtonClick: function (kanbanRecord, params) {\n        this._super.apply(this, arguments);\n        if (params.attrs.name === 'copy_report_and_template') {\n            this.trigger_up('reload');\n        }\n    },\n});\n\nvar StudioReportKanbanView = KanbanView.extend({\n    config: _.extend({}, KanbanView.prototype.config, {\n        Controller: StudioReportKanbanController,\n    }),\n});\n\nvar NewReportDialog = Dialog.extend({\n    template: 'web_studio.NewReportDialog',\n    events: {\n        'click .o_web_studio_report_layout_item': '_onReportTemplateSelected',\n    },\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {String} modelName\n     */\n    init: function (parent, modelName) {\n        this.modelName = modelName;\n        var options = {\n            title: _t(\"Which type of report do you want to create?\"),\n            size: 'medium',\n            buttons: [],\n        };\n\n        this.layouts = [{\n            name: 'web.external_layout',\n            label: _t(\"External\"),\n            description: _t(\"Business header/footer\"),\n        }, {\n            name: 'web.internal_layout',\n            label: _t(\"Internal\"),\n            description: _t(\"Minimal header/footer\"),\n        }, {\n            name: 'web.basic_layout',\n            label: _t(\"Blank\"),\n            description: _t(\"No header/footer\"),\n        }];\n\n        this._super(parent, options);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {String} modelName\n     * @param {String} layout\n     * @returns {Promise}\n     */\n    _createNewReport: function (modelName, layout) {\n        return this._rpc({\n            route: '/web_studio/create_new_report',\n            params: {\n                model_name: modelName,\n                layout: layout,\n                context: session.user_context,\n            },\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Create a new report.\n     *\n     * @private\n     * @param {ClickEvent} event\n     */\n    _onReportTemplateSelected: function (event) {\n        var self = this;\n        var layout = $(event.currentTarget).data('layout');\n        this._createNewReport(this.modelName, layout).then(function (result) {\n            self.trigger_up('open_record', {res_id: result.id});\n            self.close();\n        });\n    },\n});\n\nview_registry.add('studio_report_kanban', StudioReportKanbanView);\n\nreturn StudioReportKanbanView;\n\n});\n", "odoo.define('web_studio.AbstractReportComponent', function (require) {\n\"use strict\";\n\nvar Widget = require('web.Widget');\n\nvar AbstractReportComponent = Widget.extend({\n    /**\n     * @override\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {Object} params.models\n     */\n    init: function (parent, params) {\n        this.models = params.models;\n        this.node = {\n            context: {},\n            contextOrder: [],\n        };\n        this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n    /**\n     * Given a node of the DOM of the report preview, get the avaiable context of this node\n     * The context is filled in the branding on the node itself. It represents\n     * all the variables available at a moment in the report\n     *\n     * @param {Object} node\n     */\n    _getContextKeys: function (node) {\n        var self = this;\n        var contextOrder = node.contextOrder || [];\n\n        var keys = _.compact(_.map(node.context, function (relation, key) {\n            if (!self.models[relation]) {\n                return {\n                    name: key,\n                    string: key + ' (' + relation + ')',\n                    type: relation,\n                    store: true,\n                    related: true,\n                    searchable: true,\n                    order: -contextOrder.indexOf(key),\n                };\n            }\n            return {\n                name: key,\n                string: key + ' (' + self.models[relation] + ')',\n                relation: relation,\n                type: key[key.length-1] === 's' ? 'one2many' : 'many2one',\n                store: true,\n                related: true,\n                searchable: true,\n                order: -contextOrder.indexOf(key),\n            };\n        }));\n        keys.sort(function (a, b) {\n            return a.order - b.order;\n        });\n        return keys;\n    },\n});\n\nreturn AbstractReportComponent;\n\n});\n", "odoo.define('web_studio.reportEditComponents', function (require) {\n\"use strict\";\n\nvar {ColorpickerDialog} = require('web.Colorpicker');\nvar config = require('web.config');\nvar core = require('web.core');\nvar utils = require('web.utils');\nvar fieldRegistry = require('web.field_registry');\nvar fieldRegistryOwl = require('web.field_registry_owl');\nconst FieldWrapper = require('web.FieldWrapper');\nvar ModelFieldSelector = require('web.ModelFieldSelector');\nvar StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\nconst { WidgetAdapterMixin } = require('web.OwlCompatibility');\n\nconst Wysiwyg = require('web_editor.wysiwyg');\n\nvar Abstract = require('web_studio.AbstractReportComponent');\nvar DomainSelectorDialog = require('web.DomainSelectorDialog');\nvar Domain = require(\"web.Domain\");\n\nvar py = window.py; // look py.js\nvar qweb = core.qweb;\n\nvar AbstractEditComponent = Abstract.extend(WidgetAdapterMixin, StandaloneFieldManagerMixin, {\n    events: {\n        'change input': function (e) {\n            e.stopPropagation();\n        },\n    },\n    custom_events: _.extend({}, Abstract.prototype.custom_events, {\n        field_changed: '_onDirectiveChange',\n        field_chain_changed: '_onDirectiveChange',\n    }),\n    /**\n     * @override\n     * @param {Object} params\n     * @param {Object} params.context\n     * @param {Object} params.node\n     * @param {Object} [params.state]\n     * @param {string[]} [params.componentsList] the list of components for the\n     *                                           node\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n        StandaloneFieldManagerMixin.init.call(this);\n        this.state = params.state || {};\n        this.node = params.node;\n        this.context = params.context;\n        this.componentsList = params.componentsList;\n        // TODO: check if using a real model with widgets is reasonnable or if\n        // we should use actual html components in QWEB\n        this.directiveFields = {};\n\n        // will be set in the willStart defDirective callback\n        this.directiveRecordId = '';\n\n        // add in init: directive => field selector\n        this.fieldSelector = {};\n\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        var self = this;\n\n        var directiveModel = [];\n        _.each(this.directiveFields, function (options, directiveKey) {\n            var value = options.value;\n            if (!value) {\n                value = self.node.attrs[options.attributeName || directiveKey];\n            }\n\n            if (options.type === 'related') {\n                directiveModel.push({\n                    name: directiveKey,\n                    type: 'char',\n                    value: options.freecode ? value : self._splitRelatedValue(value).chain.join('.'),\n                });\n            } else {\n                directiveModel.push(_.extend({}, {\n                    name: directiveKey,\n                    value: value,\n                }, options));\n            }\n        });\n\n        var defDirective = this.model.makeRecord('ir.model.fields', directiveModel)\n            .then(function (recordId) {\n                self.directiveRecordId = recordId;\n\n                _.each(self.directiveFields, function (options, directiveKey) {\n                    if (options.type === 'related') {\n                        self.createFieldSelector(directiveKey, options);\n                    } else {\n                        self.createField(directiveKey, options);\n                    }\n                });\n            });\n        var defParent = this._super.apply(this, arguments);\n        return Promise.all([defDirective, defParent]);\n    },\n    /**\n     * @override\n     */\n    destroy: function () {\n        this._super.apply(this, arguments);\n        WidgetAdapterMixin.destroy.call(this);\n    },\n    /**\n     * Called each time the widget is attached into the DOM.\n     */\n    on_attach_callback: function () {\n        WidgetAdapterMixin.on_attach_callback.call(this);\n    },\n    /**\n     * Called each time the widget is detached from the DOM.\n     */\n    on_detach_callback: function () {\n        WidgetAdapterMixin.on_detach_callback.call(this);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * Creates a new field (for basic fields, as field registry).\n     *\n     * @param {String} directiveKey unique key\n     * @param {Object} options\n     */\n    createField: function (directiveKey, options) {\n        var directiveRecord = this.model.get(this.directiveRecordId);\n\n        options = _.extend({mode: 'edit', attrs: _.extend({\n            quick_create: false, can_create: false}, options)}, options);\n\n        var field = directiveRecord.fields[directiveKey];\n        var FieldClass = fieldRegistryOwl.getAny([options.Widget, field.type]);\n        if (FieldClass) {\n            this.fieldSelector[directiveKey] = new FieldWrapper(this, FieldClass, {\n                fieldName: directiveKey,\n                record: directiveRecord,\n                options,\n            });\n            this.fieldSelector[directiveKey].appendTo = function ($el) {\n                return this.mount($el[0]);\n            };\n        } else {\n            FieldClass = fieldRegistry.getAny([options.Widget, field.type]);\n            this.fieldSelector[directiveKey] = new FieldClass(\n                this, directiveKey, directiveRecord, options);\n        }\n    },\n    /**\n     * Creates a new field selector (for related fields).\n     *\n     * @param {String} directiveKey unique key\n     * @param {Object} options\n     */\n    createFieldSelector: function (directiveKey, options) {\n        var directiveRecord = this.model.get(this.directiveRecordId);\n\n        var split = this._splitRelatedValue(directiveRecord.data[directiveKey]);\n\n        if (this.context[split.chain[0]] === 'undefined') {\n            // if we don't know what the variable is, we won't be able to follow\n            // the relations (and fetch the fields) with the FieldSelector\n            console.warn(\"We don't know what \" + split.chain[0] + \" is ...\");\n            return this.createField(directiveKey);\n        }\n\n        if (options.freecode && split.rest) {\n            var InputField = fieldRegistry.get('input');\n            this.fieldSelector[directiveKey] = new InputField(\n                this, directiveKey,\n                directiveRecord,\n                _.extend({mode: 'edit', attrs: options}, options));\n            return;\n        }\n\n        var availableKeys = this._getContextKeys(this.node);\n        if (options.loop) {\n            availableKeys = _.filter(availableKeys, function (relation) {\n                return relation.type === 'one2many' || relation.type === 'many2one';\n            });\n        }\n\n        this.fieldSelector[directiveKey] = new ModelFieldSelector(this, 'record_fake_model', split.chain,\n            _.extend({\n                readonly: options.mode === 'readonly',\n                searchable: false,\n                fields: availableKeys,\n                filters: {searchable: false},\n                filter: options.filter || function () {\n                    return true;\n                },\n                followRelations: options.followRelations || function (field) {\n                    return field.type === 'many2one';\n                },\n            }, options));\n    },\n    /**\n     * To be overriden.\n     */\n    getLocalState: function() {\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {any} value\n     * @returns {Object}\n     */\n    _splitRelatedValue: function (value) {\n        var chain = [];\n        var rest = value || '';\n        if (typeof value === \"string\") {\n            try {\n                value = py.extract(value);\n            } catch (e) {\n                return {\n                    chain: [],\n                    rest: value,\n                };\n            }\n        }\n        if (value) {\n            if (value.isOperator) {\n                if (value.params.values[0].isField) {\n                    chain = value.params.values[0].expr.split('.');\n                    rest = value.expr.slice(chain.length);\n                } else {\n                    rest = value.expr;\n                }\n            }\n            if (value.isCall) {\n                rest = (value.params.object.length ? '.' : '') + value.params.method + '(' + value.params.args.join(', ') + ')';\n                chain = value.params.object;\n            }\n            if (value.isField) {\n                rest = '';\n                chain = value.expr.split('.');\n            }\n        }\n        return {\n            chain: chain,\n            rest: rest,\n        };\n    },\n    /**\n     * @private\n     * @param {Object} newAttrs\n     */\n    _tSetAttributes: function (newAttrs) {\n        var self = this;\n        var node = this.node;\n        var op = [];\n        _.each(newAttrs, function (tvalue, tset) {\n            if (tvalue === self.directiveFields[tset].value) {\n                return;\n            }\n            op.push({\n                content: '<attribute name=\"t-value\">' + tvalue + '</attribute>',\n                position: \"attributes\",\n                view_id: +node.attrs['data-oe-id'],\n                xpath: node.attrs['data-oe-xpath'] + \"//t[@t-set='\" + tset + \"']\"\n            });\n        });\n        if (!op.length) {\n            return;\n        }\n        this.trigger_up('view_change', {\n            node: node,\n            operation: {\n                inheritance: op,\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {String} attributeName\n     * @param {String} toAdd\n     * @param {String} toRemove\n     */\n    _editDomAttribute: function (attributeName, toAdd, toRemove) {\n        var attribute = '<attribute name=\"' + attributeName + '\" separator=\"' + (attributeName === 'class' ? ' ' : ';') + '\"';\n        if (toAdd) {\n            attribute += ' add=\"' + toAdd + '\"';\n        }\n        if (toRemove) {\n            attribute += ' remove=\"' + toRemove + '\"';\n        }\n        attribute += '/>';\n\n        this.trigger_up('view_change', {\n            node: this.node,\n            operation: {\n                inheritance: [{\n                    content: attribute,\n                    position: \"attributes\",\n                    view_id: +this.node.attrs['data-oe-id'],\n                    xpath: this.node.attrs['data-oe-xpath']\n                }],\n            },\n        });\n    },\n    /**\n     * Triggered by a field modification (see @createField and\n     * @createFieldSelector).\n     * To be overriden if the attributes need to be preprocessed.\n     *\n     * @private\n     * @param {Object} newAttrs\n     */\n    _triggerViewChange: function (newAttrs) {\n        this.trigger_up('view_change', {\n            node: this.node,\n            operation: {\n                type: 'attributes',\n                new_attrs: newAttrs,\n            },\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n    /**\n     * @private\n     * @param {OdooEvent} e\n     */\n    _onDirectiveChange: function (e) {\n        var self = this;\n        e.stopPropagation();  // TODO: is it really useful on an OdooEvent\n\n        e.data.dataPointID = this.directiveRecordId;\n\n        var always = function () {\n            var newAttrs = {};\n            _.each(self.fieldSelector, function (fieldType, directiveKey) {\n                var directiveTarget = self.fieldSelector[directiveKey];\n                var target = e.target;\n                if (directiveTarget instanceof owl.Component) {\n                    directiveTarget = directiveTarget.componentRef.comp;\n                    target = e.data.__originalComponent\n                }\n                if (!e.data.forceChange && target !== directiveTarget) {\n                    return;\n                }\n                var data = self.model.get(self.directiveRecordId).data;\n                var fieldValue = data[directiveKey];\n                // TODO: for relation field, maybe set id (or ids) in fieldValue to\n                // avoid overwritting _triggerViewChange in every directive\n                if (e.data.chain) {\n                    fieldValue = e.data.chain.join('.');\n                }\n                if (fieldValue.res_ids) {\n                    fieldValue = fieldValue.res_ids.slice();\n                }\n                newAttrs[directiveKey] = fieldValue;\n            });\n\n            if (e.data.chain) {\n                e.data.dataPointID = self.directiveRecordId;\n                e.data.changes = newAttrs;\n            }\n\n            self._triggerViewChange(newAttrs);\n        };\n\n        StandaloneFieldManagerMixin._onFieldChanged.call(this, e).then(always, always);\n    },\n});\n\nvar loadColors;\nvar LayoutEditable = AbstractEditComponent.extend({\n    name: 'layout',\n    template : 'web_studio.ReportLayoutEditable',\n    events : _.extend({}, AbstractEditComponent.prototype.events, {\n        \"change .o_web_studio_margin>input\": \"_onMarginInputChange\",\n        \"change .o_web_studio_width>input\": \"_onWidthInputChange\",\n        \"click .o_web_studio_font_size .dropdown-item-text\": \"_onFontSizeChange\",\n        \"change .o_web_studio_table_style > select\": \"_onTableStyleInputChange\",\n        \"click .o_web_studio_text_decoration button\": \"_onTextDecorationChange\",\n        \"click .o_web_studio_text_alignment button\": \"_onTextAlignmentChange\",\n        \"change .o_web_studio_classes>input\": \"_onClassesChange\",\n        \"click .o_web_studio_colors .o_web_studio_reset_color\": \"_onResetColor\",\n        \"click .o_web_studio_colors .o_web_studio_custom_color\": \"_onCustomColor\",\n    }),\n    /**\n     * @override\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n\n        this.debug = config.isDebug();\n        this.isTable = params.node.tag === 'table';\n        this.isNodeText = _.contains(this.componentsList, 'text');\n        this.allClasses = params.node.attrs.class || \"\";\n        this.classesArray =(params.node.attrs.class || \"\").split(' ');\n        this.stylesArray =(params.node.attrs.style || \"\").split(';');\n\n        var fontSizeRegExp= new RegExp(/^\\s*(h[123456]{1})|(small)|(display-[1234]{1})\\s*$/gim);\n        var backgroundColorRegExp= new RegExp(/^\\s*background\\-color\\s*:/gi);\n        var colorRegExp= new RegExp(/^\\s*color\\s*:/gi);\n        var widthRegExp= new RegExp(/^\\s*width\\s*:/gi);\n        const colClassRegex = /\\bcol((-(sm|md|lg|xl))?-(\\d{1,2}|auto))?\\b/;\n\n        this[\"margin-top\"] = this._findMarginValue('margin-top');\n        this[\"margin-bottom\"] = this._findMarginValue('margin-bottom');\n        this[\"margin-left\"] = this._findMarginValue('margin-left');\n        this[\"margin-right\"] = this._findMarginValue('margin-right');\n\n        this[\"background-color-class\"] = _.find(this.classesArray, function(item) {\n            return !item.indexOf('bg-');\n        });\n        this[\"font-color-class\"] = _.find(this.classesArray, function(item) {\n            return !item.indexOf('text-');\n        });\n        this.tableStyle = _.find(this.classesArray, function(item) {\n            return !item.indexOf('table-');\n        });\n        this[\"background-color\"] = _.find(this.stylesArray, function(item) {\n            return backgroundColorRegExp.test(item);\n        });\n        this.color = _.find(this.stylesArray, function(item) {\n            return colorRegExp.test(item);\n        });\n        // the width on div.col is set with col-. instead of width style\n        this.displayWidth = !(params.node.tag === 'div' && _.find(this.classesArray, function(item) {\n            return colClassRegex.test(item);\n        }));\n        this.originalWidth =  _.find(this.stylesArray, function(item) {\n            return widthRegExp.test(item);\n        });\n        if (this.originalWidth) {\n            this.width = this.originalWidth.replace(/\\D+/g,''); //replaces all non-digits with nothing\n        }\n\n        this.fontSize = _.find(this.classesArray, function(item) {\n            return fontSizeRegExp.test(item);\n        });\n\n        this.italic = _.contains(this.classesArray, 'o_italic');\n        this.bold =_.contains(this.classesArray, 'o_bold');\n        this.underline = _.contains(this.classesArray, 'o_underline');\n\n        this.alignment = _.intersection(this.classesArray, ['text-left', 'text-center', 'text-right'])[0];\n        this.displayAlignment = !_.contains(['inline', 'float'], this.node.$nodes.css('display'));\n\n        this.allClasses = params.node.attrs.class || \"\";\n    },\n    /**\n     * @override\n     */\n    willStart: async function () {\n        await this._super();\n        this._groupColors = await this._getColors();\n    },\n    /**\n     * Override to re-render the color picker on each component rendering.\n     *\n     * @override\n     */\n    renderElement: function() {\n        var self = this;\n        this._super.apply(this, arguments);\n        this.$('.o_web_studio_background_colorpicker .o_web_studio_color_palette').append(this._createPalette());\n        this.$('.o_web_studio_background_colorpicker').on(\"mousedown\", 'button[data-color]', function (e) {\n            self._onColorChange($(e.currentTarget).data('value').replace('text-', 'bg-'), \"background\");\n        });\n        this.$('.o_web_studio_font_colorpicker .o_web_studio_color_palette').append(this._createPalette());\n        this.$('.o_web_studio_font_colorpicker').on(\"mousedown\", 'button[data-color]', function (e) {\n            self._onColorChange($(e.currentTarget).data('value'), \"font\");\n        });\n     },\n\n\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @returns {JQuery Node}\n     */\n    _createPalette: function () {\n        var self = this;\n        var $fontPlugin = $('<div/>');\n        this._groupColors.forEach(function (color) {\n            var $row;\n            if (typeof color === 'string') {\n                $row = $('<h6/>').text(color);\n            } else {\n                $row = $('<div class=\"o_web_studio_color_row\"/>');\n                color.forEach(function (color) {\n                    var $button = $('<button/>').appendTo($row);\n                    $button.attr('data-color', color);\n                    if (color.startsWith('#')) {\n                        $button.css('background-color', color);\n                        $button.attr('data-value', color);\n                    } else {\n                        $button.addClass('bg-' + color);\n                        $button.attr('data-value', 'text-' + color);\n                    }\n                    $row.append($button);\n                });\n            }\n            $fontPlugin.append($row);\n        });\n        return $fontPlugin;\n    },\n    /**\n     * @private\n     * @param {String} marginName the short name of the margin property (mt for\n     * margin top, etc.)\n     * @returns {Integer|undefined}\n     */\n    _findMarginValue: function(marginName) {\n        if (this.node.attrs.style) {\n            var margin = this.node.attrs.style\n                .split(';')\n                .map(function(item) {return item.trim();})\n                .filter(function(item){return !item.indexOf(marginName);});\n            if (margin.length) {\n                var marginValue = margin[0].split(':')[1].trim().replace('px','');\n                return parseInt(marginValue, 10);\n            }\n        }\n    },\n    /**\n     * @private\n     * @returns {Array}\n     */\n    _getColors: async function () {\n        if (!this._colorpickerArch) {\n            this._colorpickerArch = await this._rpc({\n                model: 'ir.ui.view',\n                method: 'render_public_asset',\n                args: ['web_editor.colorpicker', {}],\n            });\n        }\n\n        var groupColors = [];\n        var $clpicker = $(this._colorpickerArch);\n        $clpicker.children('.o_colorpicker_section').each(function () {\n            if (this.dataset.display) {\n                groupColors.push(this.dataset.display);\n            }\n            var colors = [];\n            $(this).children('button').each(function () {\n                var $el = $(this);\n                if (!$el.hasClass('d-none')) {\n                    colors.push($el.attr('data-color') || '');\n                }\n            });\n            if (colors.length) {\n                groupColors.push(colors);\n            }\n            if (this.dataset.name === 'common') {\n                groupColors = groupColors.concat([\n                    ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],\n                    ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],\n                    ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],\n                    ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],\n                    ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],\n                    ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],\n                    ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']\n                ]);\n            }\n        });\n        return groupColors;\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {JQelement} $elem\n     * @param {String} type either font or background\n     */\n    _onColorChange: function (value, type) {\n        var isClass = /^(text|bg)-/ .test(value);\n        if (isClass) {\n            this._editDomAttribute(\"class\", value, type === \"background\" ? this[\"background-color-class\"] : this[\"font-color-class\"]);\n        } else {\n            var attributeName = type === \"background\" ? 'background-color' : 'color';\n            this._editDomAttribute(\"style\", attributeName + ':' + value, this[attributeName]);\n        }\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onClassesChange: function (e) {\n        e.preventDefault();\n        var newAttrs = {class : e.target.value};\n        this.trigger_up('view_change', {\n            node: this.node,\n            operation: {\n                type: 'attributes',\n                new_attrs: newAttrs,\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onCustomColor: function (e) {\n        e.preventDefault();\n        const colorpicker = new ColorpickerDialog(this, {\n            defaultColor: 'rgb(255, 0, 0)',\n        });\n        colorpicker.on('colorpicker:saved', this, (ev) => {\n            var color = ev.data.cssColor;\n            var $button = $('<button/>');\n            $button.attr('data-color', color);\n            $button.attr('data-value', color);\n            $button.css('background-color', color);\n            $(e.target).closest('.dropdown-item').find('.o_web_studio_custom_colors').append($button);\n            $button.mousedown();\n        });\n        colorpicker.open();\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onFontSizeChange: function (e) {\n        e.preventDefault();\n        this._editDomAttribute('class', $(e.currentTarget).data('value'), this.fontSize);\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onTableStyleInputChange: function (e) {\n        e.preventDefault();\n        this._editDomAttribute(\"class\", e.target.value, this.tableStyle);\n    },\n    _onMarginInputChange: function (e) {\n        e.preventDefault();\n        var toRemove, toAdd;\n        if (e.target.value !== \"\") {\n            toAdd = e.target.dataset.margin + ':' + e.target.value + 'px';\n        }\n        if (this[e.target.dataset.margin]) {\n            toRemove = e.target.dataset.margin + ':' + this[e.target.dataset.margin] + 'px';\n        }\n        this._editDomAttribute(\"style\", toAdd, toRemove);\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onResetColor: function (e) {\n        e.preventDefault();\n        if (e.currentTarget.dataset.target === \"background\") {\n            if (this[\"background-color-class\"]) {\n                this._editDomAttribute(\"class\", null, this[\"background-color-class\"]);\n            } else if (this[\"background-color\"]) {\n                this._editDomAttribute(\"style\", null, this[\"background-color\"]);\n            }\n        } else {\n            if (this[\"font-color-class\"]) {\n                this._editDomAttribute(\"class\", null, this[\"font-color-class\"]);\n            } else if (this.color) {\n                this._editDomAttribute(\"style\", null, this.color);\n            }\n        }\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onTextAlignmentChange : function(e) {\n        e.preventDefault();\n        var data = $(e.currentTarget).data();\n        var toAdd = this.alignment !== data.property ? data.property : null;\n        this._editDomAttribute(\"class\", toAdd, this.alignment);\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onTextDecorationChange : function(e) {\n        e.preventDefault();\n        var data = $(e.target).closest(\"button\").data();\n        this._editDomAttribute(\"class\",\n            !this[data.property] && (\"o_\" + data.property),\n            this[data.property] && (\"o_\" + data.property));\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onWidthInputChange: function(e) {\n        e.preventDefault();\n        var addDisplayInlineBlock = \"\";\n        var hasDisplay = _.any((this.node.attrs.style || '').split(';'), function (item) {\n            return _.str.startsWith(item, 'display');\n        });\n        if (this.node.tag.toLowerCase() === 'span' && !hasDisplay) {\n            addDisplayInlineBlock = \";display:inline-block\";\n        }\n        this._editDomAttribute(\"style\", e.target.value && (\"width:\" + e.target.value + \"px\" + addDisplayInlineBlock), this.originalWidth);\n    }\n});\n\nvar TField = AbstractEditComponent.extend({\n    name: 'tfield',\n    template : 'web_studio.ReportDirectiveTField',\n    selector: '[t-field]',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.directiveFields['t-field'] = {\n            type: 'related',\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            var $expr = self.$('.o_web_studio_tfield_fieldexpression');\n            return self.fieldSelector['t-field'].appendTo($expr);\n        });\n    },\n});\n\nvar TIf = AbstractEditComponent.extend({\n    name: 'tif',\n    template : 'web_studio.ReportDirectiveTIf',\n    selector: '',\n    events: _.extend({}, AbstractEditComponent.prototype.events, {\n        \"click .o_field_domain_dialog_button\": \"_onDialogEditButtonClick\",\n    }),\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.directiveFields['t-if'] = {\n            type: 'char',\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        try {\n            Domain.prototype.conditionToDomain(this.node.attrs['t-if'] || '');\n        } catch (e) {\n            console.warn(\"Can't convert the condition in an Odoo domain\", this.node.attrs['t-if'], e);\n            this.$('.o_field_domain_dialog_button').hide();\n        }\n        return this._super.apply(this, arguments).then(function () {\n            return self.fieldSelector['t-if'].appendTo(self.$('.o_web_studio_tif_ifexpression'));\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called when the \"Edit domain\" button is clicked (when using the in_dialog\n     * option) -> Open a DomainSelectorDialog to edit the value\n     *\n     * @param {Event} e\n     */\n    _onDialogEditButtonClick: function (e) {\n        e.preventDefault();\n        var self = this;\n        var availableKeys = this._getContextKeys(this.node);\n        // set a default document on the domain selector\n        var defaultDoc = _.findWhere(availableKeys, {relation: this.context.docs, type: 'many2one'});\n        defaultDoc = defaultDoc && defaultDoc.name || _.first(availableKeys).name;\n        var value = Domain.prototype.conditionToDomain(this.node.attrs['t-if'] || '');\n        var dialog = new DomainSelectorDialog(this, 'record_fake_model', value, {\n            readonly: this.mode === \"readonly\",\n            debugMode: config.isDebug(),\n            fields: availableKeys,\n            default: [[defaultDoc, '!=', false]],\n            operators: [\"=\", \"!=\", \">\", \"<\", \">=\", \"<=\", \"in\", \"not in\", \"set\", \"not set\"],\n        }).open();\n        dialog.on(\"domain_selected\", this, function (e) {\n            var condition = Domain.prototype.domainToCondition(e.data.domain);\n            self.$('input').val(condition === 'True' ? '' : condition).trigger('change');\n        });\n    },\n\n    /**\n    * @override\n    */\n    _onDirectiveChange: function (e) {\n        if (e.target.name === \"t-if\") {\n            return this._super.apply(this, arguments);\n        }\n        e.stopPropagation();\n    },\n    _isSameValue(value) {\n        const currentValue = this.node.attrs['t-if'];\n        const newValue = value['t-if'];\n        if (!currentValue || !newValue || typeof newValue !== \"string\") {\n            return currentValue === newValue;\n        }\n        function normalizeValue(value) {\n            const charset = {\n                \"'\": /\"/,\n                \"[\": /\\(/,\n                \"]\": /\\)/,\n                \"','\": /',\\s+'/,\n                \"']\": /'\\s+]/,\n                \"['\": /\\[\\s+'/,\n            }\n            for (const key in charset) {\n                const toReplace = new RegExp(charset[key], \"g\");\n                value = value.replace(toReplace, key);\n            }\n            return value;\n        }\n        return normalizeValue(currentValue) == normalizeValue(newValue);\n    },\n    _triggerViewChange: function (newAttrs) {\n        if (!this._isSameValue(newAttrs)) {\n            this._super.apply(this, arguments);\n        }\n    },\n});\n\nvar TElse = AbstractEditComponent.extend({\n    name: 'telse',\n    template : 'web_studio.ReportDirectiveTElse',\n    selector: '[t-else]',\n    insertAsLastChildOfPrevious: true,\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.tIf = this.node.parent.children[this.node.parent.children.indexOf(this.node) - 1].attrs['t-if'];\n        this.directiveFields['t-else'] = {\n            type: 'boolean',\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return self.fieldSelector['t-else'].appendTo(self.$('.o_web_studio_telse_elseexpression'));\n        });\n    },\n    /**\n     * @override\n     */\n    _triggerViewChange: function (newAttrs) {\n        this.trigger_up('view_change', {\n            node: this.node,\n            operation: {\n                type: 'attributes',\n                new_attrs: {\n                    't-else': newAttrs['t-else'] ? 'else' : null,\n                },\n            },\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n});\n\nvar TEsc = AbstractEditComponent.extend({\n    name: 'tesc',\n    template : 'web_studio.ReportDirectiveTEsc',\n    selector: '[t-esc]',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.directiveFields['t-esc'] = {\n            type: 'related',\n            freecode: true,\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return self.fieldSelector['t-esc'].appendTo(self.$('.o_web_studio_tesc_escexpression'));\n        });\n    },\n});\n\nvar TSet = AbstractEditComponent.extend({\n    name: 'tset',\n    template : 'web_studio.ReportDirectiveTSet',\n    selector: '[t-set]',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n\n        this.directiveFields['t-set'] = {\n            type: 'char',\n        };\n        this.directiveFields['t-value'] = {\n            type: 'related',\n            freecode: true,\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.all([\n                self.fieldSelector['t-set'].appendTo(self.$('.o_web_studio_tset_setexpression')),\n                self.fieldSelector['t-value'].appendTo(self.$('.o_web_studio_tset_valueexpression'))\n            ]);\n        });\n    },\n});\n\nvar TForeach = AbstractEditComponent.extend({\n    name: 'tforeach',\n    template : 'web_studio.ReportDirectiveTForeach',\n    debugSelector: '[t-foreach]',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.directiveFields['t-foreach'] = {\n            type: 'related',\n            freecode: true,\n            loop: true,\n        };\n        this.directiveFields['t-as'] = {\n            type: 'char',\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.all([\n                self.fieldSelector['t-as'].appendTo(self.$('.o_web_studio_tas_asexpression')),\n                self.fieldSelector['t-foreach'].appendTo(self.$('.o_web_studio_tforeach_foreachexpression'))\n            ]);\n        });\n    },\n});\n\nvar BlockTotal = AbstractEditComponent.extend({\n    name: 'blockTotal',\n    template : 'web_studio.BlockTotal',\n    selector: '.o_report_block_total',\n    blacklist: 't, tr, td, th, small, span',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.directiveFields.total_amount_untaxed = {\n            type: 'related',\n            value: this.node.children[2].attrs['t-value'],\n            filter: function (field) {\n                return _.contains(['many2one', 'float', 'monetary'], field.type);\n            },\n            followRelations: function (field) {\n                return field.type === 'many2one';\n            },\n        };\n        this.directiveFields.total_currency_id = {\n            type: 'related',\n            value: this.node.children[0].attrs['t-value'],\n            filter: function (field) {\n                return field.type === 'many2one';\n            },\n            followRelations: function (field) {\n                return field.type === 'many2one' && field.relation !== 'res.currency';\n            },\n        };\n        this.directiveFields.total_amount_total = {\n            type: 'related',\n            value: this.node.children[1].attrs['t-value'],\n            filter: function (field) {\n                return _.contains(['many2one', 'float', 'monetary'], field.type);\n            },\n            followRelations: function (field) {\n                return field.type === 'many2one';\n            },\n        };\n        this.directiveFields.total_amount_by_groups = {\n            type: 'related',\n            value: this.node.children[3].attrs['t-value'],\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.all([\n                self.fieldSelector.total_currency_id.appendTo(self.$('.o_web_studio_report_currency_id')),\n                self.fieldSelector.total_amount_untaxed.appendTo(self.$('.o_web_studio_report_amount_untaxed')),\n                self.fieldSelector.total_amount_total.appendTo(self.$('.o_web_studio_report_amount_total')),\n                self.fieldSelector.total_amount_by_groups.appendTo(self.$('.o_web_studio_report_amount_by_groups'))\n            ]);\n        });\n    },\n    /**\n     * @override\n     */\n    _triggerViewChange: function (newAttrs) {\n        this._tSetAttributes(newAttrs);\n    },\n});\n\nvar Column = AbstractEditComponent.extend({\n    name: 'column',\n    template : 'web_studio.ReportColumn',\n    selector: 'div[class*=col-]',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n\n        this.classes = (this.node.attrs.class || \"\").split(' ');\n        // TODO: deal with multiple classes (ex: col-6 col-md-3)\n        this.sizeClass = _.find(this.classes, function (item) {\n            return item.indexOf('col-') !== -1;\n        }) || '';\n        this.offsetClass = _.find(this.classes, function (item) {\n            return item.indexOf('offset-') !== -1;\n        }) || '';\n        this.size = +this.sizeClass.split('col-')[1];\n        this.offset = +this.offsetClass.split('offset-')[1];\n        this.directiveFields.size = {\n            type: 'integer',\n            value: this.size,\n        };\n        this.directiveFields.offset = {\n            type: 'integer',\n            value: this.offset,\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.all([\n                self.fieldSelector.size.prependTo(self.$('.o_web_studio_size')),\n                self.fieldSelector.offset.prependTo(self.$('.o_web_studio_offset'))\n            ]);\n        });\n    },\n    /**\n     * @override\n     */\n    _triggerViewChange: function (newAttrs) {\n        if ('size' in newAttrs && newAttrs.size >= 0) {\n            this._editDomAttribute(\"class\", 'col-' + newAttrs.size, this.sizeClass);\n        } else if ('offset' in newAttrs && newAttrs.offset >= 0) {\n            this._editDomAttribute(\"class\", 'offset-' + newAttrs.offset, this.offsetClass);\n        }\n    },\n});\n\nvar Table = AbstractEditComponent.extend({\n    selector: 'table.o_report_block_table',\n    blacklist: 'thead, tbody, tfoot, tr, td[colspan=\"99\"]',\n});\n\nvar TextSelectorTags = 'span, p, h1, h2, h3, h4, h5, h6, blockquote, pre, small, u, i, b, font, strong, ul, li, dl, dt, ol, th, td';\nvar filter = ':not([t-field]):not(:has(t, [t-' + QWeb2.ACTIONS_PRECEDENCE.join('], [t-field], [t-') + ']))';\nvar Text = AbstractEditComponent.extend({\n    name: 'text',\n    template : 'web_studio.ReportText',\n    selector: TextSelectorTags.split(',').join(filter + ',') + filter,\n    blacklist: TextSelectorTags,\n    custom_events: {\n        wysiwyg_blur: '_onBlurWysiwygEditor',\n    },\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.$node = $(utils.json_node_to_xml(this.node));\n        this.$node.find('*').add(this.$node).each(function () {\n                var node = this;\n                _.each(Array.prototype.slice.call(node.attributes), function (attr) {\n                    if (!attr.name.indexOf('data-oe-')) {\n                        node.removeAttribute(attr.name);\n                    }\n                });\n            });\n        this.directiveFields.text = {\n            type: 'text',\n            value: utils.xml_to_str(this.$node[0]).split('>').slice(1).join('>').split('</').slice(0, -1).join('</'),\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments)\n            .then(function () {\n                return self.fieldSelector.text.appendTo(self.$('.o_web_studio_text'));\n            }).then(function () {\n                return self._startWysiwygEditor();\n            });\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    _onBlurWysiwygEditor: function () {\n        this._triggerViewChange({text: this.wysiwyg.getValue()});\n    },\n    _startWysiwygEditor: function () {\n        var self = this;\n        const options = {\n            lang: \"odoo\",\n            recordInfo: {context: this.context},\n            value: this.directiveFields.text.value,\n            resizable: true,\n            toolbarTemplate: 'web_studio.Sidebar.web_editor_toolbar',\n        };\n        this.wysiwyg = new Wysiwyg(this, options);\n        this.$textarea = this.$('textarea:first').val(this.directiveFields.text.value);\n\n        this.$textarea.after(this.$wysiwygWrapper);\n        this.$textarea.hide();\n\n        this.$textarea.off().on('input', function (e) { // to test simple\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            self.wysiwyg.setValue($(this).val());\n            self.wysiwyg.trigger_up('wysiwyg_blur');\n        });\n\n        return this.wysiwyg.insertAfter(this.$textarea);\n    },\n    /**\n     * @override\n     */\n    _triggerViewChange: function (newAttrs) {\n        var node = this.node;\n        var $node = this.$node.clone().html(newAttrs.text);\n        var xml = utils.xml_to_str($node[0]).replace(/ xmlns=\"[^\"]+\"/, \"\");\n        this.trigger_up('view_change', {\n            node: node,\n            operation: {\n                inheritance: [{\n                    content: xml,\n                    position: \"replace\",\n                    view_id: +node.attrs['data-oe-id'],\n                    xpath: node.attrs['data-oe-xpath']\n                }],\n            },\n        });\n    },\n});\n\nvar Image = LayoutEditable.extend({\n    name: 'image',\n    template: 'web_studio.ReportImage',\n    selector: 'img',\n    /**\n     * @override\n     */\n    init: function() {\n        this._super.apply(this, arguments);\n        this.directiveFields.src = {\n            type: 'text', value: this.node.attrs.src\n        };\n    },\n    /**\n     * @override\n     */\n    start: function() {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return self.fieldSelector.src.appendTo(self.$('.o_web_studio_source'));\n        });\n    },\n});\n\nvar Groups = AbstractEditComponent.extend({\n    name: 'groups',\n    template: 'web_studio.ReportGroups',\n    insertAsLastChildOfPrevious: true,\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n\n        var groups = this.node.attrs.studio_groups && JSON.parse(this.node.attrs.studio_groups);\n        this.directiveFields.groups = {\n            name: 'groups',\n            fields: [{\n                name: 'id',\n                type: 'integer',\n            }, {\n                name: 'display_name',\n                type: 'char',\n            }],\n            value: groups,\n            relation: 'res.groups',\n            type: 'many2many',\n            Widget: 'many2many_tags',\n        };\n    },\n    /**\n     * @override\n     */\n    start: function() {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return self.fieldSelector.groups.appendTo(self.$('.o_web_studio_groups'));\n        });\n    },\n});\n\nvar TOptions = AbstractEditComponent.extend( {\n    name: 'toptions',\n    template : 'web_studio.ReportDirectiveTOptions',\n    selector: '[t-field], [t-esc]',\n    insertAsLastChildOfPrevious: true,\n    events: _.extend({}, AbstractEditComponent.prototype.events, {\n        'change select:first': '_onChangeWidget',\n    }),\n    /**\n     * @override\n     * @param {Object} [params.widgetsOptions]\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n\n        this.changes = {};\n        this.widgetsOptions = params.widgetsOptions;\n\n        // for contact widget, we don't want to display all options\n        if (this.widgetsOptions && this.widgetsOptions.contact) {\n            this.widgetsOptions.contact = _.pick(this.widgetsOptions.contact, [\n                'fields',\n                'separator',\n                'no_marker',\n            ]);\n        }\n\n        this.widget = null;  // the selected widget\n        this.values = {};  // dict containing the t-options values\n\n        this._extractTOptions();\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        var self = this;\n\n        // create fields for each widget options\n        var directiveFields = this.directiveFields;\n        this.widgets = _.map(this.widgetsOptions, function (widgetConf, widgetKey) {\n            var values = self.values.widget === widgetKey ? self.values : {};\n\n            var options = _.map(widgetConf, function (option, optionKey) {\n                option.key = optionKey;\n                if (option.default_value) {\n                    option.default_value = option.default_value;\n                }\n                var required = typeof option.required === 'string' ?\n                        option.required === 'value_to_html' && !('t-field' in self.node.attrs) :\n                        option.required;\n                var params = {\n                    key: option.key,\n                    string: option.string,\n                    required: required,\n                    attributeName: 't-options-' + optionKey,\n                    value: values[optionKey],\n                };\n                switch (option.type) {\n                    case 'model':\n                        params.type = 'related';\n                        //filter => m2o > model name\n                        break;\n                    case 'boolean':\n                        params.type = 'boolean';\n                        break;\n                    case 'select':\n                        params.type = 'selection';\n                        params.selection = option.params;\n                        break;\n                    case 'float':\n                        params.type = 'float';\n                        break;\n                    case 'integer':\n                        params.type = 'integer';\n                        break;\n                    case 'date':\n                    case 'datetime':\n                        params.type = 'related';\n                        params.filter = function (field) {\n                            return field.type === 'many2one' || field.type === 'datetime';\n                        };\n                        params.followRelations = function (field) {\n                            return field.type === 'many2one';\n                        };\n                        // free object date / datetime\n                        params.freecode = true;\n                        break;\n                    case 'array':\n                        if (option.params && option.params.type === 'selection') {\n                            params.type = 'many2many';\n                            params.Widget = 'many2many_select';\n                            params.value = params.value && params.value.length ? params.value : option.default_value || [];\n                            params.selection = option.params.params;\n                        } else {\n                            params.type = 'char';\n                            params.value = JSON.stringify(params.value);\n                        }\n                        break;\n                    case 'selection':\n                        if (option.params && option.params.type === 'selection' && option.params.selection) {\n                            params.type = option.params.type;\n                            params.value = params.value ? params.value : option.default_value || false;\n                            params.placeholder = option.params.placeholder || '';\n                            params.selection = option.params.selection || [];\n                        } else {\n                            params.type = 'char';\n                        }\n                        break;\n                    default:\n                        params.type = 'char';\n                }\n\n                directiveFields[widgetKey + ':' + optionKey] = params;\n\n                return params;\n            });\n            options.sort(function (a, b) {\n                return (a.type === 'boolean' && b.type === 'boolean' ?\n                        a.string.localeCompare(b.string) :\n                        a.type === 'boolean' && a.key !== 'no_marker' ? -1 : 1);\n            });\n\n            return {\n                key: widgetKey,\n                string: widgetKey,\n                options: options,\n            };\n        });\n        this.widgets.sort(function (a, b) {\n            return a.string.localeCompare(b.string);\n        });\n\n        // selected widget\n        this.widget = _.findWhere(this.widgets, {key: this.values.widget && this.values.widget});\n\n        return this._super.apply(this, arguments);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var defs = [this._super.apply(this, arguments)];\n        if (this.widget) {\n            this.$('.o_web_studio_toption_widget select').val(this.widget.key);\n            defs.push(this._updateWidgetOptions());\n        }\n        return Promise.all(defs);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Extracts t-options widget and options for this node.\n     *\n     * @private\n     */\n    _extractTOptions: function () {\n        this.values = py.extract(this.node.attrs['t-options'] || '{}');\n        for (var k in this.node.attrs) {\n            if (k.slice(0, 10) === 't-options-') {\n                this.values[k.slice(10)] = py.extract(this.node.attrs[k]);\n            }\n        }\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _updateWidgetOptions: function () {\n        var self = this;\n        this.$('button').toggleClass('hidden', !this.widget || !this.widget.options.length);\n        this.$('.o_web_studio_toption_options').remove();\n        if (!this.widget || !this.widget.options.length) {\n            return;\n        }\n        var $options = $(qweb.render('web_studio.ReportDirectiveTOptions.options', this));\n        var mountedComponents = [];\n        var defs = _.map(this.widget.options, function (option) {\n            var $option = $options.find('.o_web_studio_toption_option_' + self.widget.key + '_' + option.key);\n            var field = self.fieldSelector[self.widget.key + ':' + option.key];\n            if (field instanceof owl.Component) {\n                mountedComponents.push(field);\n                if (option.type === \"boolean\") {\n                    return field.mount($option.find('label')[0], {position: 'first-child'});\n                } else {\n                    return field.mount($option[0]);\n                }\n            } else {\n                if (option.type === \"boolean\") {\n                    return field.prependTo($option.find('label'));\n                } else {\n                    return field.appendTo($option);\n                }\n            }\n\n        });\n        return Promise.all(defs).then (function () {\n            self.$el.find('.o_studio_report_options_container').append($options);\n            if (!self.isDestroyed()) {\n                mountedComponents.forEach(widget => widget.on_attach_callback());\n            }\n        });\n    },\n    /**\n     * @private\n     * @override\n     */\n    _triggerViewChange: function (newAttrs) {\n        var self = this;\n        var changes = {};\n\n        // this.widget is the recently set `widget` key\n        if (this.widget) {\n            var options = _.findWhere(this.widgets, {key: this.widget.key}).options;\n\n            if (this.values.widget !== this.widget.key) {\n                changes['t-options-widget'] = '\"' + this.widget.key + '\"';\n            }\n            _.each(newAttrs, function (val, key) {\n                var field = key.split(':');\n                if (self.widget.key === field[0]) {\n                    var option = _.findWhere(options, {key: field[1]});\n                    var value = val;\n                    if (value) {\n                        if (option.type === 'char' || option.type === 'selection') {\n                            value = '\"' + val.replace(/\"/g, '\\\\\"') + '\"';\n                        }\n                    }\n\n                    if (option.format) {\n                        value = option.format(value);\n                    }\n\n                    if ((self.widget.key !== self.values.widget || value !== self.values[key])) {\n                        changes['t-options-' + field[1]] = value;\n                    }\n                }\n            });\n        } else {\n            changes['t-options-widget'] = '\"\"';\n            // TODO: remove all other set t-options-..\n            // t-options='\"{}\"' doesn't work because t-options-.. has precedence\n        }\n        this.trigger_up('view_change', {\n            node: this.node,\n            operation: {\n                type: 'attributes',\n                new_attrs: changes,\n            },\n        });\n    },\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onChangeWidget: function (ev) {\n        var widget = _.findWhere(this.widgets, {key: $(ev.target).val()});\n        if (widget !== this.widget) {\n            this.widget = widget;\n            this._triggerViewChange({});\n        }\n        this._updateWidgetOptions();\n    },\n    /**\n     * @override\n     */\n    _onDirectiveChange: function (e) {\n        if (e.target.name === 'contact:fields') {\n            // this field uses a special FieldWidget (many2many_select) which is\n            // not a real FieldWidget so the changes are not formatted as\n            // expected\n            e.stopPropagation();\n            var changes = _.clone(e.data.changes);\n            var key = _.keys(changes)[0];\n            changes[key] = changes[key].ids;\n            this._triggerViewChange(changes);\n        } else {\n            this._super.apply(this, arguments);\n        }\n    },\n});\n\nreturn {\n    BlockTotal: BlockTotal,\n    Column: Column,\n    Groups: Groups,\n    Image: Image,\n    LayoutEditable: LayoutEditable,\n    Table: Table,\n    Text: Text,\n    TField: TField,\n    TForeach: TForeach,\n    TElse: TElse,\n    TEsc: TEsc,\n    TIf: TIf,\n    TOptions: TOptions,\n    TSet: TSet,\n};\n\n});\n", "odoo.define('web_studio.reportEditComponentsRegistry', function (require) {\n\"use strict\";\n\nvar Registry = require('web.Registry');\nvar reportEditComponents = require('web_studio.reportEditComponents');\n\nvar registry = new Registry();\n\nregistry\n    .add('column', reportEditComponents.Column)\n    .add('groups', reportEditComponents.Groups)\n    .add('layout', reportEditComponents.LayoutEditable)\n    .add('image', reportEditComponents.Image)\n    .add('table', reportEditComponents.Table)\n    .add('text', reportEditComponents.Text)\n    .add('total', reportEditComponents.BlockTotal)\n    .add('tEsc', reportEditComponents.TEsc)\n    .add('tElse', reportEditComponents.TElse)\n    .add('tField', reportEditComponents.TField)\n    .add('tForeach', reportEditComponents.TForeach)\n    .add('tIf', reportEditComponents.TIf)\n    .add('tOptions', reportEditComponents.TOptions)\n    .add('tSet', reportEditComponents.TSet);\n\nreturn registry;\n\n});\n", "odoo.define('web_studio.reportNewComponents', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar weWidgets = require('wysiwyg.widgets');\n\nvar Abstract = require('web_studio.AbstractReportComponent');\nvar NewFieldDialog = require('web_studio.NewFieldDialog');\n\nvar _t = core._t;\nvar _lt = core._lt;\n\nvar AbstractNewBuildingBlock = Abstract.extend({\n    type: false,\n    structure: false,\n    label: false,\n    fa: false,\n    description: false,\n    addEmptyRowsTargets: true,\n    events: _.extend({}, Abstract.prototype.events, {\n        mouseenter: '_onHover',\n        focusin: '_onHover',\n        mouseleave: '_onStopHover',\n        focusout: '_onStopHover',\n    }),\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        this.$el.addClass('o_web_studio_component');\n        this.$el.text(this.label);\n        if (this.fa) {\n            this.$el.append('<i class=\"fa ' + this.fa + '\">');\n        }\n        if (config.isDebug() && this.description) {\n            this.$el.addClass('o_web_studio_debug');\n            this.$el.append($('<div>')\n                .addClass('o_web_studio_component_description')\n                .text(this.description)\n            );\n        }\n        var dragFunction = _.cancellableThrottleRemoveMeSoon(function (e) {\n                self.trigger_up('drag_component', {\n                    position: { pageX: e.pageX, pageY: e.pageY },\n                    widget: self,\n                });\n            }, 100);\n        this.$el.draggable({\n            helper: 'clone',\n            opacity: 0.4,\n            scroll: false,\n            // revert: 'invalid',  // this causes _setTimeout in tests for stop\n            revertDuration: 200,\n            refreshPositions: true,\n            iframeFix: true,\n            start: function (e, ui) {\n                $(ui.helper).addClass(\"ui-draggable-helper\");\n                self.trigger_up('begin_drag_component', {\n                    widget: self\n                });\n            },\n            drag: dragFunction,\n            stop: function (e) {\n                dragFunction.cancel();\n                self.trigger_up('drop_component', {\n                    position: { pageX: e.pageX, pageY: e.pageY },\n                    widget: self,\n                });\n            }\n        });\n\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * To be overriden.\n     *\n     * @param {Object} options\n     * @param {Object[]} options.targets\n     * @param {Integer} [options.oeIndex]\n     * @returns {Promise<Object>}\n     */\n    add: function (options) {\n        this.targets = options.targets;\n        var first = options.targets[0];\n        this.index = first.data.oeIndex;\n        this.position = first.data.oePosition;\n        this.node = first.node;\n        return Promise.resolve({\n            type: this.type,\n            options: {\n                columns: this.dropColumns,\n                index: first.data.oeIndex,\n            },\n        });\n    },\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n    /**\n     * @private\n     * @param {MouseEvent} e\n     */\n    _onHover: function (e) {\n        this.trigger_up('begin_preview_drag_component', {\n            widget: this,\n        });\n    },\n\n    /**\n     * @private\n     * @param {MouseEvent} e\n     */\n    _onStopHover: function (e) {\n        this.trigger_up('end_preview_drag_component', {\n            widget: this,\n        });\n    },\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n    /**\n     * create td and th in table, manage colspan.\n     *\n     * @param {Object} options\n     * @param {string} options.head\n     * @param {string} options.headLoop\n     * @param {string} options.body\n     * @param {string} options.bodyLoop\n     * @param {string} options.foot\n     * @param {string} options.footLoop\n     * @returns {Object}\n     */\n    _createReportTableColumn: function (options) {\n        var self = this;\n        var inheritance = [];\n        var updatedNodes = [];\n\n        // add cells in rows\n\n        _.each(this.targets, function (target) {\n            var node = target.node;\n            var inheritanceItem;\n            if (node.tag === 'th' || node.tag === 'td') {\n                var loop = self._findParentWithTForeach(node) ? true : false;\n                var dataName = loop ? 'Loop' : '';\n                var content = '<' + node.tag + '>';\n                if (node.tag === 'th' || node.parent.parent.tag === 'thead') {\n                    content += options['head' + dataName] || options.head || '';\n                } else if (node.parent.parent.tag === 'tfoot') {\n                    content += options['foot' + dataName] || options.foot || '';\n                } else {\n                    content += options['body' + dataName] || options.body || '';\n                }\n                content += '</' + node.tag + '>';\n\n                updatedNodes.push(node);\n                inheritanceItem = {\n                    content: content,\n                    position: target.position,\n                    xpath: node.attrs['data-oe-xpath'],\n                    view_id: +node.attrs['data-oe-id'],\n                };\n            } else if (node.tag === 'tr') {\n                updatedNodes.push(node);\n                inheritanceItem = {\n                    content: '<td>' + (options.tbody || '') + '</td>',\n                    position: target.position,\n                    xpath: node.attrs['data-oe-xpath'],\n                    view_id: +node.attrs['data-oe-id'],\n                };\n            }\n            inheritance.push(inheritanceItem);\n        });\n\n        // colspan\n        var cellsToGrow = [];\n        _.each(this.targets, function (target) {\n            var node = target.node;\n            if (target.position !== 'after') {\n                return;\n            }\n\n            // define td index\n\n            var nodeIndex = 0;\n            var nodeRow = self._getParentNode(node, function (node) { return node.tag === 'tr'; });\n            var cells = self._getChildrenNode(nodeRow, function (node) { return node.tag === 'td' || node.tag === 'th'; });\n            for (var k = 0; k < cells.length; k++) {\n                nodeIndex += +(cells[k].attrs.colspan || 1);\n                if (cells[k] === node) {\n                    break;\n                }\n            }\n\n            // select colspan to grow\n\n            var table = self._getParentNode(node, function (node) { return node.tag === 'table'; });\n            var rows = self._getChildrenNode(table, function (node) { return node.tag === 'tr'; });\n            _.each(rows, function (row) {\n                if (row === nodeRow) {\n                    return;\n                }\n\n                var cells = self._getChildrenNode(row, function (node) { return node.tag === 'td' || node.tag === 'th'; });\n\n                var cellIndex = 0;\n                for (var k = 0; k < cells.length; k++) {\n                    var cell = cells[k];\n                    cellIndex += +(cell.attrs.colspan || 1);\n                    if (cellIndex >= nodeIndex) {\n                        if (((+cell.attrs.colspan) > 1) && cellsToGrow.indexOf(cell) === -1) {\n                            cellsToGrow.push(cell);\n                        }\n                        break;\n                    }\n                }\n            });\n        });\n        _.each(cellsToGrow, function (node) {\n            inheritance.push({\n                content: '<attribute name=\"colspan\">' + ((+node.attrs.colspan) + 1) + '</attribute>',\n                position: 'attributes',\n                xpath: node.attrs['data-oe-xpath'],\n                view_id: +node.attrs['data-oe-id'],\n            });\n        });\n\n        return inheritance;\n    },\n    _createStructure: function (options) {\n        var xml = ['<div class=\"row'];\n        if (this.structureClass) {\n            xml.push(' ' + this.structureClass);\n        }\n        xml.push('\">');\n        for (var k = 0; k < this.dropColumns.length; k++) {\n            var column = this.dropColumns[k];\n            xml.push('<div class=\"col-');\n            xml.push(column[1]);\n            if (column[0]) {\n                xml.push(' offset-');\n                xml.push(column[0]);\n            }\n            xml.push('\">');\n            if (options.content && (k === options.index || options.fillStructure)) {\n                xml.push(options.content);\n            }\n            xml.push('</div>');\n        }\n        xml.push('</div>');\n\n        return [{\n            content: xml.join(''),\n            position: this.position,\n            xpath: this.node.attrs['data-oe-xpath'],\n            view_id: +this.node.attrs['data-oe-id'],\n        }];\n    },\n    _createContent: function (options) {\n        if (this.dropColumns && typeof this.index === 'number') {\n            return this._createStructure({\n                index: this.index,\n                content: options.contentInStructure || options.content,\n                fillStructure: options.fillStructure || false,\n            });\n        } else {\n            return _.map(this.targets, function (target) {\n                var isCol = (target.node.attrs.class || '').match(/(^|\\s)(col(-[0-9]+)?)(\\s|$)/);\n                return {\n                    content: isCol ? options.contentInStructure || options.content : options.content,\n                    position: target.position,\n                    xpath: target.node.attrs['data-oe-xpath'],\n                    view_id: +target.node.attrs['data-oe-id'],\n                };\n            });\n        }\n    },\n    _getParentNode: function (node, fn) {\n        while (node) {\n            if (fn(node)) {\n                return node;\n            }\n            node = node.parent;\n        }\n    },\n    /**\n     * TODO: rewrite this function\n     */\n    _getChildrenNode: function (parent, fn) {\n        var children = [];\n        var stack = [parent];\n        parent = stack.shift();\n        while (parent) {\n            if (parent.children) {\n                for (var k = 0; k < parent.children.length; k++) {\n                    var node = parent.children[k];\n                    if (fn(node)) {\n                        children.push(node);\n                    }\n                }\n                stack = parent.children.concat(stack);\n            }\n            parent = stack.shift();\n        }\n        return children;\n    },\n    /**\n     * Goes through the hierachy of parents of the node in parameter until we\n     * find the closest parent with a t-foreach defined on it.\n     *\n     * @private\n     * @param {Object} node\n     * @returns {Object|undefined} node that contains a t-foreach as parent of the node in parameter\n     */\n    _findParentWithTForeach: function (node) {\n        if (!node || !node.parent || (node.tag === \"div\" && node.attrs.class === \"page\")) {\n            return;\n        }\n        if (node.attrs[\"t-foreach\"]) {\n            return node;\n        }\n        return this._findParentWithTForeach(node.parent);\n    },\n});\nvar TextSelectorTags = 'span, p, h1, h2, h3, h4, h5, h6, blockquote, pre, small, u, i, b, font, strong, ul, li, dl, dt, ol, .page > .row > div:empty';\nvar filter = ':not([t-field]):not(:has(t, [t-' + QWeb2.ACTIONS_PRECEDENCE.join('], [t-') + ']))';\n\n// ----------- TEXT -----------\n\nvar BlockText = AbstractNewBuildingBlock.extend({\n    type: 'text',\n    label: _lt('Text'),\n    dropIn: '.page',\n    className: 'o_web_studio_field_char',\n    hookClass: 'o_web_studio_block_char',\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: self._createContent({\n                    content: '<div class=\"row\"><div class=\"col\"><span>New Text Block</span></div></div>',\n                })\n            });\n        });\n    },\n});\n\nvar InlineText = AbstractNewBuildingBlock.extend({\n    type: 'text',\n    label: _lt('Text'),\n    className: 'o_web_studio_field_char',\n    hookClass: 'o_web_studio_hook_inline',\n    hookAutoHeight: true,\n    dropIn: TextSelectorTags.split(',').join(filter + '|') + filter,\n    selectorSeparator: '|',\n    hookTag: 'span',\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: self._createContent({\n                    content: '<span>New Text Block</span>',\n                })\n            });\n        });\n    },\n});\n\nvar ColumnHalfText = AbstractNewBuildingBlock.extend({\n    type: 'text',\n    label: _lt('Two Columns'),\n    dropIn: '.page',\n    className: 'o_web_studio_field_fa',\n    fa: 'fa-align-left',\n    hookClass: 'o_web_studio_block_char',\n    hookTag: 'div',\n    dropColumns: [[0, 6], [0, 6]],\n    addEmptyRowsTargets: false,\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: self._createContent({\n                    fillStructure: true,\n                    contentInStructure: '<span>New Column</span>',\n                })\n            });\n        });\n    },\n});\n\nvar ColumnThirdText = AbstractNewBuildingBlock.extend({\n    type: 'text',\n    label: _lt('Three Columns'),\n    dropIn: '.page',\n    className: 'o_web_studio_field_fa',\n    fa: 'fa-align-left',\n    hookClass: 'o_web_studio_block_char',\n    hookTag: 'div',\n    dropColumns: [[0, 4], [0, 4], [0, 4]],\n    addEmptyRowsTargets: false,\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: self._createContent({\n                    fillStructure: true,\n                    contentInStructure: '<span>New Column</span>',\n                })\n            });\n        });\n    },\n});\n\nvar TableCellText = AbstractNewBuildingBlock.extend({\n    type: 'text',\n    label: _lt('Text in Cell'),\n    className: 'o_web_studio_field_char',\n    hookAutoHeight: false,\n    hookClass: 'o_web_studio_hook_inline',\n    dropIn: 'td, th',\n    hookTag: 'span',\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: self._createContent({\n                    content: '<span>New Text Block</span>',\n                })\n            });\n        });\n    },\n});\n\n\n// ----------- FIELD -----------\n/**\n * Defines the behavior of a field building block. It behaves by default by asking\n * the user to select a field in a model, and takes the first target as\n * destination node\n */\nvar AbstractFieldBlock = AbstractNewBuildingBlock.extend({\n    type: 'field',\n    add: function () {\n        var self = this;\n        return self._super.apply(this, arguments).then(function() {\n            return new Promise(function (resolve, reject) {\n                var field = {\n                    order: 'order',\n                    type: 'related',\n                    filters: { searchable: false },\n                filter: function (field) {\n                    // For single fields (i.e. NOT a table), forbid putting x2many's\n                    // Because it just doesn't make sense otherwise\n                    return ! _.contains(['one2many', 'many2many'], field.type);\n                }\n                };\n\n                var target = self.targets[0];\n                if (self._filterTargets) {\n                    target = self._filterTargets() || target;\n                }\n\n                var availableKeys = _.filter(self._getContextKeys(target.node), function (field) {\n                    // \"docs\" is a technical object referring to all records selected to issue the report for\n                    // it shouldn't be manipulated by the user\n                    return !!field.relation && field.name !== 'docs';\n                });\n                var fieldChain = [];\n                if (availableKeys.length) {\n                    fieldChain.push(_.first(availableKeys).name);\n                }\n                var dialog = new NewFieldDialog(self, 'record_fake_model', field, availableKeys, fieldChain).open();\n                dialog.on('field_default_values_saved', self, function (values) {\n                    if (values.related.split('.').length < 2) {\n                        Dialog.alert(self, _t('The record field name is missing'));\n                    } else {\n                        resolve({\n                            inheritance: self._dataInheritance(values),\n                        });\n                        dialog.close();\n                    }\n                });\n                dialog.on('closed', self, function () {\n                    reject();\n                });\n            });\n        });\n    },\n});\n\nvar BlockField = AbstractFieldBlock.extend({\n    label: _lt('Field'),\n    className: 'o_web_studio_field_many2one',\n    hookClass: 'o_web_studio_hook_field',\n    dropIn: '.page',\n    _dataInheritance: function (values) {\n        var $field = $('<span/>').attr('t-field', values.related);\n        if (values.type === 'binary') {\n            $field.attr('t-options-widget', '\"image\"');\n        }\n        var fieldHTML = $field.prop('outerHTML');\n\n        return this._createContent({\n            content: \"<div class='row'><div class='col'>\" + fieldHTML + \"</div></div>\",\n        });\n    },\n});\n\nvar InlineField = AbstractFieldBlock.extend({\n    label: _lt('Field'),\n    className: 'o_web_studio_field_many2one',\n    hookClass: 'o_web_studio_hook_inline',\n    hookAutoHeight: true,\n    dropIn: TextSelectorTags.split(',').join(filter + '|') + filter,\n    selectorSeparator: '|',\n    hookTag: 'span',\n    _dataInheritance: function (values) {\n        var $field = $('<span/>').attr('t-field', values.related);\n        if (values.type === 'binary') {\n            $field.attr('t-options-widget', '\"image\"');\n        }\n        var fieldHTML = $field.prop('outerHTML');\n        if (this.node.tag === 'td' || this.node.tag === 'th') {\n            return this._createReportTableColumn({\n                head: $('<span/>').text(values.string).prop('outerHTML'),\n                bodyLoop: fieldHTML,\n            });\n        } else {\n            return this._createContent({\n                content: fieldHTML,\n            });\n        }\n    },\n    _filterTargets: function () {\n        var self = this;\n        var target = this.targets[0];\n        if (this.targets.length > 1 && (target.node.tag === 'td' || target.node.tag === 'th')) {\n            target = _.find(this.targets, function (target) {\n                return self._findParentWithTForeach(target.node) ? true : false;\n            });\n        }\n        return target;\n    },\n});\n\nvar TableColumnField = AbstractFieldBlock.extend({\n    label: _lt('Field Column'),\n    className: 'o_web_studio_field_fa',\n    fa: ' fa-plus-square',\n    hookAutoHeight: true,\n    hookClass: 'o_web_studio_hook_table_column',\n    dropIn: 'tr',\n    _dataInheritance: function (values) {\n        var $field = $('<span/>').attr('t-field', values.related);\n        if (values.type === 'binary') {\n            $field.attr('t-options-widget', '\"image\"');\n        }\n        var fieldHTML = $field.prop('outerHTML');\n        if (this.node.tag === 'td' || this.node.tag === 'th') {\n            // add content either in looped cells, or if no loop in normal cells\n            var targetInLoop = _.find(this.targets, function (target) {\n                return this._findParentWithTForeach(target.node);\n            }.bind(this)) ? true : false;\n            return this._createReportTableColumn({\n                head: $('<span/>').text(values.string).prop('outerHTML'),\n                body: targetInLoop ? undefined : fieldHTML,\n                bodyLoop: targetInLoop ? fieldHTML : undefined,\n            });\n        } else {\n            return this._createContent({\n                contentInStructure: '<span><strong>' + values.string + ':</strong><br/></span>' + fieldHTML,\n                content: fieldHTML,\n            });\n        }\n    },\n    _filterTargets: function () {\n        var self = this;\n        var target = this.targets[this.targets.length - 1];\n        if (this.targets.length > 1) {\n            target = _.find(this.targets, function (target) {\n                return self._findParentWithTForeach(target.node) ? true : false;\n            });\n        }\n        return target;\n    },\n});\n\nvar TableCellField = AbstractFieldBlock.extend({\n    label: _lt('Field in Cell'),\n    className: 'o_web_studio_field_many2one',\n    hookAutoHeight: false,\n    hookClass: 'o_web_studio_hook_inline',\n    dropIn: 'td, th',\n    hookTag: 'span',\n    _dataInheritance: function (values) {\n        var $field = $('<span/>').attr('t-field', values.related);\n        if (values.type === 'binary') {\n            $field.attr('t-options-widget', '\"image\"');\n        }\n        var fieldHTML = $field.prop('outerHTML');\n        if (this.node.tag === 'td' || this.node.tag === 'th') {\n            return this._createReportTableColumn({\n                head: $('<span/>').text(values.string).prop('outerHTML'),\n                bodyLoop: fieldHTML,\n            });\n        } else {\n            return this._createContent({\n                contentInStructure: '<span><strong>' + values.string + ':</strong><br/></span>' + fieldHTML,\n                content: fieldHTML,\n            });\n        }\n    },\n    _filterTargets: function () {\n        var self = this;\n        var target = this.targets[0];\n        if (this.targets.length > 1) {\n            target = _.find(this.targets, function (target) {\n                return self._findParentWithTForeach(target.node) ? true : false;\n            }) ;\n        }\n        return target;\n    },\n});\n\nvar LabelledField = AbstractFieldBlock.extend({\n    label: _lt('Field & Label'),\n    className: 'o_web_studio_field_many2one',\n    hookClass: 'o_web_studio_hook_information',\n    dropColumns: [[0, 3], [0, 3], [0, 3], [0, 3]],\n    hookAutoHeight: false,\n    dropIn: '.page, .row > div.col*:empty',\n    _dataInheritance: function (values) {\n        var $field = $('<span/>').attr('t-field', values.related);\n        if (values.type === 'binary') {\n            $field.attr('t-options-widget', '\"image\"');\n        }\n        var fieldHTML = $field.prop('outerHTML');\n\n        return this._createContent({\n            contentInStructure: '<span><strong>' + values.string + ':</strong><br/></span>' + fieldHTML,\n            content: fieldHTML,\n        });\n    },\n});\n\n\n\n// ----------- OTHER -----------\n\nvar Image = AbstractNewBuildingBlock.extend({\n    type: 'image',\n    label: _lt('Image'),\n    dropIn: '.page',\n    className: 'o_web_studio_field_picture',\n    hookClass: 'o_web_studio_hook_picture',\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            var def = new Promise(function (resolve, reject) {\n                var $image = $(\"<img/>\");\n                var dialog = new weWidgets.MediaDialog(self, {\n                    onlyImages: true,\n                }, $image[0]).open();\n                var value;\n                dialog.on(\"save\", self, function (el) {\n                    // el is a vanilla JS element\n                    // Javascript Element.src returns the full url (including protocol)\n                    // But we want only a relative path\n                    // https://www.w3schools.com/jsref/prop_img_src.asp\n                    // We indeed expect only one image at this point\n                    value = el.attributes.src.value;\n                });\n                dialog.on('closed', self, function () {\n                    if (value) {\n                        resolve({\n                            inheritance: self._createContent({\n                                content: '<img class=\"img-fluid\" src=\"' + value + '\"/>',\n                            })\n                        });\n                    } else {\n                        reject();\n                    }\n                });\n            });\n            return def;\n        });\n    },\n});\n\nvar BlockTitle = AbstractNewBuildingBlock.extend({\n    type: 'block_title',\n    label: _lt('Title Block'),\n    className: 'o_web_studio_field_char',\n    hookClass: 'o_web_studio_hook_title',\n    dropIn: '.page',\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: [{\n                    content: '<div class=\"row\"><div class=\"col h2\"><span>New Title</span></div></div>',\n                    position: self.position,\n                    xpath: self.node.attrs['data-oe-xpath'],\n                    view_id: +self.node.attrs['data-oe-id'],\n                }],\n            });\n        });\n    },\n});\n\nvar BlockAddress = AbstractNewBuildingBlock.extend({\n    type: 'block_address',\n    label: _lt('Address Block'),\n    fa: 'fa-address-card',\n    className: 'o_web_studio_field_fa',\n    hookAutoHeight: false,\n    hookClass: 'o_web_studio_hook_address',\n    structureClass: 'address',\n    dropColumns: [[0, 5], [2, 5]],\n    add: function () {\n        var self = this;\n        var callersArguments = arguments;\n        return new Promise(function (resolve, reject) {\n            self._super.apply(self, callersArguments).then(function () {\n                var field = {\n                    order: 'order',\n                    type: 'related',\n                    filters: {},\n                    filter: function (field) {\n                        return field.type === 'many2one';\n                    },\n                    followRelations: function (field) {\n                        return field.type === 'many2one' && field.relation !== 'res.partner';\n                    },\n                };\n                var availableKeys = self._getContextKeys(self.node);\n                // TODO: maybe filter keys to only get many2one fields to res.partner?\n                // For reports, set the current model ('doc') by default\n                // in 'ModelFieldSelector' whenever available\n                var fieldChain = [];\n                if (availableKeys.length) {\n                    fieldChain.push(_.first(availableKeys).name);\n                }\n                var dialog = new NewFieldDialog(self, 'record_fake_model', field, availableKeys, fieldChain).open();\n                dialog.on('field_default_values_saved', self, function (values) {\n                    if (!_.contains(values.related, '.')) {\n                        Dialog.alert(self, _t('Please specify a field name for the selected model.'));\n                        return;\n                    }\n                    if (values.relation === 'res.partner') {\n                        resolve({\n                            inheritance: self._createContent({\n                                content: '<div t-field=\"' + values.related + '\" t-options-widget=\"\\'contact\\'\"/>',\n                            })\n                        });\n                        dialog.close();\n                    } else {\n                        Dialog.alert(self, _t('You can only display a user or a partner'));\n                    }\n                });\n                dialog.on('closed', self, function () {\n                    reject();\n                });\n            });\n        });\n    },\n});\n\nvar BlockTable = AbstractNewBuildingBlock.extend({\n    type: 'block_table',\n    label: _lt('Data table'),\n    fa: 'fa-th-list',\n    className: 'o_web_studio_field_fa',\n    hookClass: 'o_web_studio_hook_table',\n    dropIn: '.page',\n    add: function () {\n        var self = this;\n        var callersArguments = arguments;\n        return new Promise(function (resolve, reject) {\n            self._super.apply(self, callersArguments).then(function () {\n                var field = {\n                    order: 'order',\n                    type: 'related',\n                    filters: {},\n                    filter: function (field) {\n                        return field.type === 'many2one' || field.type === 'one2many' || field.type === 'many2many';\n                    },\n                    followRelations: function (field) {\n                        return field.type === 'many2one';\n                    },\n                };\n                var availableKeys = self._getContextKeys(self.node);\n                // For reports, set the current model ('doc') by default\n                // in 'ModelFieldSelector' whenever available\n                var fieldChain = [];\n                if (availableKeys.length) {\n                    fieldChain.push(_.first(availableKeys).name);\n                }\n                var dialog = new NewFieldDialog(self, 'record_fake_model', field, availableKeys, fieldChain).open();\n                dialog.on('field_default_values_saved', self, function (values) {\n                    if (values.type === 'one2many' || values.type === 'many2many') {\n                        resolve({\n                            inheritance: self._dataInheritance(values),\n                        });\n                        dialog.close();\n                    } else {\n                        Dialog.alert(self, _t('You need to use a many2many or one2many field to display a list of items'));\n                    }\n                });\n                dialog.on('closed', self, function () {\n                    reject();\n                });\n            });\n        });\n    },\n    _dataInheritance: function (values) {\n        var target = this.targets[0];\n        return [{\n            content:\n                '<table class=\"table o_report_block_table\">' +\n                '<thead>' +\n                '<tr>' +\n                '<th><span>Name</span></th>' +\n                '</tr>' +\n                '</thead>' +\n                '<tbody>' +\n                '<tr t-foreach=\"' + values.related + '\" t-as=\"table_line\">' +\n                '<td><span t-field=\"table_line.display_name\"/></td>' +\n                '</tr>' +\n                '</tbody>' +\n                '</table>',\n            position: target.position,\n            xpath: target.node.attrs['data-oe-xpath'],\n            view_id: +target.node.attrs['data-oe-id'],\n        }];\n    },\n});\n\nvar TableBlockTotal = AbstractNewBuildingBlock.extend({\n    type: 'block_total',\n    label: _lt('Subtotal & Total'),\n    fa: 'fa-money',\n    className: 'o_web_studio_field_fa',\n    dropIn: '.page',\n    hookClass: 'o_web_studio_hook_total',\n    dropColumns: [[0, 5], [2, 5]],\n    add: function () {\n        var self = this;\n        var callersArguments = arguments;\n        return new Promise(function (resolve, reject) {\n            self._super.apply(self, callersArguments).then(function () {\n                var field = {\n                    order: 'order',\n                    type: 'related',\n                    filters: {},\n                    filter: function (field) {\n                        return field.type === 'many2one';\n                    },\n                    followRelations: function (field) {\n                        return field.type === 'many2one' &&\n                            field.relation !== 'account.move' && field.relation !== 'sale.order' && field.relation !== 'purchase.order';\n                    },\n                };\n                var availableKeys = self._getContextKeys(self.node);\n                // For reports, set the current model ('doc') by default\n                // in 'ModelFieldSelector' whenever available\n                var fieldChain = [];\n                if (availableKeys.length) {\n                    fieldChain.push(_.first(availableKeys).name);\n                }\n                var dialog = new NewFieldDialog(self, 'record_fake_model', field, availableKeys, fieldChain).open();\n                dialog.on('field_default_values_saved', self, function (values) {\n                    resolve({\n                        inheritance: self._dataInheritance(values),\n                    });\n                    dialog.close();\n                });\n                dialog.on('closed', self, function () {\n                    reject();\n                });\n            });\n        });\n    },\n    _dataInheritance: function (values) {\n        var data = this._dataInheritanceValues(values);\n        return this._createContent({\n            contentInStructure: \n                '<table class=\"table table-sm\">' +\n                    `<t t-set=\"tax_totals\" t-value=\"json.loads(${data.tax_totals_json})\"/>` +\n                    '<t t-call=\"account.document_tax_totals\"/>' +\n                '</table>'\n        });\n    },\n    _dataInheritanceValues: function (values) {\n        const tax_totals_json = `${values.related}.tax_totals_json`;\n        return { tax_totals_json };\n    },\n});\n\n\nreturn {\n    BlockText: BlockText,\n    InlineText: InlineText,\n    ColumnHalfText: ColumnHalfText,\n    ColumnThirdText: ColumnThirdText,\n    TableCellText: TableCellText,\n    BlockField: BlockField,\n    InlineField: InlineField,\n    TableColumnField: TableColumnField,\n    TableCellField: TableCellField,\n    LabelledField: LabelledField,\n    Image: Image,\n    BlockTitle: BlockTitle,\n    BlockAddress: BlockAddress,\n    BlockTable: BlockTable,\n    TableBlockTotal: TableBlockTotal,\n};\n\n});\n", "odoo.define('web_studio.reportNewComponentsRegistry', function (require) {\n\"use strict\";\n\nvar core = require('web.core');\nvar Registry = require('web.Registry');\nvar reportNewComponents = require('web_studio.reportNewComponents');\n\nvar _lt = core._lt;\n\nvar registry = new Registry();\n\nregistry\n    .add(_lt('Block'), [\n        reportNewComponents.BlockText,\n        reportNewComponents.BlockField,\n        reportNewComponents.BlockTitle,\n        reportNewComponents.LabelledField,\n        reportNewComponents.Image,\n        reportNewComponents.BlockAddress,\n    ])\n    .add(_lt('Inline'), [\n        reportNewComponents.InlineText,\n        reportNewComponents.InlineField,\n    ])\n    .add(_lt('Table'), [\n        reportNewComponents.BlockTable,\n        reportNewComponents.TableColumnField,\n        reportNewComponents.TableCellText,\n        reportNewComponents.TableCellField,\n        reportNewComponents.TableBlockTotal,\n    ])\n    .add(_lt('Column'), [\n        reportNewComponents.ColumnHalfText,\n        reportNewComponents.ColumnThirdText,\n    ]);\n\nreturn registry;\n\n});\n", "odoo.define('web_studio.AbstractViewEditor', function (require) {\n\"use strict\";\n\nvar ajax = require('web.ajax');\nvar AbstractView = require('web.AbstractView');\nconst RendererWrapper = require('web.RendererWrapper');\nconst utils = require('web.utils');\n\nAbstractView.include({\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @param {Widget} parent\n     * @param {Widget} Editor\n     * @param {Object} options\n     * @returns {Widget}\n     */\n    createStudioEditor: function (parent, Editor, options) {\n        return this._createStudioRenderer(parent, Editor, options);\n    },\n    /**\n     * @param {Widget} parent\n     * @param {Widget} Editor\n     * @param {Object} options\n     * @returns {Widget}\n     */\n    createStudioRenderer: function (parent, options) {\n        var Renderer = this.config.Renderer;\n        if (utils.isComponent(Renderer)) {\n            options.Component = Renderer;\n            Renderer = RendererWrapper;\n        }\n        options.viewType = 'viewType' in options ? options.viewType : this.viewType;\n        return this._createStudioRenderer(parent, Renderer, options);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @param {Widget} parent\n     * @param {Widget} Renderer\n     * @param {Object} options\n     * @param {String} [options.viewType]\n     * @param {String} [options.controllerState]\n     * @returns {Widget}\n     */\n    _createStudioRenderer: function (parent, Renderer, options) {\n        var self = this;\n        var model = this.getModel(parent);\n\n        var loadViewDef = this._loadSubviews ? this._loadSubviews(parent) : Promise.resolve();\n        return loadViewDef.then(function () {\n            const searchQuery = self.controllerParams.searchModel.get('query');\n            if (options.viewType === 'list') {\n                // reset the group by so lists are not grouped in studio.\n                searchQuery.groupBy = [];\n            }\n            if (options.viewType === 'graph') {\n                delete options.mode;\n            }\n            self._updateMVCParams(searchQuery);\n            // This override is a hack because when we load the data for a subview in\n            // studio we don't want to display all the record of the list view but only\n            // the one set in the parent record.\n            if (options.x2mField) {\n                self.loadParams.static = true;\n            }\n\n            const withSampleData = ['graph', 'pivot'].includes(options.viewType) ? true : false;\n            return Promise.all([\n                self._loadData(model, { withSampleData }),\n                ajax.loadLibs(self)\n            ]).then(function (results) {\n                var { state } = results[0];\n                if (options.x2mField) {\n                    self.loadParams.static = false;\n                }\n                var params = _.extend({}, self.rendererParams, options, {\n                    // TODO: why is it defined now? because it is, the no\n                    // content is displayed if no record\n                    noContentHelp: undefined,\n                });\n                let editor;\n                if (utils.isComponent(Renderer)) {\n                    state = Object.assign({}, state, params);\n                    const Component = state.Component;\n                    const props = filterUnwantedProps(Component, state);\n                    return new Renderer(parent, Component, props);\n                } else {\n                    editor = new Renderer(parent, state, params);\n                }\n                // the editor needs to have a reference to its BasicModel\n                // instance to reuse it in x2m edition\n                editor.model = model;\n                model.setParent(editor);\n                return editor;\n            });\n        });\n    },\n});\n\nfunction filterUnwantedProps(ComponentType, params) {\n    const props = ComponentType.props;\n    if (!props) {\n        return params;\n    }\n    const newParams = {};\n    Object.entries(params).forEach(([k, v]) => {\n        if (k in props) {\n            newParams[k] = v;\n        }\n    });\n    return newParams;\n}\n\n});\n", "odoo.define('web_studio.ActionEditor', function (require) {\n\"use strict\";\n\nvar Widget = require('web.Widget');\n\nvar ActionEditorSidebar = require('web_studio.ActionEditorSidebar');\nvar ActionEditorView = require('web_studio.ActionEditorView');\n\nconst { SUPPORTED_VIEW_TYPES } = require(\"@web_studio/studio_service\");\n\nvar ActionEditor = Widget.extend({\n    template: 'web_studio.ActionEditor',\n    custom_events: {\n        'parameters_clicked': '_onActionParameters',\n    },\n    VIEW_TYPES: SUPPORTED_VIEW_TYPES.slice(),\n\n    /**\n     * @constructor\n     */\n    init: function (parent, action) {\n        this._super.apply(this, arguments);\n\n        this.action = action;\n        this.active_view_types = this._getActiveViewTypes();\n        this.default_view = this.active_view_types[0];\n        if (action.initial_view_types) {\n            this.active_view_types = action.initial_view_types;\n        }\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n\n        // order view_types: put active ones at the begining\n        var ordered_view_types = this.active_view_types.slice();\n        _.each(this.VIEW_TYPES, function (el) {\n            if (! _.contains(ordered_view_types, el)) {\n                ordered_view_types.push(el);\n            }\n        });\n\n        _.each(ordered_view_types, function (view_type) {\n            var is_default_view = (view_type === self.default_view);\n            var active = _.contains(self.active_view_types, view_type);\n            var view = new ActionEditorView(self, {\n                // search is always active\n                active: active || view_type === 'search',\n                default_view: is_default_view,\n                can_default: !_.contains(['form', 'search'], view_type),\n                view_type: view_type,\n                can_be_disabled: view_type !== 'search',\n            });\n\n            var category = self._getViewCategory(view_type);\n            if (category) {\n                view.appendTo(\n                    self.$('.o_web_studio_view_category[name=' + category + ']')\n                );\n            }\n        });\n\n        this.sidebar = new ActionEditorSidebar(this, this.action);\n        return Promise.all([\n            this._super.apply(this, arguments),\n            this.sidebar.prependTo(this.$el)\n        ]);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @returns {string[]} the current action active view types\n     */\n    _getActiveViewTypes: function () {\n        return _.map(this.action.views, function (view) {\n            return view[1];\n        });\n    },\n    /**\n     * Get the view type category.\n     *\n     * @private\n     * @param {string} viewType\n     * @returns {string}\n     */\n    _getViewCategory: function (viewType) {\n        var category;\n        switch (viewType) {\n            case 'form':\n                category = 'general';\n                break;\n            case 'search':\n                category = 'general';\n                break;\n            case 'activity':\n                category = 'general';\n                break;\n            case 'list':\n                category = 'multiple';\n                break;\n            case 'kanban':\n                category = 'multiple';\n                break;\n            case 'map':\n                category = 'multiple';\n                break;\n            case 'graph':\n                category = 'reporting';\n                break;\n            case 'pivot':\n                category = 'reporting';\n                break;\n            case 'dashboard':\n                category = 'reporting';\n                break;\n            case 'calendar':\n                category = 'timeline';\n                break;\n            case 'gantt':\n                category = 'timeline';\n                break;\n            case 'cohort':\n                category = 'timeline';\n                break;\n        }\n        return category;\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onActionParameters: function () {\n        // open action form view\n        this.do_action({\n            type: 'ir.actions.act_window',\n            res_model: 'ir.actions.act_window',\n            res_id: this.action.id,\n            views: [[false, 'form']],\n            target: 'current',\n        }, {\n            replace_last_action: true,\n        });\n    },\n});\n\nreturn ActionEditor;\n\n});\n", "odoo.define('web_studio.ActionEditorSidebar', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar relational_fields = require('web.relational_fields');\nvar StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\nvar Widget = require('web.Widget');\n\nvar Many2ManyTags = relational_fields.FieldMany2ManyTags;\n\nvar ActionEditorSidebar = Widget.extend(StandaloneFieldManagerMixin, {\n    template: 'web_studio.ActionEditorSidebar',\n    events: {\n        'change input, textarea': '_onActionChange',\n        'click .o_web_studio_parameters': '_onParameters',\n    },\n    /**\n     * @constructor\n     * @param {Object} action\n     */\n    init: function (parent, action) {\n        this._super.apply(this, arguments);\n        StandaloneFieldManagerMixin.init.call(this);\n\n        this.debug = config.isDebug();\n        this.action = action;\n        this.action_attrs = {\n            name: action.display_name || action.name,\n            help: action.help && action.help.replace(/\\n\\s+/g, '\\n') || '',\n        };\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        var self = this;\n        var def1 = this.model.makeRecord('ir.actions.act_window', [{\n            name: 'groups_id',\n            fields: [{\n                name: 'id',\n                type: 'integer',\n            }, {\n                name: 'display_name',\n                type: 'char',\n            }],\n            relation: 'res.groups',\n            type: 'many2many',\n            value: this.action.groups_id,\n        }]).then(function (recordID) {\n            self.groupsHandle = recordID;\n        });\n        var def2 = this._super.apply(this, arguments);\n        return Promise.all([def1, def2]);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var def1 = this._super.apply(this, arguments);\n        var record = this.model.get(this.groupsHandle);\n        var options = {\n            mode: 'edit',\n        };\n        var many2many = new Many2ManyTags(this, 'groups_id', record, options);\n        this._registerWidget(this.groupsHandle, 'groups_id', many2many);\n        var def2 = many2many.appendTo(this.$('.o_groups'));\n        return Promise.all([def1, def2]);\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Event} event\n     */\n    _onActionChange: function (event) {\n        var $input = $(event.currentTarget);\n        var attribute = $input.attr('name');\n        if (attribute) {\n            var new_attrs = {};\n            new_attrs[attribute] = $input.val();\n            this.trigger_up('studio_edit_action', {args: new_attrs});\n        }\n    },\n\n    /**\n     * @private\n     */\n    _onParameters: function () {\n        this.trigger_up('parameters_clicked');\n    },\n\n    /*\n     * @private\n     * @override\n     */\n    _onFieldChanged: function () {\n        var self = this;\n        return StandaloneFieldManagerMixin._onFieldChanged.apply(this, arguments).then(function () {\n            var record = self.model.get(self.groupsHandle);\n            var args = {\n                groups_id: record.data.groups_id.res_ids,\n            };\n            self.trigger_up('studio_edit_action', {args: args});\n        });\n    },\n});\n\nreturn ActionEditorSidebar;\n\n});\n", "odoo.define('web_studio.ActionEditorView', function (require) {\n\"use strict\";\n\nvar Widget = require('web.Widget');\nvar config = require('web.config');\n\nvar ActionEditorView = Widget.extend({\n    template: 'web_studio.ActionEditorView',\n    events: {\n        'click .dropdown-item': '_onMenu',\n        'click .o_web_studio_thumbnail': '_onThumbnail',\n    },\n    /**\n     * @constructor\n     * @param {Object} flags\n     */\n    init: function (parent, flags) {\n        this._super.apply(this, arguments);\n        this.debug = config.isDebug();\n        this.active = flags.active;\n        this.default_view = flags.default_view;\n        this.view_type = flags.view_type;\n        this.can_default = flags.can_default;\n        this.can_be_disabled = flags.can_be_disabled;\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onThumbnail: function () {\n       if (this.active) {\n            this.trigger_up('studio_edit_view', {view_type: this.view_type});\n        } else {\n            this.trigger_up('studio_new_view', {view_type: this.view_type});\n        }\n    },\n    /**\n     * @private\n     * @param {Event} event\n     */\n    _onMenu: function (event) {\n        event.preventDefault();\n        var action = $(event.currentTarget).data('action');\n\n        var eventName;\n        switch (action) {\n            case 'set_default_view':\n                eventName = 'studio_default_view';\n                break;\n            case 'restore_default_view':\n                eventName = 'studio_restore_default_view';\n                break;\n            case 'disable_view':\n                eventName = 'studio_disable_view';\n                break;\n        }\n        if (eventName) {\n            this.trigger_up(eventName, {view_type: this.view_type});\n        }\n    },\n});\n\nreturn ActionEditorView;\n\n});\n", "odoo.define('web_studio.view_components', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar Registry = require('web.Registry');\nvar Widget = require('web.Widget');\n\nvar _lt = core._lt;\n\nvar AbstractComponent = Widget.extend({\n    structure: false,\n    label: false,\n    description: false,\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        this.$el.addClass('o_web_studio_component');\n        this.$el.data('structure', this.structure);\n        this.$el.text(this.label);\n        if (config.isDebug() && this.description) {\n            this.$el.addClass('o_web_studio_debug');\n            this.$el.append($('<div>')\n                .addClass('o_web_studio_component_description')\n                .text(this.description)\n            );\n        }\n        this.$el.draggable({\n            helper: 'clone',\n            opacity: 0.4,\n            scroll: false,\n            revert: 'invalid',\n            revertDuration: 200,\n            refreshPositions: true,\n            start: function (e, ui) {\n                ui.helper.data(self.$el.data());\n                ui.helper.addClass(\"ui-draggable-helper\");\n            }\n        });\n        return this._super.apply(this, arguments);\n    },\n});\nvar NotebookComponent = AbstractComponent.extend({\n    structure: 'notebook',\n    label: _lt('Tabs'),\n    type: 'tabs',\n    className: 'o_web_studio_field_tabs',\n});\nvar GroupComponent = AbstractComponent.extend({\n    structure: 'group',\n    label: _lt('Columns'),\n    type: 'columns',\n    className: 'o_web_studio_field_columns',\n});\nvar FilterComponent = AbstractComponent.extend({\n    structure: 'filter',\n    label: _lt('Filter'),\n    type: 'filter',\n    className: 'o_web_studio_filter',\n});\nvar FilterSeparatorComponent = AbstractComponent.extend({\n    structure: 'separator',\n    label: _lt('Separator'),\n    type: 'separator',\n    className: 'o_web_studio_filter_separator',\n});\nvar AbstractNewFieldComponent = AbstractComponent.extend({\n    structure: 'field',\n    type: false,\n    special: false,\n\n    /**\n     * @override\n     * @param {Object} attrs\n     */\n    init: function (parent, attrs) {\n        this._super(parent);\n        this.fieldAttrs = attrs;\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        this.description = this.type;\n        this.$el.data('field_description', {\n            type: this.type,\n            field_description: 'New ' + this.label,\n            special: this.special,\n        });\n        this.$el.data('new_attrs', this.fieldAttrs);\n        return this._super.apply(this, arguments);\n    },\n});\nvar CharFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'char',\n    label: _lt('Text'),\n    className: 'o_web_studio_field_char',\n});\nvar TextFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'text',\n    label: _lt('Multiline Text'),\n    className: 'o_web_studio_field_text',\n});\nvar IntegerFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'integer',\n    label: _lt('Integer'),\n    className: 'o_web_studio_field_integer',\n});\nvar DecimalFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'float',\n    label: _lt('Decimal'),\n    className: 'o_web_studio_field_float',\n});\nvar HtmlFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'html',\n    label: _lt('Html'),\n    className: 'o_web_studio_field_html',\n});\nvar MonetaryFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'monetary',\n    label: _lt('Monetary'),\n    className: 'o_web_studio_field_monetary',\n});\nvar DateFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'date',\n    label: _lt('Date'),\n    className: 'o_web_studio_field_date',\n});\nvar DatetimeFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'datetime',\n    label: _lt('Date & Time'),\n    className: 'o_web_studio_field_datetime',\n});\nvar BooleanFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'boolean',\n    label: _lt('Checkbox'),\n    className: 'o_web_studio_field_boolean',\n});\nvar SelectionFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'selection',\n    label: _lt('Selection'),\n    className: 'o_web_studio_field_selection',\n});\nvar BinaryFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'binary',\n    label: _lt('File'),\n    className: 'o_web_studio_field_binary',\n});\nvar Many2manyFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'many2many',\n    label: _lt('Many2many'),\n    className: 'o_web_studio_field_many2many',\n});\nvar One2manyFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'one2many',\n    label: _lt('One2many'),\n    className: 'o_web_studio_field_one2many',\n});\nconst LinesFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'one2many',\n    label: _lt('Lines'),\n    className: 'o_web_studio_field_lines',\n    special: 'lines',\n});\nvar Many2oneFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'many2one',\n    label: _lt('Many2one'),\n    className: 'o_web_studio_field_many2one',\n});\nvar ExistingFieldComponent = AbstractComponent.extend({\n    /**\n     * @override\n     * @param {Widget} parent\n     * @param {String} name\n     * @param {String} field_description\n     * @param {String} type\n     * @param {Boolean} store\n     * @param {Object} attrs\n     */\n    init: function (parent, name, field_description, type, store, attrs) {\n        this._super(parent);\n        this.structure = 'field';\n        this.label = field_description;\n        this.description = name;\n        this.className = 'o_web_studio_field_' + type;\n        this.type = type;\n        this.store = store;\n        this.fieldAttrs = attrs;\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        const newAttrs = Object.assign(this.fieldAttrs || {}, {\n            name: this.description,\n            label: this.label,\n            type: this.type,\n            store: this.store ? \"true\":\"false\",\n        });\n        this.$el.data('new_attrs', newAttrs);\n        this.$el.attr(\"title\", this.label);\n        return this._super.apply(this, arguments);\n    },\n});\nvar AbstractNewWidgetComponent = AbstractNewFieldComponent.extend({\n    attrs: {},\n    /**\n     * @override\n     */\n    start: function () {\n        const newAttrs = Object.assign(this.fieldAttrs || {}, this.attrs);\n        this.$el.data('new_attrs', newAttrs);\n        return this._super.apply(this, arguments);\n    },\n});\nvar ImageWidgetComponent = AbstractNewWidgetComponent.extend({\n    type: 'binary',\n    label: _lt('Image'),\n    className: 'o_web_studio_field_picture',\n    attrs: {widget: 'image', options: '{\"size\": [0, 90]}'},\n});\nvar TagWidgetComponent = AbstractNewWidgetComponent.extend({\n    type: 'many2many',\n    label: _lt('Tags'),\n    className: 'o_web_studio_field_tags',\n    attrs: {widget: 'many2many_tags'},\n});\nvar PriorityWidgetComponent = AbstractNewWidgetComponent.extend({\n    type: 'selection',\n    label: _lt('Priority'),\n    className: 'o_web_studio_field_priority',\n    attrs: {widget: 'priority'},\n});\nvar SignatureWidgetComponent = AbstractNewWidgetComponent.extend({\n    type: 'binary',\n    label: _lt('Signature'),\n    className: 'o_web_studio_field_signature',\n    attrs: {widget: 'signature'},\n});\nvar RelatedFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'related',\n    label: _lt('Related Field'),\n    className: 'o_web_studio_field_related',\n});\nvar form_component_widget_registry = new Registry();\nform_component_widget_registry\n    .add('form_components', [\n        NotebookComponent,\n        GroupComponent,\n    ])\n    .add('search_components', [\n        FilterComponent,\n        FilterSeparatorComponent,\n    ])\n    .add('new_field', [\n        CharFieldComponent,\n        TextFieldComponent,\n        IntegerFieldComponent,\n        DecimalFieldComponent,\n        HtmlFieldComponent,\n        MonetaryFieldComponent,\n        DateFieldComponent,\n        DatetimeFieldComponent,\n        BooleanFieldComponent,\n        SelectionFieldComponent,\n        BinaryFieldComponent,\n        LinesFieldComponent,\n        One2manyFieldComponent,\n        Many2oneFieldComponent,\n        Many2manyFieldComponent,\n        ImageWidgetComponent,\n        TagWidgetComponent,\n        PriorityWidgetComponent,\n        SignatureWidgetComponent,\n        RelatedFieldComponent,\n    ])\n    .add('existing_field', ExistingFieldComponent);\n\nreturn {\n    registry: form_component_widget_registry,\n};\n\n});\n", "odoo.define('web_studio.ViewEditorManager', function (require) {\n\"use strict\";\n\nconst { ComponentWrapper } = require('web.OwlCompatibility');\nvar core = require('web.core');\nvar data_manager = require('web.data_manager');\nvar Dialog = require('web.Dialog');\nvar dom = require('web.dom');\nvar framework = require('web.framework');\nvar session = require('web.session');\nvar view_registry = require('web.view_registry');\n\nvar AbstractEditorManager = require('web_studio.AbstractEditorManager');\nvar bus = require('web_studio.bus');\nvar EditorMixin = require('web_studio.EditorMixin');\nvar EditorMixinOwl = require('web_studio.EditorMixinOwl');\n\nvar CalendarEditor = require('web_studio.CalendarEditor');\nvar FormEditor = require('web_studio.FormEditor');\nvar KanbanEditor = require('web_studio.KanbanEditor');\nvar ListEditor = require('web_studio.ListEditor');\nvar SearchEditor = require('web_studio.SearchEditor');\nvar SearchRenderer = require('web_studio.SearchRenderer');\n\nvar FieldSelectorDialog = require('web_studio.FieldSelectorDialog');\nvar NewButtonBoxDialog = require('web_studio.NewButtonBoxDialog');\nvar NewFieldDialog = require('web_studio.NewFieldDialog');\nvar utils = require('web_studio.utils');\nvar ViewEditorSidebar = require('web_studio.ViewEditorSidebar');\nconst { isComponent } = require('web.utils');\n\nvar _t = core._t;\nvar QWeb = core.qweb;\n\nvar Editors = {\n    form: FormEditor,\n    kanban: KanbanEditor,\n    list: ListEditor,\n    calendar: CalendarEditor,\n    search: SearchEditor,\n};\n\nclass EditorWrapper extends ComponentWrapper {\n    handleDrop() {\n        return this.componentRef.comp &&\n            this.componentRef.comp.handleDrop(...arguments);\n    }\n    highlightNearestHook() {\n        return this.componentRef.comp &&\n            this.componentRef.comp.highlightNearestHook(...arguments);\n    }\n    setSelectable() {\n        return this.componentRef.comp &&\n            this.componentRef.comp.setSelectable(...arguments);\n    }\n    unselectedElements() {\n        return this.componentRef.comp &&\n            this.componentRef.comp.unselectedElements(...arguments);\n    }\n}\n\nvar ViewEditorManager = AbstractEditorManager.extend({\n    custom_events: _.extend({}, AbstractEditorManager.prototype.custom_events, {\n        approval_archive: '_onApprovalArchive',\n        approval_change: '_onApprovalChange',\n        approval_condition: '_onApprovalCondition',\n        approval_group_change: '_onApprovalGroupChange',\n        approval_new_rule: '_onApprovalNewRule',\n        default_value_change: '_onDefaultValueChange',\n        email_alias_change: '_onEmailAliasChange',\n        field_edition: '_onFieldEdition',\n        field_renamed: '_onFieldRenamed',\n        open_defaults: '_onOpenDefaults',\n        open_field_form: '_onOpenFieldForm',\n        open_record_form_view: '_onOpenRecordFormView',\n        toggle_form_invisible: '_onShowInvisibleToggled',\n    }),\n    /**\n     * The init always takes the main view's descriptions as parameters.\n     * If we are editing a nested x2m field, the ViewManager's properties are changed\n     * in order to target the right field and the right view.\n     *\n     * @override\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {Object} params.action\n     * @param {Object} params.fields_view\n     * @param {string} params.viewType\n     * @param {Object} [params.chatter_allowed]\n     * @param {String} [params.controllerState]\n     * @param {Object} [params.studio_view_id]\n     * @param {Object} [params.studio_view_arch]\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n\n        this.action = params.action;\n\n        this.fields_view = params.fields_view;\n        this.fields = this._processFields(this.fields_view.fields);\n\n        this.model_name = this.fields_view.model;\n        this.view_type = params.viewType;\n        this.mainViewType = this.view_type;\n        this.view_id = this.fields_view.view_id;\n\n        this.studio_view_id = params.studio_view_id;\n        this.studio_view_arch = params.studio_view_arch;\n\n        this.isEditingX2m = params.x2mEditorPath && params.x2mEditorPath.length;\n        if (this.isEditingX2m) {\n            this.x2mEditorPath = params.x2mEditorPath;\n            this.chatter_allowed = false;\n\n            const currentX2m = this.x2mEditorPath[this.x2mEditorPath.length - 1];\n            this.currentX2m = currentX2m;\n\n            this.x2mField = currentX2m.x2mField;\n            this.x2mViewType = currentX2m.x2mViewType;\n            this.x2mModel = currentX2m.x2mModel;\n\n            this.view_type = this.x2mViewType;\n            this.x2mViewParams = currentX2m.x2mViewParams;\n        } else {\n            this.chatter_allowed = params.chatter_allowed || false;\n            this.controllerState = params.controllerState;\n        }\n\n        this.renamingAllowedFields = []; // those fields can be renamed\n\n        this.expr_attrs = {\n            'field': ['name'],\n            'label': ['for'],\n            'page': ['name'],\n            'group': ['name'],\n            'div': ['name'],\n            'filter': ['name'],\n            'button': ['name'],\n        };\n    },\n    /**\n     * @override\n     */\n    start: async function () {\n        const _super = this._super;\n        if (this.isEditingX2m) {\n            let fieldsView = this._getX2mFieldsView(this.fields_view);\n\n            if (!fieldsView || fieldsView.name) {\n                fieldsView = await this._createInlineView(this.x2mViewType, this.x2mField)\n                fieldsView = this._getX2mFieldsView(fieldsView);\n            }\n            this.fields_view = fieldsView;\n            this.fields = await this._getProcessedX2mFields();\n        }\n        return _super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @param {Object} options\n     * @returns {Promise}\n     */\n    updateEditor: function (options) {\n        var self = this;\n        var rendererScrollTop = this.$el.scrollTop();\n        var localState = false;\n        if (this.editor && this.editor.getLocalState) {\n            localState = this.editor.getLocalState();\n        }\n        var oldEditor = this.editor;\n\n        return this._instantiateEditor(options).then(function (editor) {\n            var fragment = document.createDocumentFragment();\n            let prom = undefined;\n            if (editor instanceof owl.Component) {\n                prom = editor.mount(fragment);\n            } else {\n                prom = editor.appendTo(fragment);\n            }\n            return prom.then(function () {\n                dom.append(self.$('.o_web_studio_view_renderer'), [fragment], {\n                    in_DOM: self.isInDOM,\n                    callbacks: [{ widget: editor }],\n                });\n                self.editor = editor;\n                oldEditor.destroy();\n\n                // restore previous state\n                self.$el.scrollTop(rendererScrollTop);\n                if (localState) {\n                    self.editor.setLocalState(localState);\n                }\n            }).guardedCatch(function (e) {\n                self.trigger_up('studio_error', {error: 'view_rendering'});\n                self._undo(null, true);\n            });\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Object} data\n     */\n    _addAvatarImage: function (data) {\n        this._do({\n            type: 'avatar_image',\n            field: data.field,\n        });\n    },\n    /**\n     * Enable approval for a <button> node as well as all other nodes of the\n     * same type and the same name in the view; this is done server-side.\n     * @private\n     * @param {Object} data\n     */\n    _addApproval: async function (data) {\n        const attrs = data.node.attrs;\n        // enabling approval on node\n        // need to enable it on all similar nodes silently in a single op\n        await this._do({\n            type: 'enable_approval',\n            model: this.model_name,\n            btn_type: attrs.type,\n            btn_name: attrs.name,\n            view_id: this.view_id,\n            enable: data.enable,\n        })\n    },\n    /**\n     * @private\n     * @param {String} type\n     */\n    _addButton: function (data) {\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        var dialog = new NewButtonBoxDialog(this, modelName).open();\n        dialog.on('saved', this, function (result) {\n            if (data.add_buttonbox) {\n                this.operations.push({type: 'buttonbox'});\n            }\n            this._do({\n                type: data.type,\n                target: {\n                    tag: 'div',\n                    attrs: {\n                        class: 'oe_button_box',\n                    }\n                },\n                position: 'inside',\n                node: {\n                    tag: 'button',\n                    field: result.field_id,\n                    string: result.string,\n                    attrs: {\n                        class: 'oe_stat_button',\n                        icon: result.icon,\n                    }\n                },\n            });\n        });\n    },\n    /**\n     * @private\n     * @param {Object} data\n     */\n    _addChatter: function (data) {\n        this._do({\n            type: 'chatter',\n            model: this.model_name,\n            remove_activity_ids: data.remove_activity_ids,\n            remove_message_ids: data.remove_message_ids,\n            remove_follower_ids: data.remove_follower_ids,\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {String} position\n     * @param {String} tag\n     */\n    _addElement: function (type, node, xpath_info, position, tag) {\n        this._do({\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n            position: position,\n            node: {\n                tag: tag,\n                attrs: {\n                    name: 'studio_' + tag + '_' + utils.randomString(5),\n                }\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} field_description\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {String} position\n     * @param {Object} new_attrs\n     * @param {Object} data\n     */\n    _addField: function (type, field_description, node, xpath_info, position, new_attrs, data) {\n        var self = this;\n        var def_field_values;\n        var dialog;\n\n        var openCurrencyCreationDialog = function (relatedCurrency, resolve) {\n            var msg = _t(\"In order to use a monetary field, you need a currency field on the model. \" +\n                \"Do you want to create a currency field first? You can make this field invisible afterwards.\");\n            return Dialog.confirm(this, msg, {\n                confirm_callback: function () {\n                    new_attrs = {};\n                    // modifies the current operation in place to create a\n                    // currency field instead\n                    field_description = {\n                        default_value: session.company_currency_id,\n                        field_description: 'Currency',\n                        model_name: modelName,\n                        name: 'x_currency_id',\n                        relation: 'res.currency',\n                        type: 'many2one',\n                    };\n                    if (relatedCurrency) {\n                        field_description.related = relatedCurrency;\n                    }\n                    resolve();\n                },\n            });\n        };\n\n        // The field doesn't exist: field_description is the definition of the new field.\n        // No need to have field_description of an existing field\n        if (field_description) {\n            var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n            // \"extend\" avoids having the same reference in \"this.operations\"\n            // We can thus modify it without editing previous existing operations\n            field_description = _.extend({}, field_description, {\n                name: `x_studio_${field_description.type}_field_${utils.randomString(5)}`,\n                model_name: modelName,\n            });\n            // Fields with requirements\n            if (field_description.type === 'selection' && new_attrs.widget === 'priority') {\n                // should not be translated at the creation\n                field_description.selection = [\n                    ['0', \"Normal\"],\n                    ['1', \"Low\"],\n                    ['2', \"High\"],\n                    ['3', \"Very High\"],\n                ];\n            } else if (field_description.special === 'lines') {\n                // there's nothing to do, the operation will be fully handled server-side\n            } else if (_.contains(['selection', 'one2many', 'many2one', 'many2many', 'related'], field_description.type)) {\n                def_field_values = new Promise(function (resolve, reject) {\n                    var prom;\n                    if (field_description.type === 'one2many') {\n                        // check for existing m2o fields for current model\n                        var modelName = self.x2mModel ? self.x2mModel : self.model_name;\n                        prom = self._rpc({\n                            model:\"ir.model.fields\",\n                            method: \"search_count\",\n                            args: [[['relation', '=', modelName], ['ttype', '=', 'many2one']]],\n                        });\n                    } else {\n                        prom = Promise.resolve(true);\n                    }\n                    prom.then(function (openFieldDialog) {\n                        if (!openFieldDialog) {\n                            // In case of o2m fields, if there's no m2o field available, display a warning instead\n                            var $message = $(QWeb.render('web_studio.FieldOne2manyWarning'));\n                            dialog = Dialog.alert(self, '', {\n                                $content: $('<main/>', {\n                                    role: 'alert',\n                                    html: $message,\n                                }),\n                                title: _t(\"No related many2one fields found\"),\n                            });\n                            dialog.on('closed', self, function () {\n                                reject();\n                            });\n                        } else {\n                            // open dialog to precise the required fields for this field\n                            dialog = new NewFieldDialog(self, modelName, field_description, _.filter(self.fields, {type: 'many2one'})).open();\n                            dialog.on('field_default_values_saved', self, function (values) {\n                                if (values.related && values.type === 'monetary') {\n                                    if (self._hasCurrencyField()) {\n                                        resolve(values);\n                                        dialog.close();\n                                    } else {\n                                        var relatedCurrency = values._currency;\n                                        delete values._currency;\n                                        var currencyDialog = openCurrencyCreationDialog(relatedCurrency, resolve);\n                                        currencyDialog.on('closed', self, function () {\n                                            dialog.close();\n                                        });\n                                    }\n                                } else {\n                                    resolve(values);\n                                    dialog.close();\n                                }\n                            });\n                            dialog.on('closed', self, function () {\n                                reject();\n                            });\n                        }\n                    });\n                });\n            } else if (field_description.type === 'monetary') {\n                def_field_values = new Promise(function (resolve, reject) {\n                    if (self._hasCurrencyField()) {\n                        resolve();\n                    } else {\n                        dialog = openCurrencyCreationDialog(null, resolve);\n                        dialog.on('closed', self, function () {\n                            reject();\n                        });\n                    }\n                });\n            } else if (field_description.type === 'integer') {\n                field_description.default_value = '0'\n            }\n        }\n        // When the field values is selected, close the dialog and update the view\n        Promise.resolve(def_field_values).then(function (values) {\n            framework.blockUI();\n            if (field_description) {\n                self.renamingAllowedFields.push(field_description.name);\n            }\n            if (data.add_statusbar) {\n                self.operations.push({type: 'statusbar'});\n            }\n            var target = data.target || {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, self.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            };\n            self._do({\n                type: type,\n                target: target,\n                position: position,\n                node: {\n                    tag: 'field',\n                    attrs: new_attrs,\n                    field_description: _.extend(field_description, values),\n                },\n            }).then(function () {\n                framework.unblockUI();\n                if (self.editor.selectField && field_description) {\n                    self.editor.selectField(field_description.name);\n                }\n            }).guardedCatch(framework.unblockUI);\n        }).guardedCatch(function () {\n            self.updateEditor();\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {String} position\n     * @param {Object} new_attrs\n     */\n    _addFilter: function (type, node, xpath_info, position, new_attrs) {\n        this._do({\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n            position: position,\n            node: {\n                tag: 'filter',\n                attrs: new_attrs,\n            },\n        });\n    },\n    /**\n     * @private\n     */\n    _addKanbanDropdown: function () {\n        this._do({\n            type: 'kanban_dropdown',\n        });\n    },\n    /**\n     * @private\n     * @param {string} type\n     */\n    _editKanbanCover: function (type) {\n        if (type === 'kanban_set_cover') {\n            var compatibleFields = _.pick(this.fields, function (field) {\n               return field.type === \"many2one\" && field.relation === \"ir.attachment\";\n            });\n            var dialog = new FieldSelectorDialog(this, compatibleFields, true).open();\n            dialog.on('confirm', this, function (field) {\n                this._do({\n                    type: type,\n                    field: field,\n                });\n            });\n        }\n        if (type === 'remove') {\n            var fieldToRemove = _.pick(this.view.fieldsInfo[this.view_type], function (field) {\n                return field.widget === \"attachment_image\";\n            });\n\n            this._do({\n                type: type,\n                target: {\n                    tag: 'field',\n                    attrs: {name: _.keys(fieldToRemove)[0]},\n                    extra_nodes: [{\n                        tag: \"a\",\n                        attrs: {\n                            type: 'set_cover',\n                        },\n                    }],\n                },\n            });\n        }\n    },\n    /**\n     * @private\n     * @param {Object} data\n     */\n    _addKanbanPriority: function (data) {\n        this._do({\n            type: 'kanban_priority',\n            field: data.field,\n        });\n    },\n    /**\n     * @private\n     * @param {Object} data\n     */\n    _addKanbanImage: function (data) {\n        this._do({\n            type: 'kanban_image',\n            field: data.field,\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {String} position\n     */\n    _addPage: function (type, node, xpath_info, position) {\n        this._do({\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n            position: position,\n            node: {\n                tag: 'page',\n                attrs: {\n                    string: 'New Page',\n                    name: 'studio_page_' + utils.randomString(5),\n                }\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {String} position\n     */\n    _addSeparator: function (type, node, xpath_info, position) {\n        this._do({\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n            position: position,\n            node: {\n                tag: 'separator',\n                attrs: {\n                    name: 'studio_separator_' + utils.randomString(5),\n                },\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {string} type operation type\n     * @param {integer[]} fieldIDs\n     */\n    _changeMapPopupFields: function (type, fieldIDs) {\n        this._do({\n            type: 'map_popup_fields',\n            target: {\n                operation_type: type,\n                field_ids: fieldIDs,\n            }\n        });\n    },\n    /**\n     * @private\n     * @param {string} type operation type\n     * @param {integer[]} fieldIDs\n     */\n    _changePivotMeasuresFields(type, fieldIDs) {\n        framework.blockUI();\n        this._do({\n            type: 'pivot_measures_fields',\n            target: {\n                operation_type: type,\n                field_ids: fieldIDs,\n            }\n        }).finally(framework.unblockUI);\n    },\n    /**\n     * @private\n     * @param {string} type operation type\n     * @param {object} data\n     */\n    _changeGraphPivotGroupbysFields(type, data) {\n        framework.blockUI();\n        this._do({\n            type: 'graph_pivot_groupbys_fields',\n            target: {\n                operation_type: data.options.operationType,\n                field_names: data.options.name,\n                old_field_names: data.options.oldname,\n                view_type: data.options.viewType,\n                field_type: data.options.type,\n            }\n        }).finally(framework.unblockUI);\n    },\n    /**\n     * @override\n     */\n    _applyChangeHandling: async function (result, opID) {\n        var self = this;\n        var prom = Promise.resolve();\n\n        if (!result.fields_views) {\n            // the operation can't be applied\n            this.trigger_up('studio_error', {error: 'wrong_xpath'});\n            return this._undo(opID, true).then(function () {\n                return Promise.reject();\n            });\n        }\n\n        // the studio_view could have been created at the first edition so\n        // studio_view_id must be updated (but /web_studio/edit_view_arch\n        // doesn't return the view id)\n        if (result.studio_view_id) {\n            this.studio_view_id = result.studio_view_id;\n        }\n\n        // NOTE: fields & fields_view are from the base model here.\n        // fields will be updated accordingly if editing a x2m (see\n        // @_setX2mParameters).\n        this.fields = this._processFields(result.fields);\n        this.fields_view = result.fields_views[this.mainViewType];\n        // TODO: this processing is normally done in data_manager so we need\n        // to duplicate it here ; it should be moved in init of\n        // abstract_view to avoid the duplication\n        this.fields_view.viewFields = this.fields_view.fields;\n        this.fields_view.fields = result.fields;\n\n        if (this.isEditingX2m) {\n            this.fields_view = this._getX2mFieldsView(this.fields_view);\n            this.fields = await this._getProcessedX2mFields();\n        }\n\n        return prom.then(self.updateEditor.bind(self));\n    },\n    /**\n     * Find a currency field on the current model ; a monetary field can not be\n     * added if such a field does not exist on the model.\n     *\n     * @private\n     * @return {boolean} the presence of a currency field\n     */\n    _hasCurrencyField: function () {\n        var currencyField = _.find(this.fields, function (field) {\n            return field.type === 'many2one' && field.relation === 'res.currency' &&\n                (field.name === 'currency_id' || field.name === 'x_currency_id');\n        });\n        return !!currencyField;\n    },\n    /**\n     * @override\n     * @param {Object} [lastOp]\n     */\n    _cleanOperationsStack: function (lastOp) {\n        // As the studio view arch is stored in this widget, if this view\n        // is updated directly with the XML editor, the arch should be updated.\n        // The operations may not have any sense anymore so they are dropped.\n        if (lastOp && lastOp.view_id === this.studio_view_id) {\n            this.studio_view_arch = lastOp.new_arch;\n            this._super.apply(this, arguments);\n        }\n    },\n    /**\n     * Makes a RPC to modify the studio view in order to add the x2m view\n     * inline. This is done to avoid modifying the x2m default view.\n     *\n     * @private\n     * @param {string} type\n     * @param {string} field_name\n     * @return {Promise}\n     */\n    _createInlineView: async function (type, field_name) {\n        var subviewType = type === 'list' ? 'tree' : type;\n        // We build the correct xpath if we are editing a 'sub' subview\n        var subviewXpath = this._getSubviewXpath(this.x2mEditorPath.slice(0, -1));\n        var context = _.extend({}, session.user_context, {lang: false});\n        // Use specific view if available in context\n        var specific_view = this.x2mViewParams.context[subviewType+'_view_ref'];\n        if (specific_view) {\n            context[subviewType+'_view_ref'] = specific_view;\n        }\n        const studioViewArch = await this._rpc({\n            route: '/web_studio/create_inline_view',\n            params: {\n                model: this.x2mModel,\n                view_id: this.view_id,\n                field_name: field_name,\n                subview_type: subviewType,\n                subview_xpath: subviewXpath,\n                // We write views in the base language to make sure we do it on the source term field\n                // of ir.ui.view\n                context: context,\n            },\n        });\n\n        this.operations = [];\n        this.studio_view_arch = studioViewArch;\n\n        const viewInfo = await this.loadViews(\n            this.model_name,\n            this.currentX2m.x2mViewContext || {},\n            [[this.view_id, this.mainViewType]]\n        );\n\n        return viewInfo[this.mainViewType];\n    },\n    /**\n     * @override\n     */\n    _do: function (op) {\n        // If we are editing an x2m field, we specify the xpath needed in front\n        // of the one generated by the default route.\n        if (this.x2mField && op.target) {\n            this._setSubViewXPath(op);\n        }\n\n        return this._super.apply(this, arguments);\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {Object} new_attrs\n     */\n    _editElementAttributes: function (type, node, xpath_info, new_attrs) {\n        var newOp = {\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n            position: 'attributes',\n            node: node,\n            new_attrs: new_attrs,\n        };\n        if (node.tag === 'field' && new_attrs.string &&\n            _.contains(this.renamingAllowedFields, node.attrs.name)) {\n            if (this.x2mField) {\n                this._setSubViewXPath(newOp);\n            }\n            this.operations.push(newOp);\n\n            // find a new name that doesn't exist yet, acording to the label\n            var baseName = 'x_studio_' + this._slugify(new_attrs.string);\n            var newName = baseName;\n            var index = 1;\n            while (newName in this.fields) {\n                newName = baseName + '_' + index;\n                index++;\n            }\n\n            this._renameField(node.attrs.name, newName);\n        } else {\n            this._do(newOp);\n        }\n    },\n    _editField(modelName, fieldName, values, forceEdit) {\n        return this._rpc({\n            route: '/web_studio/edit_field',\n            params: {\n                model_name: modelName,\n                field_name: fieldName,\n                values: values,\n                force_edit: forceEdit,\n            }\n        })\n    },\n    /**\n     * @override\n     */\n    _editView: function (view_id, studio_view_arch, operations) {\n        core.bus.trigger('clear_cache');\n        return this._rpc({\n            route: '/web_studio/edit_view',\n            params: {\n                view_id: view_id,\n                studio_view_arch: studio_view_arch,\n                operations: operations,\n                model: this.x2mModel ? this.x2mModel : this.model_name,\n                // We write views in the base language to make sure we do it on the source term field\n                // of ir.ui.view\n                context: _.extend({}, session.user_context, {lang: false}),\n            },\n        });\n    },\n    /**\n     * @override\n     */\n    _editViewArch: function (view_id, view_arch) {\n        core.bus.trigger('clear_cache');\n        return this._rpc({\n            route: '/web_studio/edit_view_arch',\n            params: {\n                view_id: view_id,\n                view_arch: view_arch,\n                // We write views in the base language to make sure we do it on the source term field\n                // of ir.ui.view\n                context: _.extend({}, session.user_context, {lang: false}),\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} new_attrs\n     */\n    _editViewAttributes: function (type, new_attrs) {\n        this._do({\n            type: type,\n            target: {\n                tag: this.view_type === 'list' ? 'tree' : this.view_type,\n                isSubviewAttr: true,\n            },\n            position: 'attributes',\n            new_attrs: new_attrs,\n        });\n    },\n    /**\n     * Fetch the full spec of the approval rules for a specific\n     * action on the model. This is used by the sidebar to display the\n     * approval rules on a <button> node.\n     * @private\n     * @param {String} model_name\n     * @param {String} method\n     * @param {String} action\n     * @returns {Promise}\n     */\n    _getApprovalSpec: async function (model_name, method, action) {\n        const spec = await this._rpc({\n            model: 'studio.approval.rule',\n            method: 'get_approval_spec',\n            args: [model_name, method, action],\n            kwargs: { res_id: false },\n        });\n        return {approvalData: spec};\n    },\n    /**\n     * @private\n     * @param {String} model_name\n     * @param {String} field_name\n     * @returns {Promise}\n     */\n    _getDefaultValue: function (model_name, field_name) {\n        return this._rpc({\n            route: '/web_studio/get_default_value',\n            params: {\n                model_name: model_name,\n                field_name: field_name,\n            },\n        });\n    },\n    /**\n     * @private\n     */\n    _getDefaultSidebarMode: function () {\n        return _.contains(['form', 'list', 'search'], this.view_type) ? 'new' : 'view';\n    },\n    /**\n     * @private\n     * @param {String} model_name\n     * @returns {Promise}\n     */\n    _getEmailAlias: function (model_name) {\n        return this._rpc({\n            route: '/web_studio/get_email_alias',\n            params: {\n                model_name: model_name,\n            },\n        });\n    },\n    /**\n     * @private\n     * @returns {boolean}\n     */\n    _getShowInvisible() {\n        return Boolean(\n            this.sidebar &&\n            this.sidebar.state &&\n            this.sidebar.state.show_invisible\n        );\n    },\n    /**\n     * Makes a fields_get onto the current x2m model\n     * @private\n     */\n    async _getProcessedX2mFields() {\n        const fields = await this._rpc({\n            model: this.x2mModel,\n            method: 'fields_get',\n        })\n        return this._processFields(fields);\n    },\n    /**\n     * @override\n     * @param {Object} [params]\n     * @param {Object} [params.node] mandatory if mode \"properties\"\n     */\n    _getSidebarState: function (mode, params) {\n        var newState;\n        var def = Promise.resolve();\n        if (mode) {\n            newState = _.extend({}, params, {\n                renamingAllowedFields: this.renamingAllowedFields,\n                mode: mode,\n                show_invisible: this._getShowInvisible(),\n            });\n        } else {\n            newState = this.sidebar.state;\n        }\n        switch (mode) {\n            case 'view':\n                newState = _.extend(newState, {\n                    attrs: this.view.arch.attrs,\n                });\n                break;\n            case 'new':\n                break;\n            case 'properties':\n                var attrs;\n                var node = params.node;\n                if (node.tag === 'field' && this.view_type !== 'search') {\n                    var viewType = this.editor.state.viewType;\n                    attrs = this.editor.state.fieldsInfo[viewType][node.attrs.name];\n                } else {\n                    attrs = node.attrs;\n                }\n                newState = _.extend(newState, {\n                    attrs: attrs,\n                });\n\n                var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n                if (node.tag === 'field') {\n                    def = this._getDefaultValue(modelName, node.attrs.name);\n                }\n                if (node.tag === 'div' && node.attrs.class === 'oe_chatter') {\n                    def = this._getEmailAlias(modelName);\n                }\n                if (node.tag === 'button' && node.attrs.studio_approval && node.attrs.studio_approval !== 'False') {\n                    let method, action;\n                    if (node.attrs.type === 'object') {\n                        method = node.attrs.name;\n                    } else if (node.attrs.type === 'action') {\n                        action = parseInt(node.attrs.name);\n                    }\n                    def = this._getApprovalSpec(modelName, method, action);\n                }\n                break;\n        }\n\n        return def.then(function (result) {\n            return _.extend(newState, result);\n        });\n    },\n    /**\n     * @private\n     * @param  {Array} x2mEditorPath\n     * @return {String}\n     */\n    _getSubviewXpath: function (x2mEditorPath) {\n        var subviewXpath = \"\";\n        _.each(x2mEditorPath, function (x2mPath) {\n            var x2mViewType = x2mPath.x2mViewType === 'list' ? 'tree' : x2mPath.x2mViewType;\n            subviewXpath += \"//field[@name='\" + x2mPath.x2mField + \"']/\" + x2mViewType;\n        });\n        return subviewXpath;\n    },\n    /**\n     * From the main view's fields_view, go through the x2mEditorPath to get the current x2m fields_view\n     *\n     * @private\n     * @param {Object} fieldsView: the main view's field_view\n     * @return {Object} the fields_view of the x2m field\n     */\n    _getX2mFieldsView(fieldsView) {\n        // this is a crappy way of processing the arch received as string\n        // because we need a processed fields_view to find the x2m fields view\n        const View = view_registry.get(this.mainViewType);\n        const view = new View(fieldsView, _.extend({}, this.x2mViewParams));\n\n        let fields_view = view.fieldsView;\n\n        const x2mEditorPath = this.x2mEditorPath;\n        for (let index = 0; index < x2mEditorPath.length; index++) {\n            const step = x2mEditorPath[index];\n            const x2mField = fields_view.fieldsInfo[step.parentViewType][step.x2mField];\n            fields_view = x2mField.views[step.x2mViewType];\n        }\n        if (fields_view) {\n            fields_view.model = this.x2mModel;\n        }\n        return fields_view;\n    },\n    /**\n     * @override\n     * @returns {Promise<Widget>}\n     */\n    _instantiateEditor: async function (params) {\n        params = params || {};\n\n        const fields_view = this.fields_view;\n\n        var viewParams = this.x2mField ? this.x2mViewParams : {\n            action: this.action,\n            context: this.action.context,\n            controllerState: this.controllerState,\n            withSearchPanel: false,\n            domain: this.action.domain,\n        };\n\n        var def;\n        // Different behaviour for the search view because\n        // it's not defined as a \"real view\", no inherit to abstract view.\n        // The search view in studio has its own renderer.\n        if (this.view_type === 'search') {\n            if (this.mode === 'edition') {\n                const editorParams = _.defaults(params, {\n                    show_invisible: this._getShowInvisible(),\n                });\n                this.view = new Editors.search(this, fields_view, editorParams);\n            } else {\n                this.view = new SearchRenderer(this, fields_view);\n            }\n            def = Promise.resolve(this.view);\n        } else {\n            var View = view_registry.get(this.view_type);\n            this.view = new View(fields_view, _.extend({}, viewParams));\n            if (this.mode === 'edition') {\n                var Editor = Editors[this.view_type];\n                if (!Editor) {\n                    // generate the Editor on the fly if it doesn't exist\n                    if (isComponent(View.prototype.config.Renderer)) {\n                        const Renderer = class extends EditorMixinOwl(View.prototype.config.Renderer) { };\n                        const propsValidation = View.prototype.config.Renderer.props;\n                        if (propsValidation) {\n                            const optString = { type: String, optional: 1 };\n                            Renderer.props = Object.assign({}, propsValidation, {\n                                mode: propsValidation.mode || String,\n                                chatter_allowed: propsValidation.chatter_allowed || Boolean,\n                                show_invisible: propsValidation.show_invisible || Boolean,\n                                arch: propsValidation.arch || Object,\n                                x2mField: propsValidation.x2mField || optString,\n                                viewType: propsValidation.viewType || String,\n                            });\n                        }\n                        params.Component = Renderer;\n                        Editor = EditorWrapper;\n                    } else {\n                        Editor = View.prototype.config.Renderer.extend(EditorMixin);\n                    }\n                }\n                var chatterAllowed = this.x2mField ? false : this.chatter_allowed;\n                var editorParams = _.defaults(params, {\n                    mode: 'readonly',\n                    chatter_allowed: chatterAllowed,\n                    show_invisible: this._getShowInvisible(),\n                    arch: this.view.arch,\n                    x2mField: this.x2mField,\n                    viewType: this.view_type,\n                });\n\n                if (this.view_type === 'list') {\n                    editorParams.hasSelectors = false;\n                }\n                def = this.view.createStudioEditor(this, Editor, editorParams);\n            } else {\n                def = this.view.createStudioRenderer(this, {\n                    mode: 'readonly',\n                });\n            }\n        }\n        const editor = await def;\n        return editor;\n    },\n    /**\n     * @override\n     */\n    _instantiateSidebar: function (state, previousState) {\n\n        var defaultMode = this._getDefaultSidebarMode();\n        state = _.defaults(state || {}, {\n            mode: defaultMode,\n            attrs: defaultMode === 'view' ? this.view.arch.attrs : {},\n        });\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        var params = {\n            view_type: this.view_type,\n            model_name: modelName,\n            fields: this.fields,\n            renamingAllowedFields: this.renamingAllowedFields,\n            state: state,\n            previousState: previousState,\n            isEditingX2m: !!this.x2mField,\n            // In case of a search view, the editor doesn't have state\n            editorData: this.editor.state && this.editor.state.data || {},\n            fieldsInfo: this.view.fieldsInfo ? this.view.fieldsInfo[this.view_type] : false,\n            defaultOrder: this.view.arch.attrs.default_order || false,\n        };\n\n        if (_.contains(['list', 'form', 'kanban'], this.view_type)) {\n            var fields_in_view = _.pick(this.fields, this.editor.state.getFieldNames());\n            var fields_not_in_view = _.omit(this.fields, this.editor.state.getFieldNames());\n            params.fields_not_in_view = fields_not_in_view;\n            params.fields_in_view = fields_in_view;\n        } else if (this.view_type === 'search') {\n            // we return all the model fields since it's possible\n            // to have multiple times the same field defined in the search view.\n            params.fields_not_in_view = this.fields;\n            params.fields_in_view = [];\n        } else if (this.view_type === 'pivot') {\n            params.colGroupBys = this.view.loadParams.colGroupBys;\n            params.rowGroupBys = this.view.loadParams.rowGroupBys;\n            params.measures = this.view.controllerParams.measures;\n        } else if (this.view_type === 'graph') {\n            params.groupBys = this.view.loadParams.groupBys;\n            params.measure = this.view.loadParams.measure;\n        }\n\n        return new ViewEditorSidebar(this, params);\n    },\n\n    _computeX2mPath(x2mField, x2mViewType, fieldsView=null, x2mData=null) {\n        let fields = this.fields;\n        if (fieldsView) {\n            fields = fieldsView.fields;\n        }\n        const x2mModel = fields[x2mField].relation;\n\n        let data = x2mData;\n        if (x2mViewType === 'form' && data.count) {\n            // the x2m data is a datapoint type list and we need the datapoint\n            // type record to open the form view with an existing record\n            data = data.data[0];\n        }\n        const context = _.omit(data.getContext(), function (val, key) {\n            return key.startsWith('default_');\n        });\n\n        const x2mViewParams = {\n            currentId: data.res_id,\n            context: context,\n            ids: data.res_ids,\n            model: this.editor.model,  // reuse the same BasicModel instance\n            modelName: x2mModel,\n            parentID: this.editor.state.id,\n        };\n\n        return  {\n            parentViewType: this.view_type,\n            x2mField: x2mField,\n            x2mViewType: x2mViewType,\n            x2mModel,\n            x2mData,\n            x2mViewParams,\n            x2mViewContext: this.view.loadParams.context,\n        };\n    },\n    /**\n     * Processes the fields to write the field name inside the description. This\n     * name is mainly used in the sidebar.\n     *\n     * @private\n     * @param {Object} fields\n     * @returns {Object} a deep copy of fields with the key as attribute `name`\n     */\n    _processFields: function (fields) {\n        fields = $.extend(true, {}, fields);  // deep copy\n        _.each(fields, function (value, key) {\n            value.name = key;\n        });\n        return fields;\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     */\n    _removeElement: function (type, node, xpath_info) {\n        // After the element removal, if the parent doesn't contain any children\n        // anymore, the parent node is also deleted (except if the parent is\n        // the only remaining node and if we are editing a x2many subview)\n        if (!this.x2mField) {\n            var parent_node = findParent(this.view.arch, node, this.expr_attrs);\n            var is_root = !findParent(this.view.arch, parent_node, this.expr_attrs);\n            var is_group = parent_node.tag === 'group';\n            if (parent_node.children.length === 1 && !is_root && !is_group) {\n                node = parent_node;\n                // Since we changed the node being deleted, we recompute the xpath_info\n                // if necessary\n                if (node && _.isEmpty(_.pick(node.attrs, this.expr_attrs[node.tag]))) {\n                    xpath_info = findParentsPositions(this.view.arch, node);\n                }\n            }\n        }\n\n        this.editor.unselectedElements();\n        this._resetSidebarMode();\n        this._do({\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n        });\n    },\n    /**\n     * Rename field.\n     *\n     * @private\n     * @param {string} oldName\n     * @param {string} newName\n     * @returns {Promise}\n     */\n    _renameField: function (oldName, newName) {\n        var self = this;\n\n        // blockUI is used to prevent the user from doing any operation\n        // because the hooks are still related to the old field name\n        framework.blockUI();\n        this.sidebar.$('input').attr('disabled', true);\n        this.sidebar.$('select').attr('disabled', true);\n\n        return this._rpc({\n            route: '/web_studio/rename_field',\n            params: {\n                studio_view_id: this.studio_view_id,\n                studio_view_arch: this.studio_view_arch,\n                model: this.x2mModel ? this.x2mModel : this.model_name,\n                old_name: oldName,\n                new_name: newName,\n            },\n        }).then(function () {\n            self._updateOperations(oldName, newName);\n            var oldFieldIndex = self.renamingAllowedFields.indexOf(oldName);\n            self.renamingAllowedFields.splice(oldFieldIndex, 1);\n            self.renamingAllowedFields.push(newName);\n            return self._applyChanges().then(framework.unblockUI).guardedCatch(framework.unblockUI);\n        }).guardedCatch(framework.unblockUI);\n    },\n    /**\n     * @private\n     */\n    _resetSidebarMode: function () {\n        this._updateSidebar(this._getDefaultSidebarMode());\n    },\n    /**\n     * @private\n     * @param {int} view_id\n     * @returns {Promise}\n     */\n    _restoreDefaultView: async function (view_id) {\n        core.bus.trigger('clear_cache');\n        const result = await this._rpc({\n            route: '/web_studio/restore_default_view',\n            params: {\n                view_id: view_id,\n            },\n        });\n        await this._applyChangeHandling(result);\n        this.studio_view_id = null;\n        this.operations = [];\n        this.operations_undone = [];\n        this.studio_view_arch = \"\";\n        this._updateButtons();\n        await this._updateSidebar(this.sidebar.state.mode);\n        bus.trigger('toggle_snack_bar', 'saved');\n    },\n    /**\n     * @private\n     * @param {String} model_name\n     * @param {String} field_name\n     * @param {*} value\n     * @returns {Promise}\n     */\n    _setDefaultValue: function (model_name, field_name, value) {\n        var params = {\n            model_name: model_name,\n            field_name: field_name,\n            value: value,\n        };\n        return this._rpc({route: '/web_studio/set_default_value', params: params});\n    },\n    /**\n     * @private\n     * @param {String} model_name\n     * @param {[type]} value\n     * @returns {Promise}\n     */\n    _setEmailAlias: function (model_name, value) {\n        return this._rpc({\n            route: '/web_studio/set_email_alias',\n            params: {\n                model_name: model_name,\n                value: value,\n            },\n        });\n    },\n    /**\n     * Modifies in place the operation to add `subview_xpath` on the target key.\n     *\n     * @private\n     * @param {Object} op\n     */\n    _setSubViewXPath: function (op) {\n        var subviewXpath = this._getSubviewXpath(this.x2mEditorPath);\n        // If the xpath_info last element is the same than the subview type\n        // we remove it since it will be added by the subviewXpath.\n        if (op.target.xpath_info && op.target.xpath_info[0].tag === this.x2mViewType) {\n            op.target.xpath_info.shift();\n        }\n        op.target.subview_xpath = subviewXpath;\n\n        if (op.type === 'move') {\n            // the node also comes from the subview in 'move' operations\n            op.node.subview_xpath = subviewXpath;\n        }\n    },\n    /**\n     * Slugifies a string (used to transform a label into a field name)\n     * Source: https://gist.github.com/mathewbyrne/1280286\n     *\n     * @private\n     * @param {string} text\n     * @returns {string}\n     */\n    _slugify: function (text) {\n        return text.toString().toLowerCase().trim()\n            .replace(/[^\\w\\s-]/g, '') // remove non-word [a-z0-9_], non-whitespace, non-hyphen characters\n            .replace(/[\\s_-]+/g, '_') // swap any length of whitespace, underscore, hyphen characters with a single _\n            .replace(/^-+|-+$/g, ''); // remove leading, trailing -\n    },\n    /**\n     * Updates the list of operations after a field renaming (i.e. replace all\n     * occurences of @oldName by @newName).\n     *\n     * @private\n     * @param {string} oldName\n     * @param {string} newName\n     */\n    _updateOperations: function (oldName, newName) {\n        var strOperations = JSON.stringify(this.operations);\n        // We only want to replace exact matches of the field name, but it can\n        // be preceeded/followed by other characters, like parent.my_field or in\n        // a domain like [('...', '...', my_field)] etc.\n        // Note that negative lookbehind is not correctly handled in JS ...\n        var chars = '[^\\\\w\\\\u007F-\\\\uFFFF]';\n        var re = new RegExp('(' + chars + '|^)' + oldName + '(' + chars + '|$)', 'g');\n        this.operations = JSON.parse(strOperations.replace(re, '$1' + newName + '$2'));\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n    * Handler for 'Remove rule' button.\n    * @private\n    * @param {OdooEvent} ev\n    */\n    _onApprovalArchive: async function (ev) {\n        bus.trigger(\"toggle_snack_bar\", \"saving\");\n        await this._rpc({\n            model: \"studio.approval.rule\",\n            method: \"write\",\n            args: [[ev.data.ruleId], { active: false }],\n        });\n        await this._updateSidebar(this.sidebar.state.mode, {\n            node: this.sidebar.state.node,\n        });\n        bus.trigger(\"toggle_snack_bar\", \"saved\");\n        this.updateEditor();\n    },\n    /**\n     * Handler for generic edition of approval rule.\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onApprovalChange: async function(ev) {\n        const node = ev.data.node;\n        // modifying approval spec, everything done server-side\n        // and widgets will fetch their spec on re-render\n        const isMethod = node.attrs.type === 'object';\n        bus.trigger('toggle_snack_bar', 'saving');\n        const result = await this._rpc({\n            route: '/web_studio/edit_approval',\n            params: {\n                model: this.model_name,\n                method: isMethod?node.attrs.name:false,\n                action: isMethod?false:node.attrs.name,\n                operations: [[ev.data.type, ev.data.ruleId, ev.data.payload]],\n            }\n        });\n        bus.trigger('toggle_snack_bar', 'saved');\n    },\n    /**\n    * Handler for writing the domain on an approval rule (when the domain\n    * selection dialog is closed).\n    * @private\n    * @param {OdooEvent} ev\n    */\n   _onApprovalCondition: async function (ev) {\n        bus.trigger(\"toggle_snack_bar\", \"saving\");\n        await this._rpc({\n            model: \"studio.approval.rule\",\n            method: \"write\",\n            args: [[ev.data.ruleId], { domain: ev.data.domain }],\n        });\n        bus.trigger(\"toggle_snack_bar\", \"saved\");\n        this._updateSidebar(this.sidebar.state.mode, {\n            node: this.sidebar.state.node,\n        });\n    },\n    /**\n    * Handler for changes on the 'group_id' field of an approval rule.\n    * @private\n    * @param {OdooEvent} ev\n    */\n    _onApprovalGroupChange: async function (ev) {\n        bus.trigger(\"toggle_snack_bar\", \"saving\");\n        await this._rpc({\n            model: \"studio.approval.rule\",\n            method: \"write\",\n            args: [[ev.data.ruleId], { group_id: ev.data.groupId }],\n        });\n        bus.trigger(\"toggle_snack_bar\", \"saved\");\n        this._updateSidebar(this.sidebar.state.mode, {\n            node: this.sidebar.state.node,\n        });\n    },\n    /**\n    * Handler for 'add approval rule' button.\n    * @private\n    * @param {OdooEvent} ev\n    */\n    _onApprovalNewRule: async function (ev) {\n        bus.trigger(\"toggle_snack_bar\", \"saving\");\n        await this._rpc({\n            model: \"studio.approval.rule\",\n            method: \"create_rule\",\n            args: [],\n            kwargs: {\n                model: ev.data.model,\n                method: ev.data.method,\n                action_id: parseInt(ev.data.action),\n            },\n        });\n        await this._updateSidebar(this.sidebar.state.mode, {\n            node: this.sidebar.state.node,\n        });\n        bus.trigger(\"toggle_snack_bar\", \"saved\");\n        this.updateEditor();\n    },\n    /**\n     * @override\n     */\n    _onCloseXMLEditor: function () {\n        this._super.apply(this, arguments);\n        this.updateEditor();\n    },\n    /**\n     * Show nearrest hook.\n     *\n     * @override\n     */\n    _onDragComponent: function (ev) {\n        var is_nearest_hook = this.editor.highlightNearestHook(ev.data.$helper, ev.data.position);\n        ev.data.$helper.toggleClass('ui-draggable-helper-ready', is_nearest_hook);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onDefaultValueChange: function (event) {\n        var data = event.data;\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        this._setDefaultValue(modelName, data.field_name, data.value)\n            .guardedCatch(function () {\n                if (data.on_fail) {\n                    data.on_fail();\n                }\n            });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onEmailAliasChange: function (event) {\n        var value = event.data.value;\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        this._setEmailAlias(modelName, value);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onFieldEdition: function (event) {\n        var self = this;\n        var node = event.data.node;\n        var field = this.fields[node.attrs.name];\n        var dialog = new NewFieldDialog(this, this.model_name, field, this.fields).open();\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        dialog.on('field_default_values_saved', this, function (values) {\n            self._editField(modelName, field.name, values).then(function (result) {\n                const _closeDialog = function () {\n                    dialog.close();\n                    self._applyChanges(false, false);\n                };\n                if (result && result.records_linked) {\n                    const message = result.message || _t(\"Are you sure you want to remove the selection values?\");\n                    Dialog.confirm(self, message, {\n                        confirm_callback: async function () {\n                            await self._editField(modelName, field.name, values, true);\n                            _closeDialog();\n                        },\n                        dialogClass: 'o_web_studio_preserve_space'\n                    });\n                } else {\n                    _closeDialog();\n                }\n            });\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onFieldRenamed: function (event) {\n        this._renameField(event.data.oldName, event.data.newName);\n    },\n    /**\n     * Toggle editor sidebar.\n     *\n     * @param {Object} ev.data.node\n     * @param {jQueryElement} [ev.data.$node]\n     * @override\n     *\n     */\n    _onNodeClicked: function (ev) {\n        var self = this;\n        var node = ev.data.node;\n        var $node = ev.data.$node;\n        if (this.view_type === 'form' && node.tag === 'field') {\n            var field = this.fields[node.attrs.name];\n            var attrs = this.editor.state.fieldsInfo[this.editor.state.viewType][node.attrs.name];\n            var isX2Many = _.contains(['one2many','many2many'], field.type);\n            var notEditableWidgets = ['many2many_tags', 'hr_org_chart'];\n            if (isX2Many && !_.contains(notEditableWidgets, attrs.widget)) {\n                // If the node is a x2many we offer the possibility to edit or\n                // create the subviews\n                var message = $(QWeb.render('web_studio.X2ManyEdit'));\n                var options = {\n                    baseZ: 1000, // reset z-index to 1000 from 1100 for element blocking else dialog hides behind it\n                    message: message,\n                    css: {\n                        cursor: 'auto',\n                    },\n                    overlayCSS: {\n                        cursor: 'auto',\n                    }\n                };\n                // Only the o_field_x2many div needs to be overlaid.\n                // So if the node is not the div we find it before applying the overlay.\n                if ($node.hasClass('o_field_one2many') || $node.hasClass('o_field_many2many')) {\n                    $node.block(options);\n                } else {\n                    $node.find('div.o_field_one2many, div.o_field_many2many').block(options);\n                }\n                $node.find('.o_web_studio_editX2Many').click(function (e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    const x2mFieldName = node.attrs.name;\n                    const x2mViewType = e.currentTarget.dataset.type;\n                    // trigger on studioBus\n                    bus.trigger('STUDIO_ENTER_X2M',\n                        self._computeX2mPath(x2mFieldName, x2mViewType, null, self.editor.state.data[x2mFieldName])\n                    );\n                });\n            }\n        }\n        this._updateSidebar('properties', ev.data);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onOpenDefaults: function () {\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        this.do_action({\n            name: _t('Default Values'),\n            type: 'ir.actions.act_window',\n            res_model: 'ir.default',\n            target: 'current',\n            views: [[false, 'list'], [false, 'form']],\n            domain: [['field_id.model', '=', modelName]],\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onOpenFieldForm: function (event) {\n        var self = this;\n        var field_name = event.data.field_name;\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        this._rpc({\n            model: 'ir.model.fields',\n            method: 'search_read',\n            fields: ['id'],\n            domain: [['model', '=', modelName], ['name', '=', field_name]],\n        }).then(function (result) {\n            var res_id = result.length && result[0].id;\n            if (res_id) {\n                self.do_action({\n                    type: 'ir.actions.act_window',\n                    res_model: 'ir.model.fields',\n                    res_id: res_id,\n                    views: [[false, 'form']],\n                    target: 'current',\n                });\n            }\n        });\n    },\n    /**\n     * @private\n     */\n    _onOpenRecordFormView: function () {\n        this.do_action({\n            type: 'ir.actions.act_window',\n            res_model: 'ir.ui.view',\n            res_id: this.view_id,\n            views: [[false, 'form']],\n            target: 'current',\n        });\n    },\n    /**\n     * @override\n     */\n    _onOpenXMLEditor: function () {\n        this._super.apply(this, arguments);\n        this.renamingAllowedFields = [];\n        this.updateEditor();  // the editor will be rendered in `rendering` mode\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onShowInvisibleToggled: function (ev) {\n        this.updateEditor({ show_invisible: Boolean(ev.data.show_invisible) });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onViewChange: function (event) {\n        var structure = event.data.structure;\n        var type = event.data.type;\n        var node = event.data.node;\n        var new_attrs = event.data.new_attrs || {};\n        var position = event.data.position || 'after';\n        var xpath_info;\n        if (node) {\n            const arch = Editors[this.view_type].prototype.preprocessArch(this.view.arch);\n            xpath_info = findParentsPositions(arch, node);\n        }\n        switch (structure) {\n            case 'text':\n                break;\n            case 'picture':\n                break;\n            case 'group':\n                this._addElement(type, node, xpath_info, position, 'group');\n                break;\n            case 'button':\n                this._addButton(event.data);\n                break;\n            case 'notebook':\n                this._addElement(type, node, xpath_info, position, 'notebook');\n                break;\n            case 'page':\n                this._addPage(type, node, xpath_info, position);\n                break;\n            case 'field':\n                var field_description = event.data.field_description;\n                new_attrs = _.pick(new_attrs, ['name', 'widget', 'options', 'display', 'optional']);\n                this._addField(type, field_description, node, xpath_info, position,\n                    new_attrs, event.data);\n                break;\n            case 'chatter':\n                this._addChatter(event.data);\n                break;\n            case 'kanban_cover':\n                this._editKanbanCover(type);\n                break;\n            case 'kanban_dropdown':\n                this._addKanbanDropdown();\n                break;\n            case 'kanban_priority':\n                this._addKanbanPriority(event.data);\n                break;\n            case 'kanban_image':\n                this._addKanbanImage(event.data);\n                break;\n            case 'remove':\n                this._removeElement(type, node, xpath_info);\n                break;\n            case 'view_attribute':\n                this._editViewAttributes(type, new_attrs);\n                break;\n            case 'edit_attributes':\n                this._editElementAttributes(type, node, xpath_info,\n                    new_attrs);\n                break;\n            case 'filter':\n                new_attrs = _.pick(new_attrs, ['name', 'string', 'domain', 'context', 'create_group', 'date']);\n                this._addFilter(type, node, xpath_info, position, new_attrs);\n                break;\n            case 'separator':\n                this._addSeparator(type, node, xpath_info, position);\n                break;\n            case 'restore':\n                this._restoreDefaultView(this.view_id);\n                break;\n            case 'map_popup':\n                this._changeMapPopupFields(type, event.data.field_ids);\n                break;\n            case 'pivot_popup':\n                this._changePivotMeasuresFields(type, event.data.field_ids);\n                break;\n            case 'graph_pivot_groupbys_fields':\n                this._changeGraphPivotGroupbysFields(type, event.data);\n                break;\n            case 'avatar_image':\n                this._addAvatarImage(event.data);\n                break;\n            case 'enable_approval':\n                this._addApproval(event.data);\n                break;\n        }\n    },\n});\n\nfunction findParent(arch, node, expr_attrs) {\n    var parent = arch;\n    var result;\n    var xpathInfo = findParentsPositions(arch, node);\n    _.each(parent.children, function (child) {\n        var deepEqual = true;\n        // If there is not the expr_attr, we can't compare the nodes with it\n        // so we compute the child xpath_info and compare it to the node\n        // we are looking in the arch.\n        if (_.isEmpty(_.pick(child.attrs, expr_attrs[child.tag]))) {\n            var childXpathInfo = findParentsPositions(arch, child);\n            _.each(xpathInfo, function (node, index) {\n                if (index >= childXpathInfo.length) {\n                    deepEqual = false;\n                } else if (!_.isEqual(xpathInfo[index], childXpathInfo[index])) {\n                    deepEqual = false;\n                }\n            });\n        }\n        if (deepEqual && child.attrs && child.attrs.name === node.attrs.name) {\n            result = parent;\n        } else {\n            var res = findParent(child, node, expr_attrs);\n            if (res) {\n                result = res;\n            }\n        }\n    });\n    return result;\n}\n\nfunction findParentsPositions(arch, node) {\n    return _findParentsPositions(arch, node, [], 1);\n}\n\nfunction _findParentsPositions(parent, node, positions, indice) {\n    var result;\n    positions.push({\n        'tag': parent.tag,\n        'indice': indice,\n    });\n    if (parent === node) {\n        return positions;\n    } else {\n        var current_indices = {};\n        _.each(parent.children, function (child) {\n            // Save indice of each sibling node\n            current_indices[child.tag] = current_indices[child.tag] ? current_indices[child.tag] + 1 : 1;\n            var res = _findParentsPositions(child, node, positions, current_indices[child.tag]);\n            if (res) {\n                result = res;\n            } else {\n                positions.pop();\n            }\n        });\n    }\n    return result;\n}\n\nreturn ViewEditorManager;\n\n});\n", "odoo.define('web_studio.ViewEditorSidebar', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar DomainSelectorDialog = require(\"web.DomainSelectorDialog\");\nvar Domain = require(\"web.Domain\");\nvar field_registry = require('web.field_registry');\nvar fieldRegistryOwl = require('web.field_registry_owl');\nvar pyUtils = require('web.py_utils');\nvar relational_fields = require('web.relational_fields');\nvar session = require(\"web.session\");\nvar StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\nvar utils = require('web.utils');\nvar view_components = require('web_studio.view_components');\nvar Widget = require('web.Widget');\n\nvar form_component_widget_registry = view_components.registry;\nvar _lt = core._lt;\nvar _t = core._t;\nvar Many2ManyTags = relational_fields.FieldMany2ManyTags;\nconst Many2One = relational_fields.FieldMany2One;\n\n\n/**\n * This object is used to define all the options editable through the Studio\n * sidebar, by field widget.\n *\n * An object value must be an array of Object (one object by option).\n * An option object must have as attributes a `name`, a `string` and a `type`\n * (currently among `boolean` and `selection`):\n *\n * * `selection` option must have an attribute `selection` (array of tuple).\n * * `boolean` option can have an attribute `leaveEmpty` (`checked` or\n *     `unchecked`).\n *\n * @type {Object}\n */\nvar OPTIONS_BY_WIDGET = {\n    image: [\n        {name: 'size', type: 'selection', string: _lt(\"Size\"), selection: [\n            [[0, 90], _lt(\"Small\")], [[0, 180], _lt(\"Medium\")], [[0, 270], _lt(\"Large\")],\n        ]},\n    ],\n    many2one: [\n        {name: 'no_create', type: 'boolean', string: _lt(\"Disable creation\"), leaveEmpty: 'unchecked'},\n        {name: 'no_open', type: 'boolean', string: _lt(\"Disable opening\"), leaveEmpty: 'unchecked'},\n    ],\n    many2many_tags: [\n        { name: 'no_create', type: 'boolean', string: _lt(\"Disable creation\"), leaveEmpty: 'unchecked' },\n        {name: 'color_field', type: 'boolean', string: _lt(\"Use colors\"), leaveEmpty: 'unchecked'},\n    ],\n    many2many_tags_avatar: [\n        { name: 'no_create', type: 'boolean', string: _lt(\"Disable creation\"), leaveEmpty: 'unchecked' },\n    ],\n    many2many_avatar_user: [\n        { name: 'no_create', type: 'boolean', string: _lt(\"Disable creation\"), leaveEmpty: 'unchecked' },\n    ],\n    many2many_avatar_employee: [\n        { name: 'no_create', type: 'boolean', string: _lt(\"Disable creation\"), leaveEmpty: 'unchecked' },\n    ],\n    radio: [\n        {name: 'horizontal', type: 'boolean', string: _lt(\"Display horizontally\")},\n    ],\n    signature: [\n        {name: 'full_name', type: 'selection', string: _lt('Auto-complete with'), selection: [[]]},\n        // 'selection' will be computed later on for the attribute to be dynamic (based on model fields)\n    ],\n    daterange: [\n        {name: 'related_start_date', type: 'selection', string: _lt(\"Related Start Date\"), selection: [[]]},\n        {name: 'related_end_date', type: 'selection', string: _lt(\"Related End Date\"), selection: [[]]},\n    ],\n    phone: [\n        {name: 'enable_sms', type: 'boolean', string: _lt(\"Enable SMS\")},\n    ],\n};\n\nconst UNSUPPORTED_WIDGETS_BY_VIEW = {\n    list: ['many2many_checkboxes'],\n};\n\nreturn Widget.extend(StandaloneFieldManagerMixin, {\n    template: 'web_studio.ViewEditorSidebar',\n    events: {\n        'click .o_web_studio_new:not(.inactive)':            '_onTab',\n        'click .o_web_studio_view':                          '_onTab',\n        'click .o_web_studio_xml_editor':                    '_onXMLEditor',\n        'click .o_display_view .o_web_studio_parameters':    '_onViewParameters',\n        'click .o_display_field .o_web_studio_parameters':   '_onFieldParameters',\n        'click .o_display_view .o_web_studio_defaults':      '_onDefaultValues',\n        'change #show_invisible':                            '_onShowInvisibleToggled',\n        'click .o_web_studio_remove':                        '_onElementRemoved',\n        'click .o_web_studio_restore':                       '_onRestoreDefaultView',\n        'change .o_display_view input':                      '_onViewChanged',\n        'change .o_display_view select':                     '_onViewChanged',\n        'click .o_web_studio_edit_selection_values':         '_onSelectionValues',\n        'change .o_display_field [data-type=\"attributes\"]':  '_onElementChanged',\n        'change .o_display_field [data-type=\"options\"]':     '_onOptionsChanged',\n        'change .o_display_div input[name=\"set_cover\"]':     '_onSetCover',\n        'change .o_display_field input[data-type=\"field_name\"]': '_onFieldNameChanged',\n        'focus .o_display_field input[data-type=\"attributes\"][name=\"domain\"]': '_onDomainEditor',\n        'change .o_display_field [data-type=\"default_value\"]': '_onDefaultValueChanged',\n        'change .o_display_page input':                      '_onElementChanged',\n        'change .o_display_label input':                     '_onElementChanged',\n        'change .o_display_group input':                     '_onElementChanged',\n        'change .o_display_button input':                    '_onElementChanged',\n        'change .o_display_button select':                   '_onElementChanged',\n        'click .o_web_studio_sidebar_approval .o_approval_archive':  '_onApprovalArchive',\n        'change .o_web_studio_sidebar_approval':                     '_onApprovalChange',\n        'click .o_web_studio_sidebar_approval .o_approval_domain':   '_onApprovalDomain',\n        'click .o_web_studio_sidebar_approval .o_approval_new':      '_onApprovalNewRule',\n        'click .o_display_button .o_img_upload':             '_onUploadRainbowImage',\n        'click .o_display_button .o_img_reset':              '_onRainbowImageReset',\n        'change .o_display_filter input':                    '_onElementChanged',\n        'change .o_display_chatter input[data-type=\"email_alias\"]': '_onEmailAliasChanged',\n        'click .o_web_studio_attrs':                         '_onDomainAttrs',\n        'focus .o_display_filter input#domain':              '_onDomainEditor',\n        'keyup .o_web_studio_sidebar_search_input':          '_onSearchInputChange',\n        'click .o_web_studio_existing_fields_header':        '_onClickExistingFieldHeader',\n    },\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {Object} params.state\n     * @param {Object} params.view_type\n     * @param {Object} params.model_name\n     * @param {Object} params.fields\n     * @param {Object} params.fields_in_view\n     * @param {Object} params.fields_not_in_view\n     * @param {boolean} params.isEditingX2m\n     * @param {Array} params.renamingAllowedFields\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n        StandaloneFieldManagerMixin.init.call(this);\n        var self = this;\n        this.accepted_file_extensions = 'image/*';\n        this.debug = config.isDebug();\n\n        this.view_type = params.view_type;\n        this.model_name = params.model_name;\n        this.isEditingX2m = params.isEditingX2m;\n        this.editorData = params.editorData;\n        this.renamingAllowedFields = params.renamingAllowedFields;\n\n        this.fields = params.fields;\n        this.fieldsInfo = params.fieldsInfo;\n        if (params.defaultOrder) {\n            if (params.defaultOrder.includes(',')) {\n                params.defaultOrder = params.defaultOrder.split(',')[0];\n            }\n            this.defaultOrder = params.defaultOrder.split(' ');\n        }\n        this.orderered_fields = _.sortBy(this.fields, function (field) {\n            return field.string.toLowerCase();\n        });\n        this.fields_in_view = params.fields_in_view;\n        this.fields_not_in_view = params.fields_not_in_view;\n\n        this.GROUPABLE_TYPES = ['many2one', 'char', 'boolean', 'selection', 'date', 'datetime'];\n        // FIXME: At the moment, it's not possible to set default value for these types\n        this.NON_DEFAULT_TYPES = ['many2one', 'many2many', 'one2many', 'binary'];\n        this.MODIFIERS_IN_NODE_AND_ATTRS = ['readonly', 'invisible', 'required'];\n\n        this.state = params.state || {};\n        this.previousState = params.previousState || {};\n\n        this._searchValue = '';\n        this._isSearchValueActive = false;\n        if (['kanban', 'search'].includes(this.view_type)) {\n            this._isExistingFieldFolded = false;\n        } else if ('_isExistingFieldFolded' in this.previousState) {\n            this._isExistingFieldFolded = this.previousState._isExistingFieldFolded;\n        } else {\n            this._isExistingFieldFolded = true;\n        }\n\n        const Widget = this.state.attrs.Widget;\n        this.widgetKey = this._getWidgetKey(Widget);\n\n        const allowedModifiersNode = ['group', 'page', 'field', 'filter'];\n        if (this.state.node && allowedModifiersNode.includes(this.state.node.tag)) {\n            this.state.modifiers = this.state.attrs.modifiers || {};\n        }\n\n        if (this.state.node && (this.state.node.tag === 'field' || this.state.node.tag === 'filter')) {\n            // deep copy of field because the object is modified\n            // in this widget and this shouldn't impact it\n            var field = jQuery.extend(true, {}, this.fields[this.state.attrs.name]);\n            var unsupportedWidgets = UNSUPPORTED_WIDGETS_BY_VIEW[this.view_type] || [];\n\n            // fieldRegistryMap contains all widgets and components but we want to filter\n            // these widgets based on field types (and description for non debug mode)\n            const fieldRegistryMap = Object.assign({}, field_registry.map, fieldRegistryOwl.map);\n            field.field_widgets = _.chain(fieldRegistryMap)\n                .pairs()\n                .filter(function (arr) {\n                    const supportedFieldTypes = utils.isComponent(arr[1]) ?\n                        arr[1].supportedFieldTypes :\n                        arr[1].prototype.supportedFieldTypes;\n                    const description = self.getFieldInfo(arr[1], 'description');\n                    const isWidgetKeyDescription = arr[0] === self.widgetKey && !description;\n                    var isSupported = _.contains(supportedFieldTypes, field.type)\n                        && arr[0].indexOf('.') < 0 && unsupportedWidgets.indexOf(arr[0]) < 0;\n                    return config.isDebug() ? isSupported : isSupported && description || isWidgetKeyDescription;\n                })\n                .sortBy(function (arr) {\n                    const description = self.getFieldInfo(arr[1], 'description');\n                    return description || arr[0];\n                })\n                .value();\n\n            this.state.field = field;\n\n            // only for list & tree view\n            this._computeFieldAttrs();\n\n            // Get dynamic selection for 'full_name' node option of signature widget\n            if (this.widgetKey === 'signature') {\n                var selection = [[]]; // By default, selection should be empty\n                var signFields = _.chain(_.sortBy(_.values(this.fields_in_view), 'string'))\n                    .filter(function (field) {\n                        return _.contains(['char', 'many2one'], field.type);\n                    })\n                    .map(function (val, key) {\n                        return [val.name, config.isDebug() ? _.str.sprintf('%s (%s)', val.string, val.name) : val.string];\n                    })\n                    .value();\n                _.findWhere(OPTIONS_BY_WIDGET[this.widgetKey], {name: 'full_name'}).selection = selection.concat(signFields);\n            }\n            // Get dynamic selection for 'related_start_date' and 'related_end_date' node option of daterange widget\n            if (this.widgetKey === 'daterange') {\n                var selection = [[]];\n                var dateFields = _.chain(_.sortBy(_.values(this.fields_in_view), 'string'))\n                    .filter(function (field) {\n                        return _.contains([self.state.field.type], field.type);\n                    })\n                    .map(function (val, key) {\n                        return [val.name, config.isDebug() ? _.str.sprintf('%s (%s)', val.string, val.name) : val.string];\n                    })\n                    .value();\n                selection = selection.concat(dateFields);\n                _.each(OPTIONS_BY_WIDGET[this.widgetKey], function (option) {\n                    if (_.contains(['related_start_date', 'related_end_date'], option.name)) {\n                        option.selection = selection;\n                    }\n                });\n            }\n            this.OPTIONS_BY_WIDGET = OPTIONS_BY_WIDGET;\n\n            this.has_placeholder = Widget && Widget.prototype.has_placeholder || false;\n\n            // aggregate makes no sense with some widgets\n            this.hasAggregate = _.contains(['integer', 'float', 'monetary'], field.type) &&\n                !_.contains(['progressbar', 'handle'], this.state.attrs.widget);\n\n            if (this.view_type === 'kanban') {\n                this.showDisplay = this.state.$node && !this.state.$node\n                    .parentsUntil('.o_kanban_record')\n                    .filter(function () {\n                        // if any parent is display flex, display options (float\n                        // right, etc.) won't work\n                        return $(this).css('display') === 'flex';\n                    }).length;\n            }\n        }\n        // Upload image related stuff\n        if (this.state.node && this.state.node.tag === 'button') {\n            const isStatBtn = this.state.node.attrs.class === 'oe_stat_button';\n            const isMethodBtn = this.state.node.attrs.type == 'object';\n            this.showRainbowMan = !isStatBtn && isMethodBtn\n            if (this.showRainbowMan) {\n                this.state.node.widget = \"image\";\n                this.user_id = session.uid;\n                this.fileupload_id = _.uniqueId('o_fileupload');\n                $(window).on(this.fileupload_id, this._onUploadRainbowImageDone.bind(this));\n            }\n        }\n        if (this.state.mode === 'view' && this.view_type === 'gantt') {\n            // precision attribute in gantt is complicated to write so we split it\n            // {'day': 'hour:half', 'week': 'day:half', 'month': 'day', 'year': 'month:quarter'}\n            this.state.attrs.ganttPrecision = this.state.attrs.precision ? pyUtils.py_eval(this.state.attrs.precision) : {};\n\n        }\n        if (this.state.mode === 'view' && this.view_type === 'pivot') {\n            this.state.attrs.colGroupBys = params.colGroupBys;\n            this.state.attrs.rowGroupBys = params.rowGroupBys;\n            this.measures = params.measures;\n        }\n        if (this.state.mode === 'view' && this.view_type === 'graph') {\n            this.state.attrs.groupBys = params.groupBys;\n            this.state.attrs.measure = params.measure;\n        }\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        return this._super.apply(this, arguments).then(this._render.bind(this));\n    },\n    /**\n     * Called each time the view editor sidebar is attached into the DOM.\n    */\n    on_attach_callback: function () {\n        // focus only works on the elements attached on DOM, so we focus\n        // and select the label once the sidebar is attached to DOM\n        if (this.state.mode === 'properties') {\n            this.$('input[name=string]').focus().select();\n        }\n    },\n    /**\n     * @override\n     */\n    destroy: function () {\n        $(window).off(this.fileupload_id);\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    getLocalState: function () {\n        return { _isExistingFieldFolded: this._isExistingFieldFolded };\n    },\n    /**\n     * Transform an array domain into its string representation.\n     *\n     * @param {Array} domain\n     * @returns {String}\n     */\n    domainToStr: function (domain) {\n        return Domain.prototype.arrayToString(domain);\n    },\n    /**\n     * Returns class property's value.\n     *\n     * @param {any} fieldType\n     * @param {string} propName\n     */\n    getFieldInfo(fieldType, propName) {\n        return utils.isComponent(fieldType) ?\n            (fieldType.hasOwnProperty(propName) && fieldType[propName]) :\n            (fieldType.prototype.hasOwnProperty(propName) && fieldType.prototype[propName]);\n    },\n    /**\n     * @param {string} fieldName\n     * @returns {boolean} if the field can be renamed\n     */\n    isRenamingAllowed: function (fieldName) {\n        return _.contains(this.renamingAllowedFields, fieldName);\n    },\n    /**\n     * @param {String} value\n     * @returns {Boolean}\n     */\n    isTrue: function (value) {\n        return value !== 'false' && value !== 'False';\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called by _onFieldChanged when the field changed is the M2O of an approval\n     * rule for its res.groups field. Update the according rule server-side.\n     * @private\n     */\n    _changeApprovalGroup: function (approvalField) {\n        const record = this.model.get(this.approvalHandle);\n        const groupId = record.data[approvalField].res_id;\n        const ruleId = parseInt(/rule_group_(\\d+)/.exec(approvalField)[1]);\n        this.trigger_up('approval_group_change', {\n            ruleId,\n            groupId,\n        });\n    },\n    /**\n     * @private\n     */\n    _changeFieldGroup: function () {\n        var record = this.model.get(this.groupsHandle);\n        var new_attrs = {};\n        new_attrs.groups = record.data.groups.res_ids;\n        this.trigger_up('view_change', {\n            type: 'attributes',\n            structure: 'edit_attributes',\n            node: this.state.node,\n            new_attrs: new_attrs,\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     * @param {Object} oldMapPopupField\n     */\n    _changeMapPopupFields: function (ev, oldMapPopupField) {\n        const options = {structure: 'map_popup'};\n        if (ev.data.changes.map_popup.operation === 'ADD_M2M') {\n            const ids = ev.data.changes.map_popup.ids;\n            options.type = 'add';\n            options.field_ids = Array.isArray(ids) ? ids.map(i => i.id) : [ids.id];\n        } else {\n            options.type = 'remove';\n            options.field_ids = [oldMapPopupField.data.find(i => i.id === ev.data.changes.map_popup.ids[0]).res_id];\n        }\n        this.trigger_up('view_change', options);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     * @param {Object} oldPivotMeasuresField\n     */\n    _changePivotMeasuresFields(ev, oldPivotMeasuresField) {\n        const options = {structure: 'pivot_popup'};\n        if (ev.data.changes.pivot_popup.operation === 'ADD_M2M') {\n            const ids = ev.data.changes.pivot_popup.ids;\n            options.type = 'add';\n            options.field_ids = Array.isArray(ids) ? ids.map(i => i.id) : [ids.id];\n        } else {\n            options.type = 'remove';\n            options.field_ids = [oldPivotMeasuresField.data.find(i => i.id === ev.data.changes.pivot_popup.ids[0]).res_id];\n        }\n        this.trigger_up('view_change', options);\n    },\n    /**\n     * @private\n     */\n    _computeFieldAttrs: function () {\n        /* Compute field attributes.\n         * These attributes are either taken from modifiers or attrs\n         * so attrs store their combinaison.\n         */\n        this.state.attrs.invisible = this.state.modifiers.invisible || this.state.modifiers.column_invisible;\n        this.state.attrs.readonly = this.state.modifiers.readonly;\n        this.state.attrs.string = this.state.attrs.string || this.state.field.string;\n        this.state.attrs.help = this.state.attrs.help || this.state.field.help;\n        this.state.attrs.placeholder = this.state.attrs.placeholder || this.state.field.placeholder;\n        this.state.attrs.required = this.state.field.required || this.state.modifiers.required;\n        this.state.attrs.domain = this.state.attrs.domain || this.state.field.domain;\n        this.state.attrs.context = this.state.attrs.context || this.state.field.context;\n        this.state.attrs.related = this.state.field.related ? this.state.field.related : false;\n    },\n    /**\n     * @private\n     * @param {Object} modifiers\n     * @returns {Object}\n     */\n    _getNewAttrsFromModifiers: function (modifiers) {\n        var self = this;\n        var newAttributes = {};\n        var attrs = [];\n        var originNodeAttr = this.state.modifiers;\n        var originSubAttrs =  pyUtils.py_eval(this.state.attrs.attrs || '{}', this.editorData);\n        _.each(modifiers, function (value, key) {\n                var keyInNodeAndAttrs = _.contains(self.MODIFIERS_IN_NODE_AND_ATTRS, key);\n                var keyFromView = key in originSubAttrs;\n                var trueValue = value === true || _.isEqual(value, []);\n                var isOriginNodeAttr = key in originNodeAttr;\n\n                if (keyInNodeAndAttrs && !isOriginNodeAttr && trueValue) { // modifier always applied, use modifier attribute\n                    newAttributes[key] = \"1\";\n                } else if (keyFromView || !trueValue) { // modifier not applied or under certain condition, remove modifier attribute and use attrs if any\n                    newAttributes[key] = \"\";\n                    if (value !== false) {\n                        attrs.push(_.str.sprintf(\"\\\"%s\\\": %s\", key, Domain.prototype.arrayToString(value)));\n                    }\n                }\n        });\n        newAttributes.attrs = _.str.sprintf(\"{%s}\", attrs.join(\", \"));\n        return newAttributes;\n    },\n    /**\n     * @private\n     * @param {Class} Widget\n     * @returns {string} the field key\n     */\n    _getWidgetKey: function (Widget) {\n        var widgetKey = this.state.attrs.widget;\n        if (!widgetKey) {\n            const fieldRegistryMap = Object.assign({}, field_registry.map, fieldRegistryOwl.map);\n            _.each(fieldRegistryMap, function (val, key) {\n                if (val === Widget) {\n                    widgetKey = key;\n                }\n            });\n            // widget key can be prefixed by a view type (like form.many2many_tags)\n            if (_.str.include(widgetKey, '.')) {\n                widgetKey = widgetKey.split('.')[1];\n            }\n        }\n        return widgetKey;\n    },\n    /**\n     * Render additional sections according to the sidebar mode\n     * i.e. the new & existing field if 'new', etc.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _render: function () {\n        this.defs = [];\n        if (this.state.mode === 'new') {\n            if (!this._isSearchValueActive) {\n                if (_.contains(['form', 'search'], this.view_type)) {\n                    this._renderComponentsSection();\n                }\n                if (_.contains(['list', 'form'], this.view_type)) {\n                    this._renderNewFieldsSection();\n                }\n            }\n            this._renderExistingFieldsSection();\n            return Promise.all(this.defs).then(() => {\n                delete(this.defs);\n                this.$('.o_web_studio_component').on(\"drag\", _.throttle((event, ui) => {\n                    this.trigger_up('drag_component', {position: {pageX: event.pageX, pageY: event.pageY}, $helper: ui.helper});\n                }, 200));\n            });\n        } else if (this.state.mode === 'properties') {\n            if (this.$('.o_groups').length) {\n                this.defs.push(this._renderWidgetsM2MGroups());\n            }\n            if (this.el.querySelectorAll('.o_studio_sidebar_approval_rule').length) {\n                this.defs.push(this._renderWidgetsApprovalRules());\n            }\n            return Promise.all(this.defs).then(() => delete(this.defs));\n        }\n        if (this.view_type === 'map' && this.$('.o_map_popup_fields').length) {\n            delete(this.defs);\n            return this._renderWidgetsMapPopupFields();\n        }\n        if (this.view_type === 'pivot' && this.$('.o_pivot_measures_fields').length) {\n            delete(this.defs);\n            return this._renderWidgetsPivotMeasuresFields();\n        }\n    },\n    /**\n     * @private\n     */\n    _renderComponentsSection: function () {\n        const widgetClasses = form_component_widget_registry.get(this.view_type + '_components');\n        const formWidgets = widgetClasses.map(FormComponent => new FormComponent(this));\n        const $sectionTitle = $('<h3>', {\n            html: _t('Components'),\n        });\n        const $section = this._renderSection(formWidgets);\n        $section.addClass('o_web_studio_new_components');\n        const $sidebarContent = this.$('.o_web_studio_sidebar_content');\n        $sidebarContent.append($sectionTitle, $section);\n    },\n    /**\n     * @private\n     */\n    _renderExistingFieldsSection: function () {\n        const $existingFields = this.$('.o_web_studio_existing_fields');\n        if ($existingFields.length) {\n            $existingFields.remove();  // clean up before re-rendering\n        }\n\n        let formWidgets;\n        const formComponent = form_component_widget_registry.get('existing_field');\n        if (this.view_type === 'search') {\n            formWidgets = Object.values(this.fields).map(field =>\n                new formComponent(this, field.name, field.string, field.type, field.store));\n        } else {\n            const fields = _.sortBy(this.fields_not_in_view, function (field) {\n                return field.string.toLowerCase();\n            });\n            const attrs = {};\n            if (this.view_type === 'list') {\n                attrs.optional = 'show';\n            }\n            formWidgets = fields.map(field => {\n                return new formComponent(this, field.name, field.string, field.type, field.store, Object.assign({}, attrs));\n            });\n        }\n\n        if (this._searchValue) {\n            formWidgets = formWidgets.filter(result => {\n                const searchValue = this._searchValue.toLowerCase();\n                if (this.debug) {\n                    return result.label.toLowerCase().includes(searchValue) ||\n                        result.description.toLowerCase().includes(searchValue);\n                }\n                return result.label.toLowerCase().includes(searchValue);\n            });\n        }\n\n        const $sidebarContent = this.$('.o_web_studio_sidebar_content');\n        const $existingFieldsSection = $('<div/>', {class: `o_web_studio_existing_fields_section`});\n        const $section = this._renderSection(formWidgets);\n        $section.addClass('o_web_studio_existing_fields');\n        if ($existingFields.length) {\n            this.$('.o_web_studio_existing_fields_section').append($section);\n        } else {\n            const $sectionTitle = $('<h3>', {\n                text: _t('Existing Fields'),\n                class: 'o_web_studio_existing_fields_header',\n            }).append($('<i/>', {class: `o_web_studio_existing_fields_icon fa fa-caret-right ml-2`}));\n            const $sectionSubtitle = $('<h6>', {\n                class: 'small text-white',\n                text: _t('The following fields are currently not in the view.'),\n            });\n            const $sectionSearchDiv = core.qweb.render('web_studio.ExistingFieldsInputSearch');\n            $existingFieldsSection.append($sectionSubtitle, $sectionSearchDiv, $section);\n            $sidebarContent.append($sectionTitle, $existingFieldsSection);\n        }\n\n        this._updateExistingFieldSection();\n    },\n    /**\n     * @private\n     */\n    _renderNewFieldsSection: function () {\n        const widgetClasses = form_component_widget_registry.get('new_field');\n        const attrs = {};\n        if (this.view_type === 'list') {\n            attrs.optional = 'show';\n        }\n        const formWidgets = widgetClasses.map(FormComponent => {\n            return new FormComponent(this, Object.assign({}, attrs));\n        });\n        const $sectionTitle = $('<h3>', {\n            html: _t('New Fields'),\n        });\n        const $section = this._renderSection(formWidgets);\n        $section.addClass('o_web_studio_new_fields');\n\n        const $sidebarContent = this.$('.o_web_studio_sidebar_content');\n        $sidebarContent.append($sectionTitle, $section);\n    },\n    /**\n     * @private\n     * @param {Object} form_widgets\n     * @returns {JQuery}\n     */\n    _renderSection: function (form_widgets) {\n        var self = this;\n        var $components_container = $('<div>').addClass('o_web_studio_field_type_container');\n        form_widgets.forEach(function (form_component) {\n            self.defs.push(form_component.appendTo($components_container));\n        });\n        return $components_container;\n    },\n    /**\n     * Render and attach group widget for each approval rule.\n     * @private\n     * @returns {Promise}\n     */\n    _renderWidgetsApprovalRules: async function () {\n        const groupTargets = this.el.querySelectorAll('.o_approval_group');\n        const fields = [];\n        groupTargets.forEach((node) => {\n            fields.push({\n                name: 'rule_group_' + node.dataset.ruleId,\n                fields: [{\n                    name: 'id',\n                    type: 'integer',\n                }, {\n                    name: 'display_name',\n                    type: 'char',\n                }],\n                relation: 'res.groups',\n                type: 'many2one',\n                value: parseInt(node.dataset.groupId),\n            })\n        });\n        this.approvalHandle  = await this.model.makeRecord('ir.model.fields', fields);\n        const record = this.model.get(this.approvalHandle);\n        const defs = [];\n        groupTargets.forEach((node, index) => {\n            const options = {\n                idForLabel: 'group',\n                mode: 'edit',\n                noOpen: true,\n            };\n            const fieldName = fields[index].name;\n            const many2one = new Many2One(this, fieldName, record, options);\n            this._registerWidget(this.approvalHandle, 'group', many2one);\n            defs.push(many2one.prependTo($(node)));\n        });\n        return Promise.all(defs);\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _renderWidgetsM2MGroups: function () {\n        var self = this;\n        var studio_groups = this.state.attrs.studio_groups && JSON.parse(this.state.attrs.studio_groups);\n        return this.model.makeRecord('ir.model.fields', [{\n            name: 'groups',\n            fields: [{\n                name: 'id',\n                type: 'integer',\n            }, {\n                name: 'display_name',\n                type: 'char',\n            }],\n            relation: 'res.groups',\n            type: 'many2many',\n            value: studio_groups,\n        }]).then(function (recordID) {\n            self.groupsHandle = recordID;\n            var record = self.model.get(self.groupsHandle);\n            var options = {\n                idForLabel: 'groups',\n                mode: 'edit',\n                no_quick_create: true,\n            };\n            var many2many = new Many2ManyTags(self, 'groups', record, options);\n            self._registerWidget(self.groupsHandle, 'groups', many2many);\n            return many2many.appendTo(self.$('.o_groups'));\n        });\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _renderWidgetsMapPopupFields: function () {\n        const fieldIDs = JSON.parse(this.state.attrs.studio_map_field_ids || '[]');\n        return this.model.makeRecord('ir.model', [{\n            name: 'map_popup',\n            fields: [{\n                name: 'id',\n                type: 'integer',\n            }, {\n                name: 'display_name',\n                type: 'char',\n            }],\n            domain: [\n                ['model', '=', this.model_name],\n                ['ttype', 'not in', ['many2many', 'one2many', 'binary']]\n            ],\n            relation: 'ir.model.fields',\n            type: 'many2many',\n            value: fieldIDs,\n        }], {\n            map_popup: {\n                can_create: false\n            },\n        }).then(recordID => {\n            this.mapPopupFieldHandle = recordID;\n            const record = this.model.get(this.mapPopupFieldHandle);\n            const many2many = new Many2ManyTags(this, 'map_popup', record, {mode: 'edit'});\n            this._registerWidget(this.mapPopupFieldHandle, 'map_popup', many2many);\n            return many2many.appendTo(this.$('.o_map_popup_fields'));\n        });\n    },\n    /**\n     * Applies the correct classNames on the \"Existing Fields\" section according\n     * to the \"_isExistingFieldFolded\" flag.\n     *\n     * @private\n     */\n    _updateExistingFieldSection() {\n        const icon = this.el.querySelector('.o_web_studio_existing_fields_icon');\n        const section = this.el.querySelector('.o_web_studio_existing_fields_section');\n        if (this._isExistingFieldFolded) {\n            icon.classList.replace('fa-caret-down', 'fa-caret-right');\n            section.classList.add('d-none');\n        } else {\n            icon.classList.replace('fa-caret-right', 'fa-caret-down');\n            section.classList.remove('d-none');\n        }\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _renderWidgetsPivotMeasuresFields() {\n        const measuresKeys = Object.keys(this.measures);\n        const fieldIDs = JSON.parse(this.state.attrs.studio_pivot_measure_field_ids || '[]');\n        return this.model.makeRecord('ir.model', [{\n            name: 'pivot_popup',\n            fields: [{\n                name: 'id',\n                type: 'integer',\n            }, {\n                name: 'display_name',\n                type: 'char',\n            }],\n            domain: [\n                ['model', '=', this.model_name],\n                ['name', 'in', Object.keys(this.measures)]\n            ],\n            relation: 'ir.model.fields',\n            type: 'many2many',\n            value: fieldIDs,\n        }], {\n            pivot_popup: {\n                can_create: false\n            },\n        }).then(recordID => {\n            this.pivotPopupFieldHandle = recordID;\n            const record = this.model.get(this.pivotPopupFieldHandle);\n            const many2many = new Many2ManyTags(this, 'pivot_popup', record, { mode: 'edit' });\n            this._registerWidget(this.pivotPopupFieldHandle, 'pivot_popup', many2many);\n            return many2many.appendTo(this.$('.o_pivot_measures_fields'));\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Handle a click on 'remove rule' for approvals; dispatch to view editor\n     * manager.\n     * @private\n     * @param {DOMEvent} ev\n     */\n    _onApprovalArchive: function (ev) {\n        const ruleId = parseInt(ev.currentTarget.dataset.ruleId);\n        this.trigger_up('approval_archive', {\n            ruleId,\n        });\n    },\n    /**\n     * Handle a click on 'add approval rule'; dispatch to view editor\n     * manager.\n     * @private\n     * @param {DOMEvent} ev\n     */\n    _onApprovalNewRule: function (ev) {\n        const model = this.model_name;\n        const isMethod = this.state.node.attrs.type === 'object';\n        const method = isMethod?this.state.node.attrs.name:false\n        const action = isMethod?false:this.state.node.attrs.name;\n        this.trigger_up('approval_new_rule', {\n            model,\n            method,\n            action,\n        });\n    },\n    /**\n     * Handler for the 'set condition' button of approval rules; instanciate\n     * a domain selector dialog that will dispatch an event to the view editor\n     * manager upon submission.\n     * @private\n     * @param {DOMEvent} ev\n     */\n    _onApprovalDomain: function(ev) {\n        const ruleId = parseInt(ev.currentTarget.dataset.ruleId);\n        const rule = this.state.approvalData.rules.find(r => r.id === ruleId);\n        const dialog = new DomainSelectorDialog(this, this.model_name, rule.domain||[], {\n            title: _t('Condition'),\n            readonly: false,\n            fields: this.fields,\n            size: 'medium',\n            operators: [\"=\", \"!=\", \"<\", \">\", \"<=\", \">=\", \"in\", \"not in\", \"set\", \"not set\"],\n            followRelations: true,\n            debugMode: config.isDebug(),\n            $content: $('<div>').append('<p>', {text: _t('The approval rule is only applied to records matching the following condition:')}),\n        }).open();\n        dialog.on(\"domain_selected\", this, function (e) {\n            this.trigger_up('approval_condition', {\n                ruleId: ruleId,\n                domain: e.data.domain,\n            });\n        });\n    },\n    /**\n     * Generic handlers for other operations on approvals; dispatch the correct event\n     * to the view editor manager.\n     * @private\n     * @param {DOMEvent} ev\n     */\n    _onApprovalChange: function(ev) {\n        let type, payload;\n        // input name for approval rules are formatted as `input`_`rule_id`\n        const inputName = ev.target.name;\n        const parsedInput = /([a-zA-Z_]*)_(\\d+)/.exec(inputName);\n        let input, ruleId;\n        if (parsedInput) {\n            input = parsedInput[1];\n            ruleId = parseInt(parsedInput[2]);\n        } else {\n            input = inputName;\n        }\n        switch (input) {\n            case 'studio_approval':\n                // special case: this is the one that actually edits the view\n                return this.trigger_up('view_change', {\n                    structure: 'enable_approval',\n                    node: this.state.node,\n                    enable: ev.target.checked,\n                });\n            case 'approval_message':\n                type = 'operation_approval_message';\n                payload = ev.target.value;\n                break;\n            case 'exclusive_user':\n                type = 'operation_different_users';\n                payload = ev.target.checked;\n                break;\n            default:\n                console.debug('unsupported operation for approval modification', ev.target.name);\n                return false;\n        }\n        this.trigger_up('approval_change', {\n            type: type,\n            payload: payload,\n            ruleId: parseInt(ruleId),\n            node: this.state.node,\n        });\n    },\n    /**\n     * @private\n     */\n    _onDefaultValues: function () {\n        this.trigger_up('open_defaults');\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onDefaultValueChanged: function (ev) {\n        var self = this;\n        var $input = $(ev.currentTarget);\n        var value = $input.val();\n        if (value !== this.state.default_value) {\n            this.trigger_up('default_value_change', {\n                field_name: this.state.attrs.name,\n                value: value,\n                on_fail: function () {\n                    $input.val(self.default_value);\n                }\n            });\n        }\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onDomainAttrs: function (ev) {\n        ev.preventDefault();\n        var modifier = ev.currentTarget.dataset.type;\n\n        // Add id to the list of usable fields\n        var fields = this.fields_in_view;\n        if (!fields.id) {\n            fields = _.extend({\n                id: {\n                    searchable: true,\n                    string: \"ID\",\n                    type: \"integer\",\n                },\n            }, fields);\n        }\n\n        var dialog = new DomainSelectorDialog(this, this.model_name, _.isArray(this.state.modifiers[modifier]) ? this.state.modifiers[modifier] : [], {\n            readonly: false,\n            fields: fields,\n            size: 'medium',\n            operators: [\"=\", \"!=\", \"<\", \">\", \"<=\", \">=\", \"in\", \"not in\", \"set\", \"not set\"],\n            followRelations: false,\n            debugMode: config.isDebug(),\n            $content: $(_.str.sprintf(\n                _t(\"<div><p>The <strong>%s</strong> property is only applied to records matching this filter.</p></div>\"),\n                modifier\n            )),\n        }).open();\n        dialog.on(\"domain_selected\", this, function (e) {\n            var newModifiers = _.extend({}, this.state.modifiers);\n            newModifiers[modifier] = e.data.domain;\n            var new_attrs = this._getNewAttrsFromModifiers(newModifiers);\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'edit_attributes',\n                node: this.state.node,\n                new_attrs: new_attrs,\n            });\n        });\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onDomainEditor: function (ev) {\n        ev.preventDefault();\n        var $input = $(ev.currentTarget);\n\n        // If we want to edit a filter domain, we don't have a specific\n        // field to work on but we want a domain on the current model.\n        var model = this.state.node.tag === 'filter' ? this.model_name : this.state.field.relation;\n        var dialog = new DomainSelectorDialog(this, model, $input.val(), {\n            readonly: false,\n            debugMode: config.isDebug(),\n        }).open();\n        dialog.on(\"domain_selected\", this, function (e) {\n            $input.val(Domain.prototype.arrayToString(e.data.domain)).change();\n        });\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onElementChanged: function (ev) {\n        var $input = $(ev.currentTarget);\n        var attribute = $input.attr('name');\n        if (attribute && $input.attr('type') !== 'file') {\n            var new_attrs = {};\n            // rainbow attribute on button needs JSON value, so on change of any rainbow related\n            // attributes, re-form rainbow attribute in required format, excluding falsy/empty\n            // values\n            if (attribute.match('^rainbow')) {\n                if (this.$('input#rainbow').is(':checked')) {\n                    new_attrs.effect = JSON.stringify(_.pick({\n                            message: this.$('input#rainbow_message').val(),\n                            img_url: this.$('input#rainbow_img_url').val(),\n                            fadeout: this.$('select#rainbow_fadeout').val(),\n                        }, _.identity)\n                    );\n                } else {\n                    new_attrs.effect = 'False';\n                }\n            } else if (attribute === 'widget') {\n                // reset widget options\n                var widget = $input.val();\n                new_attrs = {\n                    widget: widget,\n                    options: '',\n                };\n                if (widget === 'image') {\n                    // add small as a default size for image widget\n                    new_attrs.options = JSON.stringify({size: [0, 90]});\n                }\n            } else if ($input.attr('type') === 'checkbox') {\n                if (!_.contains(this.MODIFIERS_IN_NODE_AND_ATTRS, attribute)) {\n                    if ($input.is(':checked')) {\n                        new_attrs[attribute] = $input.data('leave-empty') === 'checked' ? '': 'True';\n                    } else {\n                        new_attrs[attribute] = $input.data('leave-empty') === 'unchecked' ? '': 'False';\n                    }\n                } else {\n                    var newModifiers = _.extend({}, this.state.modifiers);\n                    newModifiers[attribute] = $input.is(':checked');\n                    new_attrs = this._getNewAttrsFromModifiers(newModifiers);\n                    if (attribute === 'readonly' && $input.is(':checked')) {\n                        new_attrs.force_save = 'True';\n                    }\n                }\n            } else if (attribute === 'aggregate') {\n                var aggregate = $input.find('option:selected').attr('name');\n                // only one of them can be set at the same time\n                new_attrs = {\n                    avg: aggregate === 'avg' ? 'Average of ' + this.state.attrs.string : '',\n                    sum: aggregate === 'sum' ? 'Sum of ' +  this.state.attrs.string : '',\n                };\n            } else {\n                new_attrs[attribute] = $input.val();\n            }\n\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'edit_attributes',\n                node: this.state.node,\n                new_attrs: new_attrs,\n            });\n        }\n    },\n    /**\n     * @private\n     */\n    _onElementRemoved: function () {\n        var self = this;\n        var elementName = this.state.node.tag;\n        if (elementName === 'div' && this.state.node.attrs.class === 'oe_chatter') {\n            elementName = 'chatter';\n        }\n        var message = _.str.sprintf(_t('Are you sure you want to remove this %s from the view?'), elementName);\n\n        Dialog.confirm(this, message, {\n            confirm_callback: function () {\n                self.trigger_up('view_change', {\n                    type: 'remove',\n                    structure: 'remove',\n                    node: self.state.node,\n                });\n            }\n        });\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onEmailAliasChanged: function (ev) {\n        var $input = $(ev.currentTarget);\n        var value = $input.val();\n        if (value !== this.state.email_alias) {\n            this.trigger_up('email_alias_change', {\n                value: value,\n            });\n        }\n    },\n    /**\n     * @override\n     * @private\n     */\n    _onFieldChanged: async function (ev) {\n        const approvalChanges = Object.keys(ev.data.changes).filter(f => f.startsWith('rule_group_'));\n        const isApprovalChange = approvalChanges.length;\n        const isMapChange = Object.keys(ev.data.changes).filter(f => f === 'map_popup').length;\n        const isPivotChange = Object.keys(ev.data.changes).filter(f => f === 'pivot_popup').length;\n        const approvalField = isApprovalChange && approvalChanges[0];\n        const oldMapPopupField = this.mapPopupFieldHandle && this.model.get(this.mapPopupFieldHandle).data.map_popup;\n        const oldPivotMeasureField = this.pivotPopupFieldHandle && this.model.get(this.pivotPopupFieldHandle).data.pivot_popup;\n        const result = await StandaloneFieldManagerMixin._onFieldChanged.apply(this, arguments);\n        if (isMapChange) {\n            this._changeMapPopupFields(ev, oldMapPopupField);\n        } else if (isApprovalChange) {\n            this._changeApprovalGroup(approvalField);\n        } else if (isPivotChange) {\n            this._changePivotMeasuresFields(ev, oldPivotMeasureField);\n        } else {\n            this._changeFieldGroup();\n        }\n        return result;\n    },\n    /**\n     * Renames the field after confirmation from user.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onFieldNameChanged: function (ev) {\n        var $input = $(ev.currentTarget);\n        var attribute = $input.attr('name');\n        if (!attribute) {\n            return;\n        }\n        var newName = 'x_studio_' + $input.val().replace(/^_+/,\"\");\n        var message;\n        if (newName.match(/[^a-z0-9_]/g) || newName.length >= 54) {\n            message = _.str.sprintf(_t('The new name can contain only a to z lower letters, numbers and _, with ' +\n                'a maximum of 53 characters.'));\n            Dialog.alert(this, message);\n            return;\n        }\n        if (newName in this.fields) {\n            message = _.str.sprintf(_t('A field with the same name already exists.'));\n            Dialog.alert(this, message);\n            return;\n        }\n        this.trigger_up('field_renamed', {\n            oldName: this.state.node.attrs.name,\n            newName: newName,\n        });\n    },\n    /**\n     * @private\n     */\n    _onFieldParameters: function () {\n        this.trigger_up('open_field_form', {field_name: this.state.attrs.name});\n    },\n    /**\n     * @private\n     * @param {jQueryEvent} ev\n     */\n    _onOptionsChanged: function (ev) {\n        var $input = $(ev.currentTarget);\n\n        // We use the original `options` attribute on the node here and evaluate\n        // it (same processing as in basic_view) ; we cannot directly take the\n        // options dict because it usually has been modified in place in field\n        // widgets (see Many2One @init for example).\n        var nodeOptions = this.state.node.attrs.options;\n        var newOptions = nodeOptions ? pyUtils.py_eval(nodeOptions) : {};\n        var optionName = $input.attr('name');\n\n        var optionValue;\n        if ($input.attr('type') === 'checkbox') {\n            optionValue = $input.is(':checked');\n\n            if ((optionValue && $input.data('leave-empty') !== 'checked') ||\n                (!optionValue && $input.data('leave-empty') !== 'unchecked')) {\n                newOptions[optionName] = optionValue;\n            } else {\n                delete newOptions[optionName];\n            }\n        } else {\n            optionValue = $input.val();\n            try {\n                // the value might have been stringified\n                optionValue = JSON.parse(optionValue);\n            } catch (e) {}\n\n            newOptions[optionName] = optionValue;\n        }\n\n        this.trigger_up('view_change', {\n            type: 'attributes',\n            structure: 'edit_attributes',\n            node: this.state.node,\n            new_attrs: {\n                options: JSON.stringify(newOptions),\n            },\n        });\n    },\n    /**\n     * @private\n     */\n    _onRainbowImageReset: function () {\n        this.$('input#rainbow_img_url').val('');\n        this.$('input#rainbow_img_url').trigger('change');\n    },\n    /**\n     * Called when the search input value is changed -> adapts the fields list\n     *\n     * @private\n     */\n    _onSearchInputChange: function () {\n        this._searchValue = this.$('.o_web_studio_sidebar_search_input').val();\n        this._isSearchValueActive = true;\n        this._render();\n    },\n    /**\n     * fold/unfold the 'existing fields' section.\n     *\n     * @private\n     */\n    _onClickExistingFieldHeader: function () {\n        this._isExistingFieldFolded = !this._isExistingFieldFolded;\n        this._updateExistingFieldSection();\n    },\n    /**\n     * @private\n     */\n    _onRestoreDefaultView: function () {\n        var self = this;\n        var message = _t('Are you sure you want to restore the default view?\\r\\nAll customization done with Studio on this view will be lost.');\n\n        Dialog.confirm(this, message, {\n            confirm_callback: function () {\n                self.trigger_up('view_change', {\n                    structure: 'restore',\n                });\n            },\n            dialogClass: 'o_web_studio_preserve_space'\n        });\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onSelectionValues: function (ev) {\n        ev.preventDefault();\n        this.trigger_up('field_edition', {\n            node: this.state.node,\n        });\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onSetCover: function (ev) {\n        var $input = $(ev.currentTarget);\n        this.trigger_up('view_change', {\n            node: this.state.node,\n            structure: 'kanban_cover',\n            type: $input.is(':checked') ? 'kanban_set_cover' : 'remove',\n        });\n        // If user closes the field selector pop up, check-box should remain unchecked.\n        // Updated sidebar property will set this box to checked if the cover image\n        // is enabled successfully.\n        $input.prop(\"checked\", false);\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onShowInvisibleToggled: function (ev) {\n        this.state.show_invisible = !!$(ev.currentTarget).is(\":checked\");\n        this.trigger_up('toggle_form_invisible', {show_invisible : this.state.show_invisible});\n    },\n    /**\n     * @private\n     */\n    _onTab: function (ev) {\n        var mode = $(ev.currentTarget).attr('name');\n        this.trigger_up('sidebar_tab_changed', {\n            mode: mode,\n        });\n    },\n    /**\n     * @private\n     */\n    _onUploadRainbowImage: function () {\n        var self = this;\n        this.$('input.o_input_file').on('change', function () {\n            self.$('form.o_form_binary_form').submit();\n        });\n        this.$('input.o_input_file').click();\n    },\n    /**\n     * @private\n     * @param {Event} event\n     * @param {Object} result\n     */\n    _onUploadRainbowImageDone: function (event, result) {\n        this.$('input#rainbow_img_url').val(_.str.sprintf('/web/content/%s', result.id));\n        this.$('input#rainbow_img_url').trigger('change');\n    },\n    /**\n     * @private\n     * @param {string} attribute\n     * @param {string} input\n     * @param {Object} newAttrs\n     */\n    _onChangedGroupBys(attribute, input, newAttrs) {\n        const options = {};\n        if (!newAttrs.length || (['measure'].includes(attribute) && newAttrs.length === 1 && newAttrs[0] === '__count__') ||\n            (['second_groupby', 'second_row_groupby'].includes(attribute) && newAttrs.length < 2)) {\n            options.operationType = 'add';\n            options.name = [input];\n        } else if (newAttrs.length && input.length) {\n            options.operationType = 'replace';\n            options.oldname = ['second_groupby', 'second_row_groupby'].includes(attribute) ? newAttrs[1] : newAttrs[0];\n            options.name = [input];\n        } else {\n            options.operationType = 'remove';\n            options.name = ['second_groupby', 'second_row_groupby'].includes(attribute) ? [newAttrs[1]] : [newAttrs[0]];\n        }\n        return options;\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onViewChanged: function (ev) {\n        var $input = $(ev.currentTarget);\n        var attribute = $input.attr('name');\n        if (this.view_type === 'gantt' && _.str.include(attribute, 'precision_')) {\n            // precision attribute in gantt is complicated to write so we split it\n            var newPrecision = this.state.attrs.ganttPrecision;\n            newPrecision[attribute.split('precision_')[1]] = $input.val();\n\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'view_attribute',\n                new_attrs: {\n                    precision: JSON.stringify(newPrecision),\n                },\n            });\n        } else if (this.view_type === 'list' && ['sort_field', 'sort_order'].includes(attribute)) {\n            const new_attrs = {};\n            if (attribute === 'sort_field' && !$input.val()) {\n                this.$('#sort_order_div').addClass('d-none');\n                if (!this.defaultOrder) return;\n                new_attrs['default_order'] = '';\n            } else {\n                new_attrs ['default_order'] = this.$(\"#sort_field\").val() + ' ' + this.$(\"#sort_order\").val();\n            }\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'view_attribute',\n                new_attrs: new_attrs,\n            });\n        } else if (this.view_type === 'map' && attribute === 'routing') {\n            // Remove Sort By(default_order) value when routing is disabled\n            const newAttrs = {};\n            if ($input.is(':checked')) {\n                newAttrs[attribute] = $input.data('leave-empty') === 'checked' ? '' : 'true';\n            } else {\n                newAttrs[attribute] = $input.data('leave-empty') === 'unchecked' ? '' : 'false';\n                newAttrs['default_order'] = '';\n            }\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'view_attribute',\n                new_attrs: newAttrs,\n            });\n        } else if (this.view_type === 'graph' && ['stacked', 'first_groupby', 'second_groupby', 'measure'].includes(attribute)) {\n            if (attribute === 'stacked') {\n                const newAttrs = {};\n                newAttrs['stacked'] = attribute && $input.is(':checked') ? 'true' : 'False';\n                this.trigger_up('view_change', {\n                    type: 'attributes',\n                    structure: 'view_attribute',\n                    new_attrs: newAttrs,\n                });\n            } else {\n                let options = {};\n                options.type = $input.attr('type');\n                options.viewType = this.view_type;\n                if (attribute === 'first_groupby') {\n                    const newoptions = this._onChangedGroupBys(attribute, $input.val(), this.state.attrs.groupBys);\n                    options = {...options, ...newoptions};\n                }\n                if (attribute === 'second_groupby') {\n                    const newoptions = this._onChangedGroupBys(attribute, $input.val(), this.state.attrs.groupBys);\n                    options = {...options, ...newoptions};\n                }\n                if (attribute === 'measure') {\n                    const newoptions = this._onChangedGroupBys(attribute, $input.val(), [this.state.attrs.measure]);\n                    options = {...options, ...newoptions};\n                }\n                this.trigger_up('view_change', {\n                    structure: 'graph_pivot_groupbys_fields',\n                    options,\n                });\n            }\n        } else if (this.view_type === 'pivot' && ['column_groupby', 'first_row_groupby', 'second_row_groupby'].includes(attribute)) {\n            let options = {};\n            options.type = $input.attr('type');\n            options.viewType = this.view_type;\n            if (attribute === 'column_groupby') {\n                const newoptions = this._onChangedGroupBys(attribute, $input.val(), this.state.attrs.colGroupBys);\n                options = {...options, ...newoptions};\n            }\n            if (attribute === 'first_row_groupby') {\n                const newoptions = this._onChangedGroupBys(attribute, $input.val(), this.state.attrs.rowGroupBys);\n                options = {...options, ...newoptions};\n            }\n            if (attribute === 'second_row_groupby') {\n                const newoptions = this._onChangedGroupBys(attribute, $input.val(), this.state.attrs.rowGroupBys);\n                options = {...options, ...newoptions};\n            }\n            this.trigger_up('view_change', {\n                structure: 'graph_pivot_groupbys_fields',\n                options,\n            });\n        } else if (attribute) {\n            var new_attrs = {};\n            if ($input.attr('type') === 'checkbox') {\n                if (($input.is(':checked') && !$input.data('inverse')) || (!$input.is(':checked') && $input.data('inverse'))) {\n                    new_attrs[attribute] = $input.data('leave-empty') === 'checked' ? '': 'true';\n                } else {\n                    new_attrs[attribute] = $input.data('leave-empty') === 'unchecked' ? '': 'false';\n                }\n            } else {\n                new_attrs[attribute] = $input.val();\n            }\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'view_attribute',\n                new_attrs: new_attrs,\n            });\n        }\n    },\n    /**\n     * @private\n     */\n    _onViewParameters: function () {\n        this.trigger_up('open_record_form_view');\n    },\n    /**\n     * @private\n     */\n    _onXMLEditor: function () {\n        this.trigger_up('open_xml_editor');\n    },\n});\n\n});\n", "odoo.define('web_studio.SearchRenderer', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar utils = require('web.utils');\nvar Widget = require('web.Widget');\n\nvar qweb = core.qweb;\n\n\nvar SearchRenderer = Widget.extend({\n    className: \"o_search_view\",\n\n    /**\n     * @constructor\n     * @param {Object} fields_view\n     * @param {Object} fields_view.arch\n     * @param {Object} fields_view.fields\n     * @param {String} fields_view.model\n     */\n    init: function (parent, fields_view) {\n        this._super.apply(this, arguments);\n        // see SearchView init\n        fields_view = this._processFieldsView(_.clone(fields_view));\n        this.arch = fields_view.arch;\n        this.fields = fields_view.fields;\n        this.model = fields_view.model;\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        this.$el.addClass(this.arch.attrs.class);\n        return this._super.apply(this, arguments).then(this._render.bind(this));\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * This is the reverse operation from getLocalState.  With this method, we\n     * expect the renderer to restore all DOM state, if it is relevant.\n     *\n     * This method is called after each updateState, by the controller.\n     * Needed here because the search widget is not a view anymore\n     * in the web client but used as one in studio\n     *\n     * @see getLocalState\n     * @param {any} localState the result of a call to getLocalState\n     */\n    setLocalState: function () {\n    },\n    /**\n     * Returns any relevant state that the renderer might want to keep.\n     *\n     * The idea is that a renderer can be destroyed, then be replaced by another\n     * one instantiated with the state from the model and the localState from\n     * the renderer, and the end result should be the same.\n     *\n     * The kind of state that we expect the renderer to have is mostly DOM state\n     * such as the scroll position, the currently active tab page, ...\n     *\n     * This method is called before each updateState, by the controller.\n     *\n     * @see setLocalState\n     * @returns {any}\n     */\n    getLocalState: function () {\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Return nodes which can be displayed in search view for Studio.\n     * This method is overridden in search_editor to admit invisible fields.\n     *\n     * @private\n     * @returns {Array} the list of elements to display\n     */\n    _getNodesToTreat() {\n        return this.arch.children.slice().filter(node => node.attrs.invisible !== \"1\");\n    },\n    /**\n     * Processes a fieldsView in place. In particular, parses its arch.\n     *\n     * @todo: this function is also defined in SearchView and AbstractView ; the\n     * code duplication could be removed once the SearchView will be rewritten.\n     * @private\n     * @param {Object} fv\n     * @param {string} fv.arch\n     * @returns {Object} the processed fieldsView\n     */\n    _processFieldsView: function (fv) {\n        var doc = $.parseXML(fv.arch).documentElement;\n        fv.arch = utils.xml_to_json(doc, true);\n        return fv;\n    },\n    /**\n     * Parse the arch to render each node.\n     *\n     * @private\n     */\n    _render: function () {\n        var self = this;\n        this.defs = [];\n        this.$el.empty();\n        this.$el.html(qweb.render('web_studio.searchRenderer', this.widget));\n        this.first_field = undefined;\n        this.first_filter = undefined;\n        this.first_group_by = undefined;\n        let nodesToTreat = this._getNodesToTreat();\n        while (nodesToTreat.length) {\n            var node = nodesToTreat.shift();\n            if (node.tag === \"field\"){\n                if (!self.first_field){\n                    self.first_field = node;\n                }\n                self._renderField(node);\n            } else if (node.tag === \"filter\") {\n                if (/(['\"])group_by\\1\\s*:/.test(node.attrs.context || '')) {\n                    if (!self.first_group_by) {\n                        self.first_group_by = node;\n                    }\n                    self._renderGroupBy(node);\n                } else {\n                    if (!self.first_filter) {\n                        self.first_filter = node;\n                    }\n                    self._renderFilter(node);\n                }\n            } else if (node.tag === \"separator\") {\n                if (!self.first_filter){\n                    self.first_filter = node;\n                }\n                self._renderSeparator(node);\n            } else if (node.tag === \"group\") {\n                nodesToTreat = nodesToTreat.concat(node.children);\n            }\n        }\n        return Promise.all(this.defs);\n    },\n    /**\n     * @private\n     * @param {Object} node\n     *\n     * @returns {jQueryElement}\n     */\n    _renderField: function (node) {\n        var $tbody = this.$('.o_web_studio_search_autocompletion_fields tbody');\n        var field_string = this.fields[node.attrs.name].string;\n        var display_string = node.attrs.string || field_string;\n        if (config.isDebug()) {\n            display_string += ' (' + node.attrs.name +')';\n        }\n        var $new_row = $('<tr>').append(\n            $('<td>').append(\n            $('<span>').text(display_string)\n        ));\n        $tbody.append($new_row);\n        return $new_row;\n    },\n    /**\n     * @private\n     * @param {Object} node\n     *\n     * @returns {jQueryElement}\n     */\n    _renderFilter: function (node) {\n        var $tbody = this.$('.o_web_studio_search_filters tbody');\n        var display_string = node.attrs.string || node.attrs.help;\n        var $new_row = $('<tr>').append(\n            $('<td>').append(\n            $('<span>').text(display_string)\n        ));\n        $tbody.append($new_row);\n        return $new_row;\n    },\n    /**\n     * @private\n     * @param {Object} node\n     *\n     * @returns {jQueryElement}\n     */\n    _renderGroupBy: function (node) {\n        var $tbody = this.$('.o_web_studio_search_group_by tbody');\n        // the domain is define like this:\n        // context=\"{'group_by': 'field'}\"\n        // we use a regex to get the field string\n        var display_string = node.attrs.string;\n        var field_name = node.attrs.context.match(\":.?'(.*)'\")[1];\n        if (config.isDebug()) {\n            display_string += ' (' + field_name +')';\n        }\n        var $new_row = $('<tr>').append(\n            $('<td>').append(\n            $('<span>').text(display_string)\n        ));\n        $tbody.append($new_row);\n        return $new_row;\n    },\n    /**\n     * @private\n     * @param {Object} node\n     *\n     * @returns {jQueryElement}\n     */\n    _renderSeparator: function () {\n        var $tbody = this.$('.o_web_studio_search_filters tbody');\n        var $new_row = $('<tr class=\"o_web_studio_separator\">').html('<td><hr/></td>');\n\n        $tbody.append($new_row);\n        return $new_row;\n    },\n});\n\nreturn SearchRenderer;\n\n});\n", "odoo.define('web_studio.ListRendererLazy', function (require) {\n\"use_strict\";\n\nconst ListRenderer = require('web.ListRenderer');\n\nListRenderer.include({\n    /**\n    * @override\n    *\n    * The point of this function is to disable the optional fields dropdown icon.\n    */\n    _onToggleOptionalColumnDropdown: function(ev) {\n        const ctx = this.state.getContext();\n        if (!ctx.studio) {\n            this._super.apply(this, arguments);\n        }\n    },\n});\n\n});\n", "odoo.define('web_studio.CalendarEditor', function (require) {\n\"use strict\";\n\nvar CalendarRenderer = require('web.CalendarRenderer');\n\nvar EditorMixin = require('web_studio.EditorMixin');\n\nreturn CalendarRenderer.extend(EditorMixin, {\n});\n\n});\n", "odoo.define('web_studio.EditorMixin', function() {\n\"use strict\";\n\nreturn {\n    /**\n     * Find and return the first node found in the view arch\n     * satifying the given node description.\n     * Breadth-first search.\n     * @param {Object} viewArch\n     * @param {Object} nodeDescription\n     * @param {string} nodeDescription.tag\n     * @param {Object} nodeDescription.attrs\n     * @returns {Object}\n     */\n    findNode: function (viewArch, nodeDescription) {\n        // TODO transparently check t-att- attributes ?\n        // TODO support modifiers objects ?\n        const nodesToCheck = [viewArch];\n        while (nodesToCheck.length > 0) {\n            const node = nodesToCheck.shift();\n            const match = this._satisfiesNodeDescription(node, nodeDescription);\n            if (match) return node;\n            nodesToCheck.push(...(node.children || []));\n        }\n    },\n    /**\n     * Handles the drag and drop of a jQuery UI element.\n     *\n     * @param {JQuery} $drag\n     * @param {Object} node\n     * @param {string} position\n     */\n    handleDrop: function ($drag, node, position) {\n        var isNew = $drag.hasClass('o_web_studio_component');\n        var values;\n        if (isNew) {\n            values = {\n                type: 'add',\n                structure: $drag.data('structure'),\n                field_description: $drag.data('field_description'),\n                node: node,\n                new_attrs: $drag.data('new_attrs'),\n                position: position,\n            };\n        } else {\n            var movedFieldName = $drag.data('name');\n            if (node.attrs.name === movedFieldName) {\n                // the field is dropped on itself\n                return;\n            }\n            values = {\n                type: 'move',\n                node: node,\n                position: position,\n                structure: 'field',\n                new_attrs: {\n                    name: movedFieldName,\n                },\n            };\n        }\n        this.trigger_up('on_hook_selected');\n        this.trigger_up('view_change', values);\n    },\n    /**\n     * Highlight the nearest hook regarding the position and remove the\n     * highlighto on other elements.\n     *\n     * @param {JQuery} $helper - the helper being dragged\n     * @param {Object} position - {pageX: x, pageY: y}\n     */\n    highlightNearestHook: function ($helper, position) {\n        this.$('.o_web_studio_nearest_hook').removeClass('o_web_studio_nearest_hook');\n        // to be implemented by each editor\n    },\n    /*\n     * Set the style and the corresponding event on a selectable node (fields,\n     * groups, etc.) of the editor\n     */\n    setSelectable: function ($el) {\n        var self = this;\n        $el.click(function () {\n            self.unselectedElements();\n            $(this).addClass('o_web_studio_clicked');\n        })\n        .mouseover(function () {\n            if (self.$('.ui-draggable-dragging').length) {\n                return;\n            }\n            $(this).addClass('o_web_studio_hovered');\n        })\n        .mouseout(function () {\n            $(this).removeClass('o_web_studio_hovered');\n        });\n    },\n    unselectedElements: function () {\n        this.selected_node_id = false;\n        var $el = this.$('.o_web_studio_clicked');\n        $el.removeClass('o_web_studio_clicked');\n        if ($el.find('.blockUI')) {\n            $el.find('.blockUI').parent().unblock();\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Check if the node satifies the given node description\n     * @param {Object} node\n     * @param {Object} nodeDescription\n     * @param {Object} nodeDescription.attrs\n     * @param {string} nodeDescription.tag\n     * @returns {boolean}\n     */\n    _satisfiesNodeDescription: function (node, nodeDescription) {\n        const attrs = Object.assign({}, nodeDescription);\n        const tag = attrs.tag;\n        delete attrs.tag;\n        const checkAttrs = Object.keys(attrs).length !== 0;\n        if (tag && tag !== node.tag) return false;\n        if (tag && !checkAttrs) return true;\n        const match = (a1, a2) => typeof(a1) === 'string' ? a1.includes(a2) : a1 === a2;\n        const matchedAttrs = Object\n            .entries(attrs)\n            .filter(([attr, value]) => match(node.attrs[attr], value))\n            .map(([attr, value]) => attr);\n        return matchedAttrs.length > 0 && matchedAttrs.length === Object.keys(attrs).length;\n    },\n\n    preprocessArch: function(arch) {\n        return arch;\n    },\n};\n\n});\n", "odoo.define('web_studio.EditorMixinOwl', function (require) {\n    \"use strict\";\n\n    return Editor => class extends Editor {\n        handleDrop() { }\n\n        highlightNearestHook() { }\n\n        setSelectable() { }\n\n        unselectedElements() { }\n    };\n\n});\n", "odoo.define('web_studio.fields', function (require) {\n\"use strict\";\n\nvar AbstractField = require('web.AbstractField');\nvar basic_fields = require('web.basic_fields');\nvar relational_fields = require('web.relational_fields');\n\nvar InputField = basic_fields.InputField;\nvar FieldText = basic_fields.FieldText;\nvar FieldMany2ManyTags = relational_fields.FieldMany2ManyTags;\nvar FieldMany2One = relational_fields.FieldMany2One;\n\n\nAbstractField.include({\n    has_placeholder: false,\n});\nInputField.include({\n    has_placeholder: true,\n});\nFieldText.include({\n    has_placeholder: true,\n});\nFieldMany2ManyTags.include({\n    has_placeholder: true,\n});\nFieldMany2One.include({\n    has_placeholder: true,\n});\n});\n", "odoo.define('web_studio.FormEditor', function (require) {\n\"use strict\";\n\nconst { getMessagingComponent } = require('@mail/utils/messaging_component');\n\nvar core = require('web.core');\nvar FormRenderer = require('web.FormRenderer');\nvar pyUtils = require('web.py_utils');\n\nvar EditorMixin = require('web_studio.EditorMixin');\nvar FieldSelectorDialog = require('web_studio.FieldSelectorDialog');\nvar FormEditorHook = require('web_studio.FormEditorHook');\n\nvar _t = core._t;\n\nconst { ComponentWrapper } = require('web.OwlCompatibility');\n\n// ensure `.include()` on `mail_enterprise` is applied before `web_studio`\nrequire('@mail_enterprise/widgets/form_renderer/form_renderer');\n\nclass ChatterContainerWrapperComponent extends ComponentWrapper {}\n\nvar FormEditor =  FormRenderer.extend(EditorMixin, {\n    nearest_hook_tolerance: 50,\n    className: FormRenderer.prototype.className + ' o_web_studio_form_view_editor',\n    events: _.extend({}, FormRenderer.prototype.events, {\n        'click .o_web_studio_add_chatter': '_onAddChatter',\n    }),\n    custom_events: _.extend({}, FormRenderer.prototype.custom_events, {\n        'on_hook_selected': '_onSelectedHook',\n    }),\n    /**\n     * @constructor\n     * @param {Object} params\n     * @param {Boolean} params.show_invisible\n     * @param {Boolean} params.chatter_allowed\n     */\n    init: function (parent, state, params) {\n        this._super.apply(this, arguments);\n        this.show_invisible = params.show_invisible;\n        this.renderInvisible = this.show_invisible;\n        this.chatter_allowed = params.chatter_allowed;\n        this._chatterNode = undefined;\n        this._chatterContainerOverview = undefined;\n        this.silent = false;\n        this.node_id = 1;\n        this.hook_nodes = {};\n    },\n    /**\n     * @override\n     */\n    destroy() {\n        this._super(...arguments);\n        this._chatterContainerOverview = undefined;\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    getLocalState: function () {\n        var state = this._super.apply(this, arguments) || {};\n        if (this.selected_node_id) {\n            state.selected_node_id = this.selected_node_id;\n        }\n        return state;\n    },\n    /**\n     * @override\n     */\n    highlightNearestHook: function ($helper, position) {\n        var self = this;\n        EditorMixin.highlightNearestHook.apply(this, arguments);\n\n        var $nearest_form_hooks = this.$('.o_web_studio_hook')\n            .touching({\n                    x: position.pageX - this.nearest_hook_tolerance,\n                    y: position.pageY - this.nearest_hook_tolerance,\n                    w: this.nearest_hook_tolerance*2,\n                    h: this.nearest_hook_tolerance*2\n                },{\n                    container: document.body\n                }\n            ).nearest({x: position.pageX, y: position.pageY}, {container: document.body});\n\n        var is_nearest_hook = false;\n        $nearest_form_hooks.each(function () {\n            var hook_id = $(this).data('hook_id');\n            var hook = self.hook_nodes[hook_id];\n            if ($helper.data('structure') === 'notebook') {\n                // a notebook cannot be placed inside a page or in a group\n                if (hook.type !== 'page' && !$(this).parents('.o_group').length) {\n                    is_nearest_hook = true;\n                }\n            } else if ($helper.data('structure') === 'group') {\n                // a group cannot be placed inside a group\n                if (hook.type !== 'insideGroup' && !$(this).parents('.o_group').length) {\n                    is_nearest_hook = true;\n                }\n            } else {\n                is_nearest_hook = true;\n            }\n\n            // Prevent drops outside of groups if not in whitelist\n            var whitelist = ['o_web_studio_field_picture', 'o_web_studio_field_html',\n                'o_web_studio_field_many2many', 'o_web_studio_field_one2many',\n                'o_web_studio_field_tabs', 'o_web_studio_field_columns', 'o_web_studio_field_lines'];\n            var hookTypeBlacklist = ['genericTag', 'afterGroup', 'afterNotebook', 'insideSheet'];\n            var fieldClasses = $helper[0].className.split(' ');\n            if (_.intersection(fieldClasses, whitelist).length === 0 && hookTypeBlacklist.indexOf(hook.type) > -1) {\n                is_nearest_hook = false;\n            }\n\n            if (is_nearest_hook) {\n                $(this).addClass('o_web_studio_nearest_hook');\n                return false;\n            }\n        });\n\n        return is_nearest_hook;\n    },\n    /**\n     * @override\n     */\n    setLocalState: function (state) {\n        this.silent = true;\n        this._super.apply(this, arguments);\n        this.silent = false;\n        this.unselectedElements();\n        if (state.selected_node_id) {\n            var $selected_node = this.$('[data-node-id=\"' + state.selected_node_id + '\"]');\n            if ($selected_node) {\n                $selected_node.click();\n            }\n        }\n    },\n    /**\n     * Selects the field on view\n     *\n     * @param {string} fieldName\n     */\n    selectField: function (fieldName) {\n        this.$('[name=' + fieldName + ']').click();\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Add Studio handler for button clicks; will parse the `effect` attribute\n     * on the node to pre-populate the 'rainbow man' section with the current\n     * settings for the button as well as the generic node clicked handler that\n     * enable edition of the node in the sidebar.\n     * @private\n     * @param {Object} node\n     * @param {jQueryElement} $button\n     */\n    _addButtonHandler: function (node, $button) {\n        this.setSelectable($button);\n        const nodeID = this.node_id++;\n        $button.attr('data-node-id', nodeID);\n        if (node.attrs.effect) {\n            node.attrs.effect = _.defaults(pyUtils.py_eval(node.attrs.effect), {\n                fadeout: 'medium'\n            });\n        }\n        $button.click((event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            this.selected_node_id = nodeID;\n            this.trigger_up('node_clicked', {node: node});\n        });\n        return $button;\n    },\n\n    /**\n     * @override\n     * @private\n     */\n    _applyModifiers: function (modifiersData, record, element) {\n        var def = this._super.apply(this, arguments);\n\n        if (this.show_invisible) {\n            var elements = element ? [element] : modifiersData.elements;\n            _.each(elements, function (element) {\n                if (element.$el.hasClass('o_invisible_modifier')) {\n                    element.$el\n                        .removeClass('o_invisible_modifier')\n                        .addClass('o_web_studio_show_invisible');\n                }\n            });\n        }\n\n        return def;\n    },\n    /**\n     * @private\n     * @param {MouseEvent} ev\n     * @param {Object} ui\n     */\n    _handleDrop: function (ev, ui) {\n        var $hook = this.$('.o_web_studio_nearest_hook');\n        if ($hook.length) {\n            var hook_id = $hook.data('hook_id');\n            var hook = this.hook_nodes[hook_id];\n            // draggable is only set on `droppable` elements, not `draggable`\n            var $drag = ui.draggable || $(ev.target);\n            this.handleDrop($drag, hook.node, hook.position);\n            ui.helper.removeClass('ui-draggable-helper-ready');\n            $hook.removeClass('o_web_studio_nearest_hook');\n        }\n    },\n    /**\n     * Override to always return false to get chatter always below form sheet.\n     *\n     * @override\n     * @returns {Boolean}\n     */\n    _isChatterAside() {\n        return false;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _postProcessField: function (widget, node) {\n        this._super.apply(this, arguments);\n        // make empty widgets appear if there is no label\n        if (!widget.isSet() && (!node.has_label || node.attrs.nolabel)) {\n            widget.$el.removeClass('o_field_empty').addClass('o_web_studio_widget_empty');\n            // statusbar needs to be rendered normally\n            if (node.attrs.widget !== 'statusbar') {\n                widget.$el.text(widget.string);\n            }\n        }\n        // remove all events on the widget as we only want to click for edition\n        widget.$el.off();\n        this._processField(node, widget.$el);\n    },\n    /**\n     * Process a field node, in particular, bind an click handler on $el to edit\n     * its field attributes.\n     *\n     * @private\n     * @param {Object} node\n     * @param {JQuery} $el\n     */\n    _processField: function (node, $el) {\n        var self = this;\n        // detect presence of mail fields\n        if (node.attrs.name === \"message_ids\") {\n            this.has_message_field = true;\n        } else if (node.attrs.name === \"message_follower_ids\") {\n            this.has_follower_field = true;\n        } else if (node.attrs.name === \"activity_ids\") {\n            this.has_activity_field = true;\n        } else {\n            var modifiers = self._getEvaluatedModifiers(node, this.state);\n            if (modifiers.invisible && !this.show_invisible) {\n                return;\n            }\n            $el.attr('data-node-id', this.node_id++);\n            this.setSelectable($el);\n            $el.click(function (event) {\n                event.preventDefault();\n                event.stopPropagation();\n                self.selected_node_id = $el.data('node-id');\n                self.trigger_up('node_clicked', {node: node, $node:$el});\n            });\n        }\n    },\n    /**\n     * @override\n     * @private\n     */\n    _render: function () {\n        var self = this;\n        this.has_follower_field = false;\n        this.has_message_field = false;\n        this.has_activity_field = false;\n\n        this.$el.droppable({\n            accept: \".o_web_studio_component\",\n            drop: this._handleDrop.bind(this),\n        });\n\n        return this._super.apply(this, arguments).then(async function () {\n            // Add chatter hook + chatter preview\n            if (!self._hasChatter() && self.chatter_allowed) {\n                var $chatter_hook = $('<div>').addClass('o_web_studio_add_chatter o_chatter');\n                // Append non-hover content\n                $chatter_hook.append($('<span>', {class: 'container'})\n                    .append($('<span>', {\n                        text: _t('Add Chatter Widget'),\n                    }).prepend($('<i>', {\n                        class: 'fa fa-comments',\n                        style: 'margin-right:10px',\n                    })))\n                );\n                const $studioChatterContainer = $('<div>').addClass('o_Studio_ChatterContainer');\n                $chatter_hook.append($studioChatterContainer);\n                // Append hover content (chatter preview)\n                if (!self._chatterContainerOverview) {\n                    self._chatterContainerOverview = new ChatterContainerWrapperComponent(\n                        self,\n                        getMessagingComponent('ChatterContainer'),\n                        {\n                            threadModel: self.state.model,\n                        },\n                    );\n                }\n                await self._chatterContainerOverview.mount($studioChatterContainer[0]);\n                $chatter_hook.insertAfter(self.$('.o_form_sheet'));\n            }\n            // Add buttonbox hook\n            if (!self.$('.oe_button_box').length) {\n                var $buttonbox_hook = $('<button>')\n                    .addClass('btn oe_stat_button o_web_studio_button_hook')\n                    .click(function (event) {\n                        event.preventDefault();\n                        self.trigger_up('view_change', {\n                            type: 'add',\n                            add_buttonbox: true,\n                            structure: 'button',\n                        });\n                    });\n                var $buttonbox = $('<div>')\n                    .addClass('oe_button_box')\n                    .append($buttonbox_hook);\n                self.$('.o_form_sheet').prepend($buttonbox);\n            }\n            // Add statusbar\n            if (!self.$('.o_statusbar_status').length) {\n                var $statusbar = $('<div>', {\n                    text: _t(\"Add a pipeline status bar\"),\n                    class: 'o_web_studio_statusbar_hook',\n                }).click(function () {\n                    var values = {\n                        add_statusbar: !self.$('.o_form_statusbar').length,\n                        type: 'add',\n                        structure: 'field',\n                        field_description: {\n                            field_description: \"Pipeline status bar\",\n                            type: 'selection',\n                            selection: [\n                                ['status1', _t('First Status')],\n                                ['status2', _t('Second Status')],\n                                ['status3', _t('Third Status')],\n                            ],\n                            default_value: true,\n                        },\n                        target: {\n                            tag: 'header',\n                        },\n                        new_attrs: {\n                            widget: 'statusbar',\n                            options: \"{'clickable': '1'}\",\n                        },\n                        position: 'inside',\n                    };\n                    self.trigger_up('view_change', values);\n                });\n                self.$('.o_form_sheet_bg').prepend($statusbar);\n            }\n            // Add avtar\n            if (self.$('.oe_title').length & !self.$('.oe_title').siblings('.oe_avatar').length && !self.$('.oe_title > h1 > .oe_avatar').length) {\n                const $avatar = $('<div>', {\n                    text: _t(\"Add Picture\"),\n                    class: self.$('.oe_title > h1.d-flex.flex-row').length ? 'oe_avatar ml-3 p-3 o_web_studio_avatar h4': 'oe_avatar ml-3 mr-3 o_web_studio_avatar',\n                }).click(function () {\n                    const compatibleFields = _.pick(self.state.fields, function (e) {\n                        return e.type === 'binary';\n                    });\n                    const dialog = new FieldSelectorDialog(self, compatibleFields, true).open();\n                    dialog.on('confirm', self, function (field) {\n                        self.trigger_up('view_change', {\n                            structure: 'avatar_image',\n                            field: field,\n                        });\n                    });\n                });\n                if (self.$('h1').hasClass('d-flex flex-row')) {\n                    self.$('.oe_title > h1').append($avatar);\n                } else {\n                    self.$('.oe_title').before($avatar);\n                }\n            }\n            // Apply 'text-muted' class on optional field dropdown\n            self.$('i.o_optional_columns_dropdown_toggle')\n                .addClass('text-muted')\n        });\n    },\n    /**\n     * @private\n     * @returns {JQuery}\n     */\n    _renderAddingContentLine: function (node) {\n        var formEditorHook = this._renderHook(node, 'after', 'tr');\n         // start the widget\n        return formEditorHook.appendTo($('<div>')).then(function() {\n            return formEditorHook.$el;\n        })\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderButtonBox: function () {\n        var self = this;\n        var $buttonbox = this._super.apply(this, arguments);\n        var $buttonhook = $('<button>').addClass('btn oe_stat_button o_web_studio_button_hook');\n        $buttonhook.click(function (event) {\n            event.preventDefault();\n\n            self.trigger_up('view_change', {\n                type: 'add',\n                structure: 'button',\n            });\n        });\n\n        $buttonhook.prependTo($buttonbox);\n        return $buttonbox;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderGenericTag: function (node) {\n        var $result = this._super.apply(this, arguments);\n        if (node.attrs.class === 'oe_title') {\n            var formEditorHook = this._renderHook(node, 'after', '', 'genericTag')\n            this.defs.push(formEditorHook.appendTo($result));\n        }\n        return $result;\n    },\n    /**\n     * @override\n     * @private\n     * @param {Object} node\n     * @returns {jQueryElement}\n     */\n    _renderHeaderButton: function (node) {\n        var self = this;\n        var $button = this._super.apply(this, arguments);\n        $button = this._addButtonHandler(node, $button);\n        return $button;\n    },\n    /**\n     * @override\n     * @private\n     *\n     * FIXME wrong, studio has never been able to handle groups will col > 2...\n     *\n     */\n    _renderInnerGroup: function (node) {\n        var self = this;\n        var formEditorHook;\n        var $result = this._super.apply(this, arguments);\n        _.each(node.children, function (child) {\n            if (child.tag === 'field') {\n                Promise.all(self.defs).then(function () {\n                    var $widget = $result.find('[name=\"' + child.attrs.name + '\"]');\n                    var $tr = $widget.closest('tr');\n                    if (!$widget.is('.o_invisible_modifier')) {\n                        self._renderAddingContentLine(child).then(function(element) {\n                            element.insertAfter($tr);\n                            // apply to the entire <tr> o_web_studio_show_invisible\n                            // rather then inner label/input\n                            if ($widget.hasClass('o_web_studio_show_invisible')) {\n                                $widget.removeClass('o_web_studio_show_invisible');\n                                $tr.find('label[for=\"' + $widget.attr('id') + '\"]').removeClass('o_web_studio_show_invisible');\n                                $tr.addClass('o_web_studio_show_invisible');\n                            }\n                        });\n                    }\n                    if (child.has_label) {\n                        // as it's not possible to move the label, we only allow to\n                        // move fields with a default label (otherwise the field\n                        // will be moved but the label will stay)\n                        self._setDraggable(child, $tr);\n                    }\n                    self._processField(child, $tr);\n                });\n            }\n        });\n        const modifiers = this._getEvaluatedModifiers(node, this.state);\n        if (!modifiers.invisible || this.show_invisible) {\n            // Add click event to see group properties in sidebar\n            $result.attr('data-node-id', this.node_id++);\n            this.setSelectable($result);\n            $result.click(function (event) {\n                event.stopPropagation();\n                self.selected_node_id = $result.data('node-id');\n                self.trigger_up('node_clicked', { node: node });\n            });\n        }\n        // Add hook for groups that have not yet content.\n        if (!node.children.length) {\n            formEditorHook = this._renderHook(node, 'inside', 'tr', 'insideGroup');\n            this.defs.push(formEditorHook.appendTo($result));\n        } else {\n            // Add hook before the first node in a group.\n            var $firstRow = $result.find('tr:first');\n            formEditorHook = this._renderHook(node.children[0], 'before', 'tr');\n            if (node.attrs.string) {\n                // the group string is displayed in a tr\n                this.defs.push(formEditorHook.insertAfter($firstRow));\n            } else {\n                this.defs.push(formEditorHook.insertBefore($firstRow));\n            }\n        }\n        return $result;\n    },\n\n    /**\n     * @override\n     * @private\n     */\n    _renderInnerGroupField: function (node) {\n        node.has_label = (node.attrs.nolabel !== \"1\");\n        return this._super.apply(this, arguments);\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderNode: function (node) {\n        var $el = this._super.apply(this, arguments);\n        if (node.tag === 'div' && node.attrs.class === 'oe_chatter') {\n            this._chatterNode = node;\n        }\n        return $el;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderStatButton: function (node) {\n        var self = this;\n        var $button = this._super.apply(this, arguments);\n        $button.attr('data-node-id', this.node_id++);\n        this.setSelectable($button);\n        $button.click(function (ev) {\n            if (! $(ev.target).closest('.o_field_widget').length) {\n                // click on the button and not on the field inside this button\n                self.selected_node_id = $button.data('node-id');\n                self.trigger_up('node_clicked', {node: node});\n            }\n        });\n        return $button;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderTabPage: function (node) {\n        var $result = this._super.apply(this, arguments);\n        // Add hook only for pages that have not yet outergroups.\n        if (!$result.children('.o_group:not(.o_inner_group):last-child').length) {\n            var formEditorHook = this._renderHook(node, 'inside', 'div', 'page');\n            this.defs.push(formEditorHook.appendTo($result));\n        }\n        return $result;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderOuterGroup: function (node) {\n        var $result = this._super.apply(this, arguments);\n\n        // Add hook after this group\n        var formEditorHook = this._renderHook(node, 'after', '', 'afterGroup');\n        this.defs.push(formEditorHook.insertAfter($result));\n        return $result;\n    },\n\n    /**\n     * @override\n     * @private\n     */\n    _renderTagButton: function (node) {\n        let $result = this._super.apply(this, arguments);\n        $result = this._addButtonHandler(node, $result);\n        return $result;\n    },\n\n    /**\n     * @override\n     * @private\n     */\n    _renderTagLabel: function (node) {\n        var self = this;\n        var $result = this._super.apply(this, arguments);\n\n        // only handle label tags, not labels associated to fields (already\n        // handled in @_renderInnerGroup with @_processField)\n        if (node.tag === 'label') {\n            $result.attr('data-node-id', this.node_id++);\n            this.setSelectable($result);\n            $result.click(function (event) {\n                event.preventDefault();\n                event.stopPropagation();\n                self.selected_node_id = $result.data('node-id');\n                self.trigger_up('node_clicked', {node: node});\n            });\n        }\n        return $result;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderTagNotebook: function (node) {\n        var self = this;\n        var $result = this._super.apply(this, arguments);\n\n        var $addTag = $('<li>', {class: 'nav-item'}).append('<a href=\"#\" class=\"nav-link\"><i class=\"fa fa-plus-square\"/></a>');\n        $addTag.click(function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            self.trigger_up('view_change', {\n                type: 'add',\n                structure: 'page',\n                position: 'inside',\n                node: node,\n            });\n        });\n        $result.find('ul.nav-tabs').append($addTag);\n\n        var formEditorHook = this._renderHook(node, 'after', '', 'afterNotebook');\n        this.defs.push(formEditorHook.appendTo($result));\n\n        // add node-id data on all tabs once whole notebook tabs are rendered\n        // as registerModifiers of all tabs are called from _renderTagNotebook\n        // so we need to evaluate modifiers here else we will not get modifiers\n        Object.entries(node.children).forEach(([index, child]) => {\n            const modifiers = this._getEvaluatedModifiers(child, this.state);\n            if (!modifiers.invisible || this.show_invisible) {\n                const $page = $result.find(`.nav-item:eq(${index})`);\n                $page.attr('data-node-id', this.node_id++);\n                this.setSelectable($page);\n                $page.click(function (event) {\n                    event.preventDefault();\n                    if (!self.silent) {\n                        self.selected_node_id = $page.data('node-id');\n                        self.trigger_up('node_clicked', { node: child });\n                    }\n                });\n            }\n        });\n        return $result;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderTagSheet: function (node) {\n        var $result = this._super.apply(this, arguments);\n        var formEditorHook = this._renderHook(node, 'inside', '', 'insideSheet');\n        this.defs.push(formEditorHook.prependTo($result));\n        return $result;\n    },\n    /**\n     * @override\n     * @private\n     */\n    async _renderView() {\n        await this._super(...arguments);\n        if (this._hasChatter()) {\n            const $el = $(this._chatterContainerComponent.el);\n            this.setSelectable($el);\n            // Put a div in overlay preventing all clicks chatter's elements\n            $el.append($('<div>', { 'class': 'o_web_studio_overlay' }));\n            $el.attr('data-node-id', this.node_id++);\n            $el.click(() => {\n                this.selected_node_id = $el.data('node-id');\n                this.trigger_up('node_clicked', { node: this._chatterNode });\n            });\n        }\n    },\n    /**\n     * @private\n     * @param {Object} node\n     * @param {String} position\n     * @param {String} tagName\n     * @param {String} type\n     * @returns {Widget} FormEditorHook\n     */\n    _renderHook: function (node, position, tagName, type) {\n        var hook_id = _.uniqueId();\n        this.hook_nodes[hook_id] = {\n            node: node,\n            position: position,\n            type: type,\n        };\n        return new FormEditorHook(this, position, hook_id, tagName);\n    },\n    /**\n     * Set a jQuery element as draggable.\n     * Note that we only set fields as draggable for now.\n     *\n     * @param {Object} node\n     * @param {jQuery} $el\n     */\n    _setDraggable: function (node, $el) {\n        var self = this;\n\n        if ($el.is('tr')) {\n            // *** HACK ***\n            // jQuery.ui draggable cannot be set on a <tr> in Chrome because\n            // position: relative has just no effect on a <tr> so we keep the\n            // first <td> instead\n            $el = $el.find('td:first');\n        }\n\n        $el.draggable({\n            revertDuration: 200,\n            refreshPositions: true,\n            start: function (e, ui) {\n                self.$('.o_web_studio_hovered').removeClass('o_web_studio_hovered');\n                self.$('.o_web_studio_clicked').removeClass('o_web_studio_clicked');\n                ui.helper.addClass('ui-draggable-helper');\n                ui.helper.data('name', node.attrs.name);\n            },\n            revert: function () {\n                // a field cannot be dropped on the same place\n                var $hook = self.$('.o_web_studio_nearest_hook');\n                if ($hook.length) {\n                    var hook_id = $hook.data('hook_id');\n                    var hook = self.hook_nodes[hook_id];\n                    if (hook.node.attrs.name !== node.attrs.name) {\n                        return false;\n                    }\n                }\n                self.$('.ui-draggable-helper').removeClass('ui-draggable-helper');\n                self.$('.ui-draggable-helper-ready').removeClass('ui-draggable-helper-ready');\n                return true;\n            },\n            stop: this._handleDrop.bind(this),\n        });\n\n        // display nearest hook (handled by the ViewEditorManager)\n        $el.on('drag', _.throttle(function (event, ui) {\n            self.trigger_up('drag_component', {\n                position: {pageX: event.pageX, pageY: event.pageY},\n                $helper: ui.helper,\n            });\n        }, 200));\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onAddChatter: function (ev) {\n        // prevent multiple click\n        $(ev.currentTarget).css('pointer-events', 'none');\n        this.trigger_up('view_change', {\n            structure: 'chatter',\n            remove_follower_ids: this.has_follower_field,\n            remove_message_ids: this.has_message_field,\n            remove_activity_ids: this.has_activity_field,\n        });\n    },\n    /**\n     * @private\n     */\n    _onButtonBoxHook: function () {\n        this.trigger_up('view_change', {\n            structure: 'buttonbox',\n        });\n    },\n    /**\n     * @private\n     */\n    _onSelectedHook: function () {\n        this.selected_node_id = false;\n    },\n});\n\nreturn FormEditor;\n\n});\n", "odoo.define('web_studio.FormEditorHook', function (require) {\n\"use strict\";\n\nvar Widget = require('web.Widget');\n\nvar FormEditorHook = Widget.extend({\n    className: 'o_web_studio_hook',\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {String} position values: inside | after | before\n     * @param {Integer} hook_id\n     * @param {String} tagName values: generidTag | '' | tr | div\n     */\n    init: function (parent, position, hook_id, tagName) {\n        this._super.apply(this, arguments);\n        this.position = position;\n        this.hook_id = hook_id;\n        this.tagName = tagName || 'div';\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        this.$el.data('hook_id', this.hook_id);\n\n        var $content;\n        switch (this.tagName) {\n            case 'tr':\n                $content = $('<td colspan=\"2\">').append(this._renderSpan());\n                break;\n            default:\n                $content = this._renderSpan();\n                break;\n        }\n        this.$el.append($content);\n\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @returns {JQuery}\n     */\n    _renderSpan: function () {\n        return $('<span>').addClass('o_web_studio_hook_separator');\n    },\n});\n\nreturn FormEditorHook;\n\n});\n", "odoo.define('web_studio.KanbanEditor', function (require) {\n\"use strict\";\n\nvar BasicModel = require('web.BasicModel');\nvar KanbanRecordEditor = require('web_studio.KanbanRecordEditor');\nvar KanbanRenderer = require('web.KanbanRenderer');\n\nvar EditorMixin = require('web_studio.EditorMixin');\n\nreturn KanbanRenderer.extend(EditorMixin, {\n    className: KanbanRenderer.prototype.className + ' o_web_studio_kanban_view_editor',\n    /**\n     * @constructor\n     * @param {Object} params\n     * @param {boolean} params.show_invisible\n     */\n    init: function (parent, state, params) {\n        this._super.apply(this, arguments);\n\n        this.recordOptions.showInvisible = params.show_invisible;\n\n        // We only want to display one record to ease the edition.\n        // If grouped, render the record from only one of the groups that\n        // contains records like if it was ungrouped (fallback on the first\n        // group if all groups are empty).\n        this.isGrouped = !!this.state.groupedBy.length;\n        if (this.isGrouped) {\n            state = _.find(this.state.data, function (group) {\n                return group.count > 0;\n            }) || this.state.data[0];\n        }\n        this.kanbanRecord = state && state.data[0];\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            if (!self.kanbanRecord) {\n                // add an empty record to be able to edit something\n                var model = new BasicModel(self);\n                return model.load({\n                    fields: self.state.fields,\n                    fieldsInfo: self.state.fieldsInfo,\n                    modelName: self.state.model,\n                    type: 'record',\n                    viewType: self.state.viewType,\n                }).then(function (record_id){\n                    self.kanbanRecord = model.get(record_id);\n                });\n            }\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    highlightNearestHook: function ($helper, position) {\n        if (this.recordEditor) {\n            return this.recordEditor.highlightNearestHook($helper, position);\n        }\n    },\n    /**\n     * @override\n     */\n    getLocalState: function () {\n        var state = this._super.apply(this, arguments) || {};\n        if (this.recordEditor && this.recordEditor.selected_node_id) {\n            state.selected_node_id = this.recordEditor.selected_node_id;\n        }\n        return state;\n    },\n    /**\n     * @override\n     */\n    setLocalState: function (state) {\n        if (this.recordEditor) {\n            this.recordEditor.setLocalState(state);\n        }\n    },\n    /**\n     * @override\n     */\n    unselectedElements: function () {\n        EditorMixin.unselectedElements.apply(this, arguments);\n        if (this.recordEditor) {\n            this.recordEditor.selected_node_id = false;\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _render: function () {\n        var self = this;\n        var fragment = document.createDocumentFragment();\n        this.defs = [];\n        this._renderUngrouped(fragment);\n        var defs = this.defs;\n        delete this.defs;\n        return Promise.all(defs).then(function () {\n            self.$el.empty();\n            self.$el.toggleClass('o_kanban_grouped', self.isGrouped);\n            self.$el.toggleClass('o_kanban_ungrouped', !self.isGrouped);\n\n            if (self.isGrouped) {\n                var $group = $('<div>', {class: 'o_kanban_group'});\n                $group.append(fragment);\n                self.$el.append($group);\n\n                // render a second empty column\n                var fragment_empty = document.createDocumentFragment();\n                self._renderDemoDivs(fragment_empty, 7);\n                self._renderGhostDivs(fragment_empty, 6);\n                var $group_empty = $('<div>', {class: 'o_kanban_group'});\n                $group_empty.append(fragment_empty);\n                self.$el.append($group_empty);\n            } else {\n                self.$el.append(fragment);\n            }\n        });\n\n    },\n    /**\n     * Renders empty demo divs in a document fragment.\n     *\n     * @private\n     * @param {DocumentFragment} fragment\n     * @param {integer} nbDivs the number of divs to append\n     */\n    _renderDemoDivs: function (fragment, nbDivs) {\n        for (var i = 0, demo_div; i < nbDivs; i++) {\n            demo_div = $(\"<div>\").addClass(\"o_kanban_record o_kanban_demo\");\n            demo_div.appendTo(fragment);\n        }\n    },\n    /**\n     * Override this method to only render one record and to use the\n     * KanbanRecordEditor.\n     *\n     * @private\n     * @param {DocumentFragment} fragment\n     */\n    _renderUngrouped: function (fragment) {\n        var self = this;\n        var isDashboard = this.$el.hasClass('o_kanban_dashboard');\n        this.recordEditor = new KanbanRecordEditor(\n            this, this.kanbanRecord, this.recordOptions, this.arch, isDashboard);\n        this.widgets.push(this.recordEditor);\n        this.defs.push(this.recordEditor.appendTo(fragment));\n\n        Promise.all(this.defs).then(function () {\n            // these divs need to be rendered after the kanban record\n            self._renderDemoDivs(fragment, 6);\n            self._renderGhostDivs(fragment, 6);\n        });\n    },\n});\n\n});\n", "odoo.define('web_studio.KanbanRecordEditor', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar KanbanRecord = require('web.KanbanRecord');\nvar utils = require('web.utils');\n\nvar EditorMixin = require('web_studio.EditorMixin');\nvar FieldSelectorDialog = require('web_studio.FieldSelectorDialog');\n\nvar _t = core._t;\nconst qweb = core.qweb;\n\nvar KanbanRecordEditor = KanbanRecord.extend(EditorMixin, {\n    nearest_hook_tolerance: 50,\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} state\n     * @param {Object} options\n     * @param {Object} viewArch\n     * @param {Boolean} is_dashboard\n     */\n    init: function (parent, state, options, viewArch, is_dashboard) {\n        this._super.apply(this, arguments);\n        this.node_id = 1;\n        this.hook_nodes = [];\n        this.viewArch = viewArch;\n        this.is_dashboard = is_dashboard;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _render: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            // prevent the click on the record and remove the corresponding style\n            self.$el.removeClass('oe_kanban_global_click oe_kanban_global_click_edit');\n\n            // prevent the color dropdown to be displayed\n            self.$('.o_dropdown_kanban > a')\n                .removeAttr('data-toggle')\n                .click(function (event) {\n                    event.preventDefault();\n                });\n\n            self.$el.droppable({\n                accept: \".o_web_studio_component\",\n                drop: function (event, ui) {\n                    var $hook = self.$('.o_web_studio_nearest_hook');\n                    if ($hook.length) {\n                        var hook_id = $hook.data('hook_id');\n                        var hook = self.hook_nodes[hook_id];\n\n                        var values = {\n                            type: 'add',\n                            structure: ui.draggable.data('structure'),\n                            field_description: ui.draggable.data('field_description'),\n                            node: hook.node,\n                            new_attrs: _.defaults(ui.draggable.data('new_attrs'), {\n                                display: 'full',\n                            }),\n                            position: hook.position,\n                        };\n                        ui.helper.removeClass('ui-draggable-helper-ready');\n                        self.trigger_up('on_hook_selected');\n                        self.trigger_up('view_change', values);\n                    }\n                },\n            });\n        });\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        this._undelegateEvents();\n        this.$el.click(function (e) {\n            e.stopPropagation();\n            e.preventDefault();\n        });\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    highlightNearestHook: function ($helper, position) {\n        EditorMixin.highlightNearestHook.apply(this, arguments);\n\n        var $nearest_form_hook = this.$('.o_web_studio_hook')\n            .touching({\n                    x: position.pageX - this.nearest_hook_tolerance,\n                    y: position.pageY - this.nearest_hook_tolerance,\n                    w: this.nearest_hook_tolerance*2,\n                    h: this.nearest_hook_tolerance*2\n                },{\n                    container: document.body\n                }\n            ).nearest({x: position.pageX, y: position.pageY}, {container: document.body}).eq(0);\n        if ($nearest_form_hook.length) {\n            $nearest_form_hook.addClass('o_web_studio_nearest_hook');\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @override\n     */\n    setLocalState: function (state) {\n        if (state.selected_node_id) {\n            var $selected_node = this.$('[data-node-id=\"' + state.selected_node_id + '\"]');\n            if ($selected_node) {\n                $selected_node.click();\n            }\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _addSpecialHooks: function () {\n        var self = this;\n\n        // add the tags hook\n        const tagsWidget =this.findNode(this.viewArch, {\n            tag: 'field',\n            widget: 'many2many_tags',\n        });\n        if (_.isUndefined(tagsWidget)) {\n            var $kanban_tags_hook = $('<span>')\n                .addClass('o_web_studio_add_kanban_tags')\n                .append($('<span>', {\n                    text: _t('Add tags'),\n                }));\n            let has_kanban_body = true;\n            let $hook_attach_node = this.$el.find('.o_kanban_record_body');\n            if ($hook_attach_node.length === 0) {\n                $hook_attach_node = this.$el;\n                has_kanban_body = false;\n            }\n            $kanban_tags_hook.prependTo($hook_attach_node);\n            $kanban_tags_hook.click(function () {\n                var compatible_fields = _.pick(self.state.fields, function (e) {\n                    return e.type === 'many2many';\n                });\n                if (_.isEmpty(compatible_fields)) {\n                    Dialog.alert(self, _t('You first need to create a many2many field in the form view.'));\n                    return;\n                }\n                var dialog = new FieldSelectorDialog(self, compatible_fields, false);\n                dialog.open();\n                dialog.on('confirm', self, function (field_name) {\n                    self.trigger_up('view_change', {\n                        type: 'add',\n                        structure: 'field',\n                        new_attrs: { name: field_name },\n                        node: {\n                            tag: has_kanban_body?'div[hasclass(\"o_kanban_record_body\")]':'div/*[1]',\n                        },\n                        position: 'inside',\n                    });\n                });\n            });\n        }\n\n        // add the dropdown hook\n        var $dropdown = this.$('.o_dropdown_kanban');\n        if ($dropdown.length) {\n            $dropdown.attr('data-node-id', this.node_id++);\n            // find dropdown node from the arch\n            var node = this.findNode(this.viewArch, {\n                tag: 'div',\n                class: 'o_dropdown_kanban',\n            });\n            // bind handler on dropdown clicked to be able to remove it\n            this.setSelectable($dropdown);\n            $dropdown.click(function () {\n                self.selected_node_id = $dropdown.data('node-id');\n                self.trigger_up('node_clicked', {\n                    node: node,\n                    $node: $dropdown,\n                });\n            });\n        } else {\n            var $top_left_hook = $('<div>')\n                .addClass('o_web_studio_add_dropdown o_dropdown_kanban dropdown')\n                .append($('<a>', {\n                    class: 'dropdown-toggle o-no-caret btn',\n                    'data-toggle': 'dropdown',\n                    href: '#',\n                }).append($('<span>', {\n                    class: 'fa fa-ellipsis-v',\n                })));\n            $top_left_hook.prependTo(this.$el);\n            $top_left_hook.click(function () {\n                Dialog.confirm(self, _t(\"Do you want to add a dropdown with colors?\"), {\n                    size: 'small',\n                    confirm_callback: function () {\n                        self.trigger_up('view_change', {\n                            structure: 'kanban_dropdown',\n                        });\n                    },\n                });\n            });\n        }\n\n        // add the priority hook\n        var priorityWidget = this.findNode(this.viewArch, {\n            tag: 'field',\n            widget: 'priority',\n        });\n        const favoriteWidget =this.findNode(this.viewArch, {\n            tag: 'field',\n            widget: 'boolean_favorite',\n        });\n        if (_.isUndefined(priorityWidget) && _.isUndefined(favoriteWidget)) {\n            var $priority_hook = $('<div>')\n                .addClass('o_web_studio_add_priority oe_kanban_bottom_left')\n                .append($('<span>', {\n                    text: _t('Add a priority'),\n                }));\n            $priority_hook.appendTo(this.$el);\n            $priority_hook.click(function () {\n                var compatible_fields = _.pick(self.state.fields, function (e) {\n                    return e.type === 'selection';\n                });\n                var dialog = new FieldSelectorDialog(self, compatible_fields, true).open();\n                dialog.on('confirm', self, function (field) {\n                    self.trigger_up('view_change', {\n                        structure: 'kanban_priority',\n                        field: field,\n                    });\n                });\n            });\n        }\n\n        // add the avatar hook\n        const avatarNode = this.findNode(this.viewArch, {\n                tag: 'img',\n                class: 'oe_kanban_avatar',\n            }\n        );\n        let $hook_attach_node = this.$el.find('.o_kanban_record_bottom');\n        if ($hook_attach_node.length === 0) {\n            $hook_attach_node = this.$el;\n        }\n        var $image = this.$('img.oe_kanban_avatar');\n        if (avatarNode) {\n            if (!$image.length) {\n                $image = $(qweb.render('web_studio.AvatarPlaceholder'));\n                $image.appendTo($hook_attach_node);\n            }\n            $image.attr('data-node-id', this.node_id++);\n            // bind handler on image clicked to be able to remove it\n            this.setSelectable($image);\n            $image.click(function () {\n                self.selected_node_id = $image.data('node-id');\n                self.trigger_up('node_clicked', {\n                    node: avatarNode,\n                    $node: $image,\n                });\n            });\n        } else {\n            var $kanban_image_hook = $('<div>')\n                .addClass('o_web_studio_add_kanban_image oe_kanban_bottom_right')\n                .append($('<span>', {\n                    text: _t('Add an avatar'),\n                }));\n            $kanban_image_hook.appendTo($hook_attach_node);\n            $kanban_image_hook.click(function () {\n                var compatible_fields = _.pick(self.state.fields, function (e) {\n                    return e.type === 'many2one' && (e.relation === 'res.partner' || e.relation === 'res.users');\n                });\n                if (_.isEmpty(compatible_fields)) {\n                    Dialog.alert(self, _t('You first need to create a many2one field to Partner or User in the form view.'));\n                    return;\n                }\n                var dialog = new FieldSelectorDialog(self, compatible_fields, false).open();\n                dialog.on('confirm', self, function (field) {\n                    self.trigger_up('view_change', {\n                        structure: 'kanban_image',\n                        field: field,\n                    });\n                });\n            });\n        }\n    },\n    /**\n     * @private\n     * @param {jQueryElement} $node\n     * @param {String} fieldName\n     */\n    _bindHandler: function ($node, fieldName) {\n        var self = this;\n\n        var node = {\n            tag: 'field',\n            attrs: { name: fieldName }\n        };\n\n        this.setSelectable($node);\n        $node.click(function (ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            self.selected_node_id = $node.data('node-id');\n            self.trigger_up('node_clicked', {\n                node: node,\n                $node: $node,\n            });\n        });\n\n        // insert a hook to add new fields\n        var $hook = this._renderHook(node);\n        $hook.insertAfter($node);\n\n        var invisibleModifier = this.fieldsInfo[fieldName].modifiers.invisible;\n        if (invisibleModifier && this._computeDomain(invisibleModifier)) {\n            $node.addClass('o_web_studio_show_invisible');\n        }\n    },\n    /**\n     * @private\n     * @param {any} value\n     * @returns {Boolean}\n     */\n    _isEmpty: function (value) {\n        if (typeof(value) === 'object') {\n            return _.isEmpty(value);\n        } else {\n            return !value && value !== 0;\n        }\n    },\n    /**\n     * @override\n     */\n    _processFields: function () {\n        this._super.apply(this, arguments);\n\n        // the layout of the special hooks are broken in the kanban dashboards\n        if (!this.is_dashboard) {\n            this._addSpecialHooks();\n        }\n    },\n    /**\n     * @override\n     */\n    _processField: function ($field, field_name) {\n        $field = this._super.apply(this, arguments);\n\n        var field = this.record[field_name];\n        // make empty widgets appear\n        if (this._isEmpty(field.value)) {\n            $field.text(field.string);\n            $field.addClass('o_web_studio_widget_empty');\n        }\n        $field.attr('data-node-id', this.node_id++);\n\n        // bind handler on field clicked to edit field's attributes\n        this._bindHandler($field, field_name);\n\n        var invisibleModifier = this.fieldsInfo[field_name].modifiers.invisible;\n        if (invisibleModifier && this._computeDomain(invisibleModifier)) {\n            $field.addClass('o_web_studio_show_invisible');\n        }\n\n        return $field;\n    },\n    /**\n     * @override\n     */\n    _processWidget: function ($field, field_name) {\n        var self = this;\n        // '_processWidget' in KanbanRecord adds a promise to this.defs only if\n        // the widget is async. Here, we need to hook on this def to access the\n        // widget's $el (it doesn't exist until the def is resolved). As calling\n        // '_super' may or may not push a promise in this.defs, we store the\n        // length of this.defs as index before calling '_super'. Note that if\n        // it doesn't push a promise, this.defs[currentDefIndex] is undefined.\n        // FIXME: get rid of this hack in master with a small refactoring\n        var currentDefIndex = this.defs.length;\n        var widget = this._super.apply(this, arguments);\n        Promise.resolve(this.defs[currentDefIndex]).then(function () {\n            widget.$el.off();\n\n            // make empty widgets appear\n            if (self._isEmpty(widget.value)) {\n                widget.$el.addClass('o_web_studio_widget_empty');\n                widget.$el.text(widget.string);\n            }\n            widget.$el.attr('data-node-id', self.node_id++);\n\n            // bind handler on field clicked to edit field's attributes\n            self._bindHandler(widget.$el, field_name);\n        });\n\n        return widget;\n    },\n    /**\n     * @private\n     * @param {Object} node\n     * @returns {JQuery}\n     */\n    _renderHook: function (node) {\n        var hook_id = _.uniqueId();\n        this.hook_nodes[hook_id] = {\n            node: node,\n            position: 'after',\n        };\n        var $hook = $('<span>', {\n            class: 'o_web_studio_hook',\n            data: {\n                hook_id: hook_id,\n            }\n        });\n        return $hook;\n    },\n    /**\n     * @override\n     */\n    _setState: function () {\n        this._super.apply(this, arguments);\n\n        if (this.options.showInvisible) {\n            this.qweb_context.kanban_compute_domain = function () {\n                // always consider a domain falsy to see invisible elements\n                return false;\n            };\n        }\n    },\n});\n\nreturn KanbanRecordEditor;\n\n});\n", "odoo.define('web_studio.ListEditor', function (require) {\n\"use strict\";\n\nvar ListRenderer = require('web.ListRenderer');\nvar EditorMixin = require('web_studio.EditorMixin');\n\nreturn ListRenderer.extend(EditorMixin, {\n    nearest_hook_tolerance: 200,\n    className: ListRenderer.prototype.className + ' o_web_studio_list_view_editor',\n    events: _.extend({}, ListRenderer.prototype.events, {\n        'click th:not(.o_web_studio_hook), td:not(.o_web_studio_hook)': '_onExistingColumn',\n    }),\n    custom_events: _.extend({}, ListRenderer.prototype.custom_events, {\n        'on_hook_selected': '_onSelectedHook',\n    }),\n    /**\n     * @constructor\n     */\n    init: function (parent, state, params) {\n        this._super.apply(this, arguments);\n        this.show_invisible = params.show_invisible;\n        this.node_id = 1;\n    },\n    /**\n     * Columns visibility is computed in the willStart of the list renderer.\n     * Here, we override the result of this computation to force the visibility\n     * of otherwise invisible columns so that they can be properly edited.\n     *\n     * @override\n     */\n    willStart: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            if (self.show_invisible) {\n                var validChildren = _.filter(self.arch.children, function (child) {\n                    // Editing controls is not supported in studio\n                    return child.tag !== 'control' && child.tag !== 'header';\n                });\n                self.invisible_columns = _.difference(validChildren, self.columns);\n                self.columns = validChildren;\n            } else {\n                self.invisible_columns = [];\n            }\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    getLocalState: function() {\n        var state = this._super.apply(this, arguments) || {};\n        if (this.selected_node_id) {\n            state.selected_node_id = this.selected_node_id;\n        }\n        return state;\n    },\n    /**\n     * @override\n     */\n    highlightNearestHook: function ($helper, position) {\n        EditorMixin.highlightNearestHook.apply(this, arguments);\n\n        var $nearest_list_hook = this.$('.o_web_studio_hook')\n            .touching({\n                    x: position.pageX - this.nearest_hook_tolerance,\n                    y: position.pageY - this.nearest_hook_tolerance,\n                    w: this.nearest_hook_tolerance*2,\n                    h: this.nearest_hook_tolerance*2\n                },{\n                    container: document.body\n                }\n            ).nearest({x: position.pageX, y: position.pageY}, {container: document.body}).eq(0);\n        if ($nearest_list_hook.length) {\n            var $elements = this._getColumnElements($nearest_list_hook);\n            $elements.addClass('o_web_studio_nearest_hook');\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @override\n     */\n    setLocalState: function(state) {\n        if (state.selected_node_id) {\n            var $selected_node = this.$('th[data-node-id=\"' + state.selected_node_id + '\"]');\n            if ($selected_node) {\n                $selected_node.click();\n            }\n        }\n    },\n    /**\n     * In the list editor, we want to select the whole column, not only a single\n     * cell.\n     *\n     * @override\n     */\n    setSelectable: function ($el) {\n        EditorMixin.setSelectable.apply(this, arguments);\n\n        var self = this;\n        $el.click(function (ev) {\n            var $target = $(ev.currentTarget);\n            self.$('.o_web_studio_clicked').removeClass('o_web_studio_clicked');\n            var $elements = self._getColumnElements($target);\n            $elements.addClass('o_web_studio_clicked');\n        })\n        .mouseover(function (ev) {\n            if (self.$('.ui-draggable-dragging').length) {\n                return;\n            }\n            var $target = $(ev.currentTarget);\n            var $elements = self._getColumnElements($target);\n            $elements.addClass('o_web_studio_hovered');\n        })\n        .mouseout(function () {\n            self.$('.o_web_studio_hovered').removeClass('o_web_studio_hovered');\n        });\n    },\n    /**\n     * Selects the field on view\n     *\n     * @param {string} fieldName\n     */\n    selectField: function (fieldName) {\n        this.$('th[data-name=' + fieldName + ']').click();\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {MouseEvent} ev\n     * @param {Object} ui\n     */\n    _handleDrop: function (ev, ui) {\n        var $hook = this.$('.o_web_studio_nearest_hook');\n        if ($hook.length) {\n            var position = $hook.closest('table').find('th').eq($hook.index()).data('position') || 'after';\n            var hookedFieldIndex = position === 'before' && $hook.index() + 1 || $hook.index() - 1;\n            var fieldName = $hook.closest('table').find('th').eq(hookedFieldIndex).data('name');\n            var node = _.find(this.columns, function (column) {\n                return column.attrs.name === fieldName;\n            });\n            if (fieldName.startsWith('button_group')) {\n                if (position === 'after') {\n                    node = node.children[node.children.length - 1];\n                } else if (position === 'before') {\n                    node = node.children[0];\n                }\n            }\n            // When there is no column in the list view, the only possible hook is inside <tree>\n            if (!this.columns.length) {\n                node = {\n                   tag: 'tree',\n               };\n               position = 'inside';\n            }\n            // draggable is only set on `droppable` elements, not `draggable`\n            var $drag = ui.draggable || $(ev.target);\n            this.handleDrop($drag, node, position);\n            ui.helper.removeClass('ui-draggable-helper-ready');\n            $hook.removeClass('o_web_studio_nearest_hook');\n        }\n    },\n    /**\n     * Get all elements associated to a table column.\n     *\n     * @private\n     * @param {jQuery} $target\n     * @returns {jQuery}\n     */\n    _getColumnElements: function ($target) {\n        return $target.closest('table')\n            .find('tr')\n            .children(':nth-child(' + ($target.index() + 1) + ')');\n    },\n    /**\n     * Add totalWidth of columns + hook cells going to add\n     *\n     * @override\n     * @private\n     * @return {integer}\n     */\n    _getColumnsTotalWidth() {\n        const thElementsLength = this.el.querySelectorAll('thead th').length + 1;\n        return this._super(...arguments) + thElementsLength;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _render: function () {\n        var self = this;\n        var prom = this._super.apply(this, arguments);\n        prom.then(function () {\n            self.$el.droppable({\n                accept: \".o_web_studio_component\",\n                drop: self._handleDrop.bind(self),\n            });\n\n            self.setSelectable(self.$('th, td').not('.o_web_studio_hook'));\n            // Apply 'text-muted' class on optional field dropdown\n            self.$('i.o_optional_columns_dropdown_toggle')\n                .addClass('text-muted')\n        });\n        return prom;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderBody: function () {\n        // we don't want to be able to resequence in the editor\n        this.hasHandle = false;\n        return this._super();\n    },\n    /**\n     * @override\n     * @private\n     * @param {Object} record\n     * @param {Object} node\n     * @param {...any} args\n     * @return {jQueryElement}\n     */\n    _renderBodyCell(record, node, ...args) {\n        const $td = this._super(record, node, ...args);\n        const invisibleTechnicalNames = this.invisible_columns.map(column => column.attrs.name);\n        if (invisibleTechnicalNames.includes(node.attrs.name)) {\n            $td.addClass('o_web_studio_show_invisible');\n        }\n        return $td;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderHeader: function () {\n        var $header = this._super.apply(this, arguments);\n        var self = this;\n        // Insert a hook after each th\n        _.each($header.find('th'), function (th) {\n            var $new_th = $('<th>')\n                .addClass('o_web_studio_hook')\n                .append(\n                    $('<i>').addClass('fa fa-plus')\n            );\n            $new_th.insertAfter($(th));\n            $(th).attr('data-node-id', self.node_id++);\n\n            self._setDraggable($(th));\n        });\n\n        // Insert a hook before the first column\n        var $new_th_before = $('<th>')\n            .addClass('o_web_studio_hook')\n            .data('position', 'before')\n            .append(\n                $('<i>').addClass('fa fa-plus')\n        );\n        $new_th_before.prependTo($header.find('tr'));\n        return $header;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderHeaderCell: function (node) {\n        var $th = this._super.apply(this, arguments);\n        if (_.contains(this.invisible_columns, node)) {\n            $th.addClass('o_web_studio_show_invisible');\n        }\n        return $th;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderEmptyRow: function () {\n        // render an empty row\n        var $tds = [];\n         _.each(this.columns, function () {\n            $tds.push($('<td>&nbsp;</td>'));\n        });\n        if (this.has_selectors) {\n            $tds.push($('<td>&nbsp;</td>'));\n        }\n        var $row = $('<tr>').append($tds);\n\n        this._addStudioHooksOnBodyRow($row);\n\n        return $row;\n    },\n    /**\n     * Adds studio hooks for a row in a list right after their rendering\n     * Since rows of thead and tfoot have special behaviors and classes\n     * this function should only be used for rows in the body of the table\n     * @param {JQuery} $row\n     */\n    _addStudioHooksOnBodyRow: function ($row) {\n        // Insert a hook after each cell\n        _.each($row.find('td, th'), function (cell) {\n            $('<td>')\n                .addClass('o_web_studio_hook')\n                .insertAfter($(cell));\n        });\n\n        // Insert a hook before the first column\n        $('<td>')\n            .addClass('o_web_studio_hook')\n            .prependTo($row);\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderRow: function () {\n        var $row = this._super.apply(this, arguments);\n        this._addStudioHooksOnBodyRow($row);\n\n        return $row;\n    },\n    /**\n     * @override\n     * @private\n     */\n    _renderFooter: function () {\n        var $footer = this._super.apply(this, arguments);\n\n        // Insert a hook after each td\n        _.each($footer.find('td'), function (td) {\n            $('<td>')\n                .addClass('o_web_studio_hook')\n                .insertAfter($(td));\n        });\n\n        // Insert a hook before the first column\n        $('<td>')\n            .addClass('o_web_studio_hook')\n            .prependTo($footer.find('tr'));\n\n        return $footer;\n    },\n    /**\n     * Set a jQuery element as draggable.\n     * Note that we only set fields as draggable for now.\n     *\n     * @param {jQuery} $el\n     */\n    _setDraggable: function ($el) {\n        var self = this;\n\n        $el.draggable({\n            axis: 'x',\n            scroll: false,\n            revertDuration: 200,\n            refreshPositions: true,\n            start: function (e, ui) {\n                self.$('.o_web_studio_hovered').removeClass('o_web_studio_hovered');\n                self.$('.o_web_studio_clicked').removeClass('o_web_studio_clicked');\n                ui.helper.addClass('ui-draggable-helper');\n            },\n            stop: this._handleDrop.bind(this),\n            revert: function () {\n                // a field cannot be dropped on the same place\n                var $hook = self.$('.o_web_studio_nearest_hook');\n                if ($hook.length) {\n                    var position = $hook.closest('table').find('th').eq($hook.index()).data('position') || 'after';\n                    var hookedFieldIndex = position === 'before' && $hook.index() + 1 || $hook.index() - 1;\n                    var fieldName = $hook.closest('table').find('th').eq(hookedFieldIndex).data('name');\n                    if (fieldName !== self.$('.ui-draggable-helper').data('name')) {\n                        return false;\n                    }\n                }\n                self.$('.ui-draggable-helper').removeClass('ui-draggable-helper');\n                self.$('.ui-draggable-helper-ready').removeClass('ui-draggable-helper-ready');\n                return true;\n            },\n        });\n\n        // display nearest hook (handled by the ViewEditorManager)\n        $el.on('drag', _.throttle(function (event, ui) {\n            self.trigger_up('drag_component', {\n                position: {pageX: event.pageX, pageY: event.pageY},\n                $helper: ui.helper,\n            });\n        }, 200));\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onExistingColumn: function (ev) {\n        var $el = $(ev.currentTarget);\n        var $selected_column = $el.closest('table').find('th').eq($el.index());\n\n        var field_name = $selected_column.data('name');\n        var node = _.find(this.columns, function (column) {\n            return column.attrs.name === field_name;\n        });\n        this.selected_node_id = $selected_column.data('node-id');\n        this.trigger_up('node_clicked', {node: node});\n    },\n    /**\n     * @private\n     */\n    _onSelectedHook: function () {\n        this.selected_node_id = false;\n    },\n\n    /**\n     * Undo the ListRenderer._groupAdjacentButtons() operation\n     */\n    preprocessArch: function (arch) {\n        if (!arch.children) return arch;\n        const children = [];\n        for (let child of arch.children) {\n            if (child.tag !== 'button_group') {\n                children.push(child);\n            } else {\n                children.push(...child.children);\n            }\n        }\n        return {...arch, children};\n    },\n});\n\n});\n", "odoo.define('web_studio.NewButtonBoxDialog', function (require) {\n\"use strict\";\n\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar relational_fields = require('web.relational_fields');\n\nvar StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\nvar utils = require('web_studio.utils');\n\nvar Many2one = relational_fields.FieldMany2One;\nvar _t = core._t;\n\nvar NewButtonBoxDialog = Dialog.extend(StandaloneFieldManagerMixin, {\n    template: 'web_studio.NewButtonBoxDialog',\n    events: {\n        'click .o_web_studio_icon_selector': '_on_IconSelector',\n    },\n    /**\n     * @override\n     */\n    init: function (parent, model_name) {\n        this.model_name = model_name;\n        this.ICONS = utils.ICONS;\n\n        var options = {\n            title: _t('Add a Button'),\n            size: 'small',\n            buttons: [{\n                text: _t(\"Confirm\"),\n                classes: 'btn-primary',\n                click: this._onConfirm.bind(this)\n            }, {\n                text: _t(\"Cancel\"),\n                close: true\n            }],\n        };\n\n        this._super(parent, options);\n        StandaloneFieldManagerMixin.init.call(this);\n\n        var self = this;\n        this.opened().then(function () {\n            // focus on input\n            self.$el.find('input[name=\"string\"]').focus();\n        });\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        var defs = [];\n        defs.push(this._super.apply(this, arguments));\n        defs.push(this.model.makeRecord('ir.actions.act_window', [{\n            name: 'field',\n            relation: 'ir.model.fields',\n            type: 'many2one',\n            domain: [['relation', '=', this.model_name], ['ttype', 'in', ['many2one', 'many2many']], ['store', '=', true]],\n        }]).then(function (recordID) {\n            var options = {\n                mode: 'edit',\n                attrs: {\n                    can_create: false,\n                    can_write: false,\n                },\n            };\n            var record = self.model.get(recordID);\n            self.many2one = new Many2one(self, 'field', record, options);\n            self._registerWidget(recordID, 'field', self.many2one);\n            self.many2one.appendTo(self.$('.js_many2one_field'));\n        }));\n        return Promise.all(defs);\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onConfirm: function () {\n        var string = this.$('input[name=\"string\"]').val() || 'New Button';\n        var icon = this.selected_icon || this.ICONS[0].split(' ')[1];\n        var field_id = this.many2one.value && this.many2one.value.res_id;\n        if (!field_id) {\n            Dialog.alert(this, _t('Select a related field.'));\n            return;\n        }\n        this.trigger('saved', {\n            string: string,\n            field_id: field_id,\n            icon: icon,\n        });\n        this.close();\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _on_IconSelector: function (ev) {\n        var $el = $(ev.currentTarget);\n        this.$('.o_selected').removeClass('o_selected');\n        $el.addClass('o_selected');\n        var icon = $(ev.currentTarget).data('value');\n        // only takes `fa-...` instead of `fa fa-...`\n        this.selected_icon = icon && icon.split(' ')[1];\n    },\n});\n\nreturn NewButtonBoxDialog;\n\n});\n", "odoo.define('web_studio.SearchEditor', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nconst core = require('web.core');\nvar Domain = require('web.Domain');\nvar DomainSelectorDialog = require(\"web.DomainSelectorDialog\");\n\nvar EditorMixin = require('web_studio.EditorMixin');\nvar FormEditorHook = require('web_studio.FormEditorHook');\nvar SearchRenderer = require('web_studio.SearchRenderer');\nvar utils = require('web_studio.utils');\n\nconst _t = core._t;\n\nvar SearchEditor = SearchRenderer.extend(EditorMixin, {\n    nearest_hook_tolerance: 50,\n    className: SearchRenderer.prototype.className + ' o_web_studio_search_view_editor',\n    custom_events: _.extend({}, SearchRenderer.prototype.custom_events, {\n        'on_hook_selected': function () {\n            this.selected_node_id = false;\n        },\n    }),\n    /**\n     * @constructor\n     */\n    init: function (parent, state, params) {\n        this._super.apply(this, arguments);\n        this.hook_nodes = {};\n        this.node_id = 1;\n        this.show_invisible = params.show_invisible;\n        this.FILTER_TYPES = ['date', 'datetime'];\n        this.GROUPABLE_TYPES = ['many2one', 'many2many', 'char', 'boolean', 'selection', 'date', 'datetime'];\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    getLocalState: function () {\n        var state = this._super.apply(this, arguments) || {};\n        if (this.selected_node_id) {\n            state.selected_node_id = this.selected_node_id;\n        }\n        return state;\n    },\n    /**\n     * @override\n     */\n    highlightNearestHook: function ($helper, position) {\n        EditorMixin.highlightNearestHook.apply(this, arguments);\n\n        var $nearest_form_hook = this.$('.o_web_studio_hook')\n            .touching({\n                    x: position.pageX - this.nearest_hook_tolerance,\n                    y: position.pageY - this.nearest_hook_tolerance,\n                    w: this.nearest_hook_tolerance*2,\n                    h: this.nearest_hook_tolerance*2\n                },{\n                    container: document.body\n                }\n            ).nearest({x: position.pageX, y: position.pageY}, {container: document.body}).eq(0);\n        if ($nearest_form_hook.length) {\n            // We check what is being dropped and in which table\n            // since in the autocompletion fields we can drop fields\n            // in group_by tables we can drop groupabble fields and separator\n            // and in the filter table we can only drop filter and separator and\n            // date/datetime components.\n            const hookClasses = $helper.attr(\"class\");\n            const tableType = $nearest_form_hook.closest('table').data('type');\n            const isField = hookClasses.indexOf(\"o_web_studio_field\") > -1;\n            const isFilter = hookClasses.indexOf(\"o_web_studio_filter\") > -1;\n            const isSeparator = hookClasses.indexOf(\"o_web_studio_filter_separator\") > -1;\n            const newAttrs = $helper.data('new_attrs') || {};\n            const type = newAttrs.type;\n            const store = newAttrs.store;\n            let addHook = false;\n            if (tableType === 'group_by' && (isField && _.contains(this.GROUPABLE_TYPES, type) && store === 'true')) {\n                addHook = true;\n            } else if (tableType === 'filters' && (isField && _.contains(this.FILTER_TYPES, type) && store === 'true' || isSeparator || isFilter)) {\n                addHook = true;\n            } else if (tableType === 'autocompletion_fields' && isField) {\n                addHook = true;\n            }\n            if (addHook) {\n                $nearest_form_hook.addClass('o_web_studio_nearest_hook');\n                return true;\n            }\n        }\n        return false;\n    },\n    /**\n     * @override\n     */\n    setLocalState: function (state) {\n        if (state.selected_node_id) {\n            var $selected_node = this.$('[data-node-id=\"' + state.selected_node_id + '\"]');\n            if ($selected_node) {\n                $selected_node.click();\n            }\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Add hook inside the $parent given\n     * whith the tag corresponding to the type.\n     *\n     * @private\n     * @param {JQuery} $parent\n     * @param {String} type\n     */\n    _addFirstHook: function ($parent, type) {\n        var node = {\n            tag: 'search'\n        };\n        if (type === \"group_by\") {\n            node = {\n                tag: 'group',\n            };\n        }\n        var formEditorHook = this._renderHook(node, 'inside', 'tr', type);\n        this.defs.push(formEditorHook.appendTo($parent));\n    },\n    /**\n     * Add hook before the first child of a table.\n     *\n     * @private\n     * @param {JQuery} $result\n     * @param {Object} first_child\n     * @param {String} type\n     */\n    _addHookBeforeFirstChild: function ($result, first_child, type) {\n        var formEditorHook = this._renderHook(first_child, 'before', 'tr', type);\n        this.defs.push(formEditorHook.insertBefore($result));\n    },\n    /**\n     * Check for each table if it is empty.\n     * If so, add one hook inside the table.\n     *\n     * @private\n     */\n    _addHookEmptyTable: function () {\n        var $tbody = this.$('.o_web_studio_search_autocompletion_fields tbody');\n        if (!$tbody.children().length) {\n            this._addFirstHook($tbody, 'field');\n        }\n        $tbody = this.$('.o_web_studio_search_filters tbody');\n        if (!$tbody.children().length) {\n            this._addFirstHook($tbody, 'filter');\n        }\n        $tbody = this.$('.o_web_studio_search_group_by tbody');\n        if (!$tbody.children().length) {\n            this._addFirstHook($tbody, 'group_by');\n        }\n    },\n    /**\n     * if show_invisible is True then returns all nodes\n     * visible + invisible else do super call\n     *\n     * @override\n     */\n    _getNodesToTreat() {\n        if (this.show_invisible) {\n            return this.arch.children.slice();\n        }\n        return this._super(...arguments);\n    },\n    /**\n     * @private\n     * @param {String} model\n     * @param {String} value\n     * @param {Object} option\n     *\n     * @returns {Dialog}\n     */\n    _openDomainDialog: function (model, value, option) {\n        return new DomainSelectorDialog(this, model, value, option).open();\n    },\n    /**\n     * Append a node for the type given to the param $result\n     * and add 'click' event handler.\n     *\n     * @private\n     * @param {Object} node\n     * @param {JQuery} $result\n     * @param {String} type\n     */\n    _prepareEditableSearchNode: function (node, $result, type) {\n        var self = this;\n        $result.attr('data-node-id', this.node_id++);\n        this.setSelectable($result);\n        $result.click(function () {\n            self.selected_node_id = $result.data('node-id');\n            self.trigger_up('node_clicked', {node: node});\n        });\n        // Add hook after this field\n        var formEditorHook = this._renderHook(node, 'after', 'tr', type);\n        this.defs.push(formEditorHook.insertAfter($result));\n        this._renderHookBeforeFirstChild($result, type);\n    },\n    /**\n     * @override\n     * @private\n     */\n    _render: function () {\n        var prom = this._super.apply(this, arguments);\n\n        var self = this;\n        this.$('.ui-droppable').droppable({\n            accept: \".o_web_studio_component\",\n            drop: function (event, ui) {\n                var $hook = self.$('.o_web_studio_nearest_hook');\n                if ($hook.length) {\n                    var hook_id = $hook.data('hook_id');\n                    var hook = self.hook_nodes[hook_id];\n                    var new_attrs = ui.draggable.data('new_attrs') || {};\n                    var structure = ui.draggable.data('structure');\n                    // Check if a filter component has been dropped\n                    if (structure === \"filter\") {\n                        // Create the input for the string here\n                        // in order to be able to get the value\n                        // easily in the event trigger below\n                        var $domain_div = $(\"<div><label>Label:</label></div>\");\n                        self.$domain_label_input = $(\"<input type='text' id='domain_label' class='o_input mb8'/>\");\n                        $domain_div.append(self.$domain_label_input);\n                        var domain_dialog = self._openDomainDialog(\n                            self.model,\n                            [[\"id\",\"=\",1]],\n                            {\n                                title: _t(\"New Filter\"),\n                                size: 'medium',\n                                readonly: false,\n                                debugMode: config.isDebug(),\n                                $content: $domain_div,\n                            }\n                        );\n                        domain_dialog.opened().then(() => self.$domain_label_input.focus());\n                        // Add the node when clicking on the dialog 'save' button\n                        domain_dialog.on('domain_selected', self, function (event) {\n                            new_attrs = {\n                                domain: Domain.prototype.arrayToString(event.data.domain),\n                                string: self.$domain_label_input.val(),\n                                name: 'studio_' + structure + '_' + utils.randomString(5),\n                            };\n                            var values = {\n                                type: 'add',\n                                structure: structure,\n                                node: hook.node,\n                                new_attrs: new_attrs,\n                                position: hook.position,\n                            };\n                            this.trigger_up('view_change', values);\n                        });\n                        $hook.removeClass('o_web_studio_nearest_hook');\n                        ui.helper.removeClass('ui-draggable-helper-ready');\n                        self.trigger_up('on_hook_selected');\n                        return;\n                    }\n                    if (hook.type === \"filter\" && structure === \"field\" && _.contains(self.FILTER_TYPES, new_attrs.type)) {\n                        structure = \"filter\";\n                        new_attrs.string = new_attrs.label;\n                        new_attrs.date = new_attrs.name;\n                        new_attrs.name = 'studio_filter_by_' + utils.randomString(5);\n                    }\n                    // Since the group_by are defined by filter tag inside a group\n                    // but the droppable object is a field structure,\n                    // the structure is overridden\n                    if (hook.type === \"group_by\" && structure === \"field\") {\n                        structure = \"filter\";\n                        // There is no element 'group' in the view that can be target\n                        // to add a group_by filter so we add one before the insertion\n                        // of the group_by filter\n                        if (!self.first_group_by) {\n                            new_attrs.create_group = true;\n                        }\n                        new_attrs.string = new_attrs.label;\n                        new_attrs.context = \"{'group_by': '\" + new_attrs.name + \"'}\";\n                        new_attrs.name = 'studio_group_by_' + utils.randomString(5);\n                    }\n                    var values = {\n                        type: 'add',\n                        structure: structure,\n                        field_description: ui.draggable.data('field_description'),\n                        node: hook.node,\n                        new_attrs: new_attrs,\n                        position: hook.position,\n                    };\n                    ui.helper.removeClass('ui-draggable-helper-ready');\n                    self.trigger_up('on_hook_selected');\n                    self.trigger_up('view_change', values);\n                }\n            },\n        });\n        // Visually indicate the 'undroppable' portion\n        this.$el.droppable({\n            accept: \".o_web_studio_component\",\n            tolerance: \"touch\",\n            over: function (ev, ui) {\n                var $autocompletionFields = self.$('.o_web_studio_search_autocompletion_fields');\n                var $filters = self.$('.o_web_studio_search_filters');\n                var $grouBy = self.$('.o_web_studio_search_group_by');\n                switch (ui.draggable.data('structure')) {\n                    case 'field':\n                        var type = ui.draggable.data('new_attrs').type;\n                        var store = ui.draggable.data('new_attrs').store;\n                        if (!(_.contains(self.FILTER_TYPES, type) && store === 'true')) {\n                            $filters.addClass('text-muted');\n                        }\n                        if (!(_.contains(self.GROUPABLE_TYPES, type) && store === 'true')) {\n                            $grouBy.addClass('text-muted');\n                        }\n                        break;\n                    case 'filter':\n                    case 'separator':\n                        $grouBy.addClass('text-muted');\n                        $autocompletionFields.addClass('text-muted');\n                        break;\n                }\n            },\n            deactivate: function (ev, ui) {\n                self.$('.ui-droppable').removeClass('text-muted');\n            },\n        });\n        this._addHookEmptyTable();\n\n        return prom;\n    },\n    /**\n     * @override\n     * @private\n     * @param {Object} node\n     */\n    _renderField: function (node) {\n        var $result = this._super.apply(this, arguments);\n        this._prepareEditableSearchNode(node, $result, 'field');\n        return $result;\n    },\n    /**\n     * @override\n     * @private\n     * @param {Object} node\n     */\n    _renderFilter: function (node) {\n        var $result = this._super.apply(this, arguments);\n        node.attrs.domain = Domain.prototype.arrayToString(node.attrs.domain);\n        this._prepareEditableSearchNode(node, $result, 'filter');\n        return $result;\n    },\n    /**\n     * @override\n     * @private\n     * @param {Object} node\n     */\n    _renderGroupBy: function (node) {\n        node.tag = \"filter\";\n        // attribute used in the template to know\n        // if we are clicking on a group_by or a filter\n        // since the nodes have the same tag \"filter\"\n        node.attrs.is_group_by = true;\n        var $result = this._super.apply(this, arguments);\n        this._prepareEditableSearchNode(node, $result, 'group_by');\n        return $result;\n    },\n    /**\n     * @private\n     * @param {Object} node\n     * @param {String} position\n     * @param {String} tag_name\n     * @param {String} type\n     *\n     * @returns {Widget}\n     */\n    _renderHook: function (node, position, tag_name, type) {\n        var hook_id = _.uniqueId();\n        this.hook_nodes[hook_id] = {\n            node: node,\n            position: position,\n            type: type,\n        };\n        return new FormEditorHook(this, position, hook_id, tag_name);\n    },\n    /**\n     * Render hook before the first child of a table.\n     *\n     * @private\n     * @param {JQuery} $result\n     * @param {String} type\n     */\n    _renderHookBeforeFirstChild: function ($result, type) {\n        if (type === 'field' && this.first_field && this.first_field !== 'done') {\n            this._addHookBeforeFirstChild($result, this.first_field, 'field');\n            this.first_field = 'done';\n        } else if (type === 'filter' && this.first_filter && this.first_filter !== 'done') {\n            this._addHookBeforeFirstChild($result, this.first_filter, 'filter');\n            this.first_filter = 'done';\n        } else if (type ==='group_by' && this.first_group_by && this.first_group_by !== 'done') {\n            this._addHookBeforeFirstChild($result, this.first_group_by, 'group_by');\n            this.first_group_by = 'done';\n        }\n    },\n    /**\n     * @override\n     * @private\n     * @param {Object} node\n     */\n    _renderSeparator: function (node) {\n        var $result = this._super.apply(this, arguments);\n        this._prepareEditableSearchNode(node, $result, 'filter');\n        return $result;\n    },\n});\n\nreturn SearchEditor;\n\n});\n"], "file": "/web/assets/103-24a45da/web_studio.studio_assets.js", "sourceRoot": "../../../"}